=====================Reduction starts.======================

The initial program size is 38
The command line options are:
---
helpFlags:
  groupName: "Help"
  help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r_with_language_specified.sh"
  inputFile: "seed.unknown_language"
  deps: []
  variantFile: "variant.unknown_language"
  sourceFile: "seed.unknown_language"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_seed_reduction_golden_test_lang_perses_node_priority_with_dfs_delta_seed.unknown_language_variant.unknown_language"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: true
  numOfThreads: 1
  codeFormat: null
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "DFS"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
languageControlFlags:
  groupName: "Language Control"
  languageName: "c"
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
trecFlags:
  groupName: "T-Rec Reducer Control"
  enableTrec: false
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "reduction_progress_lang.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "FALSE"
  cacheType: "CONTENT_SHA512"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
experimentFlags:
  groupName: "Experiment Control"
  onDemandReducerClasses: null
seedInputFlags:
  groupName: "Inputs"
  testScript: "r_with_language_specified.sh"
  inputFile: "seed.unknown_language"
  deps: []
  variantFile: "variant.unknown_language"
  sourceFile: "seed.unknown_language"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=289,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=284,slot_type=declarationSpecifiers}
        |       |___Token:int {id=288,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=266,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=283,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=268,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=270,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=271,slot_type=LeftParen}
        |           |___(+) {id=277,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
        |           |   |___Token:void {id=282,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
        |           |___Token:) {id=273,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=230,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=231,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=265,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=232,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=235,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=261,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=237,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=238,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=239,slot_type=Assign}
            |       |   |               |___Token:1 {id=258,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=233,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=193,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=194,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=228,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=195,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=198,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=224,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=200,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=201,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=202,slot_type=Assign}
            |       |   |               |___Token:2 {id=221,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=196,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=156,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=157,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=191,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=158,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=161,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=187,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=163,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=164,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=165,slot_type=Assign}
            |       |   |               |___Token:3 {id=184,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=159,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=119,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=120,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=154,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=121,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=124,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:d {id=150,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=126,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=127,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=128,slot_type=Assign}
            |       |   |               |___Token:4 {id=147,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=122,slot_type=Semi}
            |       |___expressionStatement {id=49,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=50,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=68,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:printf {id=117,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=70,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=72,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=73,slot_type=LeftParen}
            |       |   |               |___(?) {id=74,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=76,slot_type=expression}
            |       |   |               |       |___(+) {id=115,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=116,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=78,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=79,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=80,slot_type=Comma}
            |       |   |               |               |___Token:a {id=98,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=75,slot_type=RightParen}
            |       |   |___Token:; {id=51,slot_type=Semi}
            |       |___jumpStatement {id=22,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=25,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=26,slot_type=Return}
            |           |   |___(?) {id=27,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=46,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=24,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=38==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    return
    0
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    return
    0
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: seed.unknown_language--
    #include <stdio.h>
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: seed.unknown_language--
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    return
    0
    ;
    }
    --file: variant.unknown_language--
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    return
    0
    ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=38==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    return
    0
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    return
    0
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    ;
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    c
    ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    c
    ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    a
    =
    1
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    a
    =
    1
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    b
    =
    2
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    b
    =
    2
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int b = 2;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    c
    =
    3
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    c
    =
    3
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int c = 3;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    d
    =
    4
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    ;
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int d = 4;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=38==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    return
    0
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    return
    0
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=38==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    return
    0
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    return
    0
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=38==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    return
    0
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    return
    0
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 16
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int c = 3;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int c = 3;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int b = 2;
        int c = 3;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 13 from 38 to 35
------------------------------------------------------------


=================Reducing node 49, size=35==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=49}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 50, size=35==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 68, size=35==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=68}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
        printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    "%d"
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    "%d"
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
               "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    "%d"
    ,
    a
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    "%d"
    ,
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
               "%d", a ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 230, size=35=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=230}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
                 ;
        int b = 2;
        int c = 3;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 230
------------------------------------------------------------


=================Reducing node 193, size=35=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=193}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
                 ;
        int c = 3;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 156, size=35=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=156}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
                 ;
        int d = 4;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 119, size=35=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    int
    d
    =
    4
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=119}
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 17
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 119 from 35 to 31
------------------------------------------------------------


=================Reducing node 70, size=31==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 72, size=31==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=72}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 266, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 266
------------------------------------------------------------


=================Reducing node 268, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 268
------------------------------------------------------------


=================Reducing node 270, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=270}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 270
------------------------------------------------------------


=================Reducing node 232, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int      ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 232
------------------------------------------------------------


=================Reducing node 235, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=235}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a    ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 235
------------------------------------------------------------


=================Reducing node 195, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int      ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 195
------------------------------------------------------------


=================Reducing node 198, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=198}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b    ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 198
------------------------------------------------------------


=================Reducing node 158, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int      ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 158
------------------------------------------------------------


=================Reducing node 161, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=161}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c    ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 74, size=31==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 76, size=31==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=76}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf(      a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


=================Reducing node 237, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a    ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 237
------------------------------------------------------------


=================Reducing node 238, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=238}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 238
------------------------------------------------------------


=================Reducing node 200, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b    ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 200
------------------------------------------------------------


=================Reducing node 201, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=201}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 201
------------------------------------------------------------


=================Reducing node 163, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c    ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 163
------------------------------------------------------------


=================Reducing node 164, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=164}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 164
------------------------------------------------------------


=================Reducing node 78, size=31==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 78
------------------------------------------------------------


=================Reducing node 79, size=31==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=79}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 79
------------------------------------------------------------


=================Reducing node 289, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 289
------------------------------------------------------------


=================Reducing node 283, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 283
------------------------------------------------------------


=================Reducing node 277, size=31=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    void
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 18
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 277 from 31 to 30
------------------------------------------------------------


=================Reducing node 273, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 273
------------------------------------------------------------


=================Reducing node 271, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 271
------------------------------------------------------------


=================Reducing node 261, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 261
------------------------------------------------------------


=================Reducing node 258, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 258
------------------------------------------------------------


=================Reducing node 239, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 239
------------------------------------------------------------


=================Reducing node 233, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 233
------------------------------------------------------------


=================Reducing node 231, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 231
------------------------------------------------------------


=================Reducing node 265, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 265
------------------------------------------------------------


=================Reducing node 224, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 224
------------------------------------------------------------


=================Reducing node 221, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 221
------------------------------------------------------------


=================Reducing node 202, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 202
------------------------------------------------------------


=================Reducing node 196, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 196
------------------------------------------------------------


=================Reducing node 194, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 228, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 228
------------------------------------------------------------


=================Reducing node 187, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 184, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 184
------------------------------------------------------------


=================Reducing node 165, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 159, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 159
------------------------------------------------------------


=================Reducing node 157, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 157
------------------------------------------------------------


=================Reducing node 191, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 191
------------------------------------------------------------


=================Reducing node 122, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 122
------------------------------------------------------------


=================Reducing node 117, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 117
------------------------------------------------------------


=================Reducing node 115, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 115
------------------------------------------------------------


=================Reducing node 116, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 98, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 98
------------------------------------------------------------


=================Reducing node 80, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 80
------------------------------------------------------------


=================Reducing node 75, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 75
------------------------------------------------------------


=================Reducing node 73, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 51, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 51
------------------------------------------------------------


=================Reducing node 11, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 284, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=284}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 284
------------------------------------------------------------


=================Reducing node 288, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 288
------------------------------------------------------------


=Fixpoint iteration 2. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=289,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=284,slot_type=declarationSpecifiers}
        |       |___Token:int {id=288,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=266,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=283,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=268,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=270,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=271,slot_type=LeftParen}
        |           |___Token:) {id=273,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=230,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=231,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=265,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=232,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=235,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=261,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=237,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=238,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=239,slot_type=Assign}
            |       |   |               |___Token:1 {id=258,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=233,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=193,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=194,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=228,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=195,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=198,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=224,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=200,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=201,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=202,slot_type=Assign}
            |       |   |               |___Token:2 {id=221,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=196,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=156,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=157,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=191,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=158,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=161,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=187,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=163,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=164,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=165,slot_type=Assign}
            |       |   |               |___Token:3 {id=184,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=159,slot_type=Semi}
            |       |___Token:; {id=122,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3,Semi]}
            |       |___expressionStatement {id=49,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=50,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=68,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=117,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=70,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=72,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=73,slot_type=LeftParen}
            |           |               |___(?) {id=74,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=76,slot_type=expression}
            |           |               |       |___(+) {id=115,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=116,slot_type=StringLiteral}
            |           |               |       |___(*) {id=78,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=79,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=80,slot_type=Comma}
            |           |               |               |___Token:a {id=98,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=75,slot_type=RightParen}
            |           |___Token:; {id=51,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: seed.unknown_language--
    #include <stdio.h>
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: seed.unknown_language--
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    ;
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    b
    ++
    c
    ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    a
    =
    1
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    a
    =
    1
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    b
    =
    2
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    b
    =
    2
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int b = 2;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    c
    =
    3
    ;
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    c
    =
    3
    ;
    b
    ++
    c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        int c = 3;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    c
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 13
------------------------------------------------------------


=================Reducing node 49, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=49}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 50, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 68, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=68}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    "%d"
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    "%d"
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
               "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    "%d"
    ,
    a
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    "%d"
    ,
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
               "%d", a ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 230, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=230}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
                 ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 230
------------------------------------------------------------


=================Reducing node 193, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=193}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
                 ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 156, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=156}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
                 ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 70, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    c
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 72, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=72}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 266, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 266
------------------------------------------------------------


=================Reducing node 232, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int      ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 232
------------------------------------------------------------


=================Reducing node 235, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=235}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a    ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 235
------------------------------------------------------------


=================Reducing node 195, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int      ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 195
------------------------------------------------------------


=================Reducing node 198, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=198}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b    ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 198
------------------------------------------------------------


=================Reducing node 158, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int      ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 158
------------------------------------------------------------


=================Reducing node 161, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=161}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c    ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 74, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 76, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=76}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf(      a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


=================Reducing node 268, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 268
------------------------------------------------------------


=================Reducing node 270, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=270}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 270
------------------------------------------------------------


=================Reducing node 237, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a    ;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 237
------------------------------------------------------------


=================Reducing node 238, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=238}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 238
------------------------------------------------------------


=================Reducing node 200, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b    ;
        int c = 3;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 200
------------------------------------------------------------


=================Reducing node 201, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=201}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 201
------------------------------------------------------------


=================Reducing node 163, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c    ;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 163
------------------------------------------------------------


=================Reducing node 164, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=164}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 164
------------------------------------------------------------


=================Reducing node 78, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    c
    )
    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(    )
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 78
------------------------------------------------------------


=================Reducing node 79, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=79}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 79
------------------------------------------------------------


=================Reducing node 289, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 289
------------------------------------------------------------


=================Reducing node 283, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 283
------------------------------------------------------------


=================Reducing node 273, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 273
------------------------------------------------------------


=================Reducing node 271, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 271
------------------------------------------------------------


=================Reducing node 261, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 261
------------------------------------------------------------


=================Reducing node 258, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 258
------------------------------------------------------------


=================Reducing node 239, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 239
------------------------------------------------------------


=================Reducing node 233, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 233
------------------------------------------------------------


=================Reducing node 231, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 231
------------------------------------------------------------


=================Reducing node 265, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 265
------------------------------------------------------------


=================Reducing node 224, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 224
------------------------------------------------------------


=================Reducing node 221, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 221
------------------------------------------------------------


=================Reducing node 202, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 202
------------------------------------------------------------


=================Reducing node 196, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 196
------------------------------------------------------------


=================Reducing node 194, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 228, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 228
------------------------------------------------------------


=================Reducing node 187, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 184, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 184
------------------------------------------------------------


=================Reducing node 165, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 159, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 159
------------------------------------------------------------


=================Reducing node 157, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 157
------------------------------------------------------------


=================Reducing node 191, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 191
------------------------------------------------------------


=================Reducing node 122, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 122
------------------------------------------------------------


=================Reducing node 117, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 117
------------------------------------------------------------


=================Reducing node 115, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 115
------------------------------------------------------------


=================Reducing node 116, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 98, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 98
------------------------------------------------------------


=================Reducing node 80, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 80
------------------------------------------------------------


=================Reducing node 75, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 75
------------------------------------------------------------


=================Reducing node 73, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 51, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 51
------------------------------------------------------------


=================Reducing node 11, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=30==================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=284}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 284, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=284}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 284
------------------------------------------------------------


=================Reducing node 288, size=30=================

The current best program is the following

    --file: seed.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    ;
    printf
    (
    "%d"
    ,
    a
    )
    ;
    }
    --file: variant.unknown_language--
    #include <stdio.h>
    int
    main
    (
    )
    {
    int
    a
    =
    1
    ;
    int
    b
    =
    2
    ;
    int
    c
    =
    3
    ;
    b
    ++
    ;
    printf
    (
    "%d"
    ,
    c
    )
    ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 288
------------------------------------------------------------


#test success = 3
#test failure = 94
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 40
#external test execution cache hits = 0
