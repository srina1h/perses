=====================Reduction starts.======================

The initial program size is 38
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
treeDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: customized_tree_diff_node_reducer

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=289,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=284,slot_type=declarationSpecifiers}
        |       |___Token:int {id=288,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=266,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=283,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=268,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=270,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=271,slot_type=LeftParen}
        |           |___(+) {id=277,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
        |           |   |___Token:void {id=282,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
        |           |___Token:) {id=273,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=230,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=231,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=265,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=232,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=235,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=261,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=237,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=238,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=239,slot_type=Assign}
            |       |   |               |___Token:1 {id=258,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=233,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=193,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=194,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=228,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=195,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=198,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=224,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=200,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=201,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=202,slot_type=Assign}
            |       |   |               |___Token:2 {id=221,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=196,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=156,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=157,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=191,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=158,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=161,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=187,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=163,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=164,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=165,slot_type=Assign}
            |       |   |               |___Token:3 {id=184,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=159,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=119,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=120,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=154,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=121,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=124,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:d {id=150,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=126,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=127,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=128,slot_type=Assign}
            |       |   |               |___Token:4 {id=147,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=122,slot_type=Semi}
            |       |___expressionStatement {id=49,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=50,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=68,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:printf {id=117,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=70,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=72,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=73,slot_type=LeftParen}
            |       |   |               |___(?) {id=74,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=76,slot_type=expression}
            |       |   |               |       |___(+) {id=115,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=116,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=78,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=79,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=80,slot_type=Comma}
            |       |   |               |               |___Token:a {id=98,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=75,slot_type=RightParen}
            |       |   |___Token:; {id=51,slot_type=Semi}
            |       |___jumpStatement {id=22,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=25,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=26,slot_type=Return}
            |           |   |___(?) {id=27,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=46,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=24,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 119, size=38=================

The current best program is the following

    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        int d = 4;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        b++;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        b++;
        printf("%d", c);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        b++;
        printf("%d", c);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                 ;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 119 from 38 to 33
------------------------------------------------------------


=================Reducing node 98, size=33==================

The current best program is the following

    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        b++;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 98
------------------------------------------------------------


#test success = 1
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 1
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 36
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
treeDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: customized_tree_diff_node_reducer

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=279,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=274,slot_type=declarationSpecifiers}
        |       |___Token:int {id=278,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=256,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=273,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=258,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=260,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=261,slot_type=LeftParen}
        |           |___(+) {id=267,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
        |           |   |___Token:void {id=272,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
        |           |___Token:) {id=263,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=220,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=221,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=255,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=222,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=225,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=251,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=227,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=228,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=229,slot_type=Assign}
            |       |   |               |___Token:1 {id=248,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=223,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=183,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=184,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=218,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=185,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=188,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=214,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=190,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=191,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=192,slot_type=Assign}
            |       |   |               |___Token:2 {id=211,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=186,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=146,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=147,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=181,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=148,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=151,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=177,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=153,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=154,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=155,slot_type=Assign}
            |       |   |               |___Token:3 {id=174,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=149,slot_type=Semi}
            |       |___expressionStatement {id=120,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=121,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=139,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:b {id=144,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=141,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___Token:++ {id=143,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |___Token:; {id=122,slot_type=Semi}
            |       |___expressionStatement {id=49,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=50,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=68,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:printf {id=117,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=70,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=72,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=73,slot_type=LeftParen}
            |       |   |               |___(?) {id=74,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=76,slot_type=expression}
            |       |   |               |       |___(+) {id=115,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=116,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=78,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=79,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=80,slot_type=Comma}
            |       |   |               |               |___Token:c {id=98,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=75,slot_type=RightParen}
            |       |   |___Token:; {id=51,slot_type=Semi}
            |       |___jumpStatement {id=22,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=25,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=26,slot_type=Return}
            |           |   |___(?) {id=27,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=46,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=24,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 120, size=36=================

The current best program is the following

    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        b++;
        printf("%d", c);
        return 0;
    }
    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
           ;
        printf("%d", c);
        return 0;
    }
    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
           ;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 120 from 36 to 33
------------------------------------------------------------


=================Reducing node 98, size=33==================

The current best program is the following

    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 98
------------------------------------------------------------


#test success = 2
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 2
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 1
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
listDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "seed.c"

Current diff:
    <a, c>

------------------------------------------------------------


=======Fixpoint iteration 1. Reducer: ListDiffSlicer========

The spar-tree is the following.
Current diff:
    <a, c>
------------------------------------------------------------


========Fixpoint iteration 2. Reducer: ListDiffDdmin========

The spar-tree is the following.
Current diff:
    <a, c>
------------------------------------------------------------


Current diff:
    <a, c>

#test success = 0
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 1
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "variant.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
listDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "variant.c"

Current diff:
    <c, a>

------------------------------------------------------------


=======Fixpoint iteration 1. Reducer: ListDiffSlicer========

The spar-tree is the following.
Current diff:
    <c, a>
------------------------------------------------------------


========Fixpoint iteration 2. Reducer: ListDiffDdmin========

The spar-tree is the following.
Current diff:
    <c, a>
------------------------------------------------------------


Current diff:
    <c, a>

#test success = 0
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 33
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
seedInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=251,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=246,slot_type=declarationSpecifiers}
        |       |___Token:int {id=250,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=228,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=245,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=230,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=232,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=233,slot_type=LeftParen}
        |           |___(+) {id=239,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
        |           |   |___Token:void {id=244,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
        |           |___Token:) {id=235,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=192,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=193,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=227,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=194,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=197,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=223,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=199,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=200,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=201,slot_type=Assign}
            |       |   |               |___Token:1 {id=220,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=195,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=155,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=156,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=190,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=157,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=160,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=186,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=162,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=163,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=164,slot_type=Assign}
            |       |   |               |___Token:2 {id=183,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=158,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=118,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=119,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=153,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=120,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=123,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=149,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=125,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=126,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=127,slot_type=Assign}
            |       |   |               |___Token:3 {id=146,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=121,slot_type=Semi}
            |       |___expressionStatement {id=48,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=49,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=67,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:printf {id=116,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=69,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=71,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=72,slot_type=LeftParen}
            |       |   |               |___(?) {id=73,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=75,slot_type=expression}
            |       |   |               |       |___(+) {id=114,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=115,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=77,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=78,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=79,slot_type=Comma}
            |       |   |               |               |___Token:a {id=97,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=74,slot_type=RightParen}
            |       |   |___Token:; {id=50,slot_type=Semi}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=45,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=33==================

The current best program is the following

    --file: seed.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    #include <stdio.h>
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: seed.c--
    #include <stdio.h>
    --file: variant.c--
    #include <stdio.h>
                     c
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: seed.c--
    --file: variant.c--
                     c
    --file: <formatted tokenized program in its original format>--
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 2 from 33 to 32
------------------------------------------------------------


==================Reducing node 5, size=32==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                 ;
    --file: variant.c--
                 ;
                     c
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                 ;
    --file: variant.c--
                 ;
                     c
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                 ;
    --file: variant.c--
                 ;
                     c
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                       ;
    --file: variant.c--
                     c ;
    --file: <formatted tokenized program in its original format>--
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                ;
    --file: variant.c--
                     c
                ;
    --file: <formatted tokenized program in its original format>--
                ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
        int a = 1;
    --file: variant.c--
        int a = 1;
                     c
    --file: <formatted tokenized program in its original format>--
        int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
        int b = 2;
    --file: variant.c--
        int b = 2;
                     c
    --file: <formatted tokenized program in its original format>--
        int b = 2;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
        int c = 3;
    --file: variant.c--
        int c = 3;
                     c
    --file: <formatted tokenized program in its original format>--
        int c = 3;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=32==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=32==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: seed.c--
    int main(void)
    {
    }
    --file: variant.c--
    int main(void)
    {
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=32==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
        return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: seed.c--
    int main(void)
    {
        int a = 1;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: seed.c--
    int main(void)
    {
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        printf("%d", c);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.c--
    int main(void)
    {
        int c = 3;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int c = 3;
        printf("%d", c);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int c = 3;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", a);
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", c);
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", a);
        return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        return 0;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                     c
        return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        return 0;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 17
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.c--
    int main(void)
    {
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int b = 2;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int b = 2;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int b = 2;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int b = 2;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 5
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(void)
    {
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 13 from 32 to 24
------------------------------------------------------------


=================Reducing node 48, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
                     c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 49, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
                     c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 67, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=67}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf       c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
               "%d"  c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
               "%d", a ;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
               "%d", c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
               "%d", a ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 192, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=192}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
                 ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
                 ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
                 ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 192
------------------------------------------------------------


=================Reducing node 118, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
                 ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
                 ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 118
------------------------------------------------------------


=================Reducing node 69, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf       c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 71, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=71}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 228, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 228
------------------------------------------------------------


=================Reducing node 230, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 230
------------------------------------------------------------


=================Reducing node 232, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=232}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 232
------------------------------------------------------------


=================Reducing node 194, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.c--
    int main(void)
    {
        int      ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int      ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int      ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 197, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=197}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 197
------------------------------------------------------------


=================Reducing node 120, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int      ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int      ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int      ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 120
------------------------------------------------------------


=================Reducing node 123, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=123}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 123
------------------------------------------------------------


=================Reducing node 73, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 75, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=75}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"  c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"  c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 75
------------------------------------------------------------


=================Reducing node 199, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.c--
    int main(void)
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 199
------------------------------------------------------------


=================Reducing node 200, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=200}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 200
------------------------------------------------------------


=================Reducing node 125, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 125
------------------------------------------------------------


=================Reducing node 126, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=126}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 126
------------------------------------------------------------


=================Reducing node 77, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"  c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 77
------------------------------------------------------------


=================Reducing node 78, size=24==================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=78}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 78
------------------------------------------------------------


=================Reducing node 245, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 245
------------------------------------------------------------


=================Reducing node 239, size=24=================

The current best program is the following

    --file: seed.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(void)
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 25
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 239 from 24 to 23
------------------------------------------------------------


=================Reducing node 235, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 235
------------------------------------------------------------


=================Reducing node 233, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 233
------------------------------------------------------------


=================Reducing node 223, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 223
------------------------------------------------------------


=================Reducing node 220, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 220
------------------------------------------------------------


=================Reducing node 201, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 201
------------------------------------------------------------


=================Reducing node 195, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 195
------------------------------------------------------------


=================Reducing node 193, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 227, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 227
------------------------------------------------------------


=================Reducing node 149, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 149
------------------------------------------------------------


=================Reducing node 146, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 146
------------------------------------------------------------


=================Reducing node 127, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 127
------------------------------------------------------------


=================Reducing node 121, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 121
------------------------------------------------------------


=================Reducing node 119, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 119
------------------------------------------------------------


=================Reducing node 153, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 153
------------------------------------------------------------


=================Reducing node 116, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 114, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 114
------------------------------------------------------------


=================Reducing node 115, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 115
------------------------------------------------------------


=================Reducing node 97, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 79, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 79
------------------------------------------------------------


=================Reducing node 74, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 72, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 50, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 11, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: seed.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 246, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=246}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 246
------------------------------------------------------------


=================Reducing node 250, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 250
------------------------------------------------------------


#test success = 4
#test failure = 46
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 13
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 23
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  sourceFile: "variant.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
seedInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  sourceFile: "variant.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=170,slot_type=declarationSpecifiers}
        |       |___Token:int {id=174,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=161,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=169,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=163,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=165,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=166,slot_type=LeftParen}
        |           |___Token:) {id=168,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=125,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=126,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=160,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=127,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=130,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=156,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=132,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=133,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=134,slot_type=Assign}
            |       |   |               |___Token:1 {id=153,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=128,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=88,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=89,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=123,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=90,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=93,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=119,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=95,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=96,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=97,slot_type=Assign}
            |       |   |               |___Token:3 {id=116,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=91,slot_type=Semi}
            |       |___expressionStatement {id=18,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=19,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=37,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=86,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=39,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=41,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=42,slot_type=LeftParen}
            |           |               |___(?) {id=43,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=45,slot_type=expression}
            |           |               |       |___(+) {id=84,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=85,slot_type=StringLiteral}
            |           |               |       |___(*) {id=47,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=48,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=49,slot_type=Comma}
            |           |               |               |___Token:c {id=67,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=44,slot_type=RightParen}
            |           |___Token:; {id=20,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 4, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
                 ;
    --file: seed.c--
                 ;
                     a
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
                 ;
    --file: seed.c--
                 ;
                     a
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
                       ;
    --file: seed.c--
                     a ;
    --file: <formatted tokenized program in its original format>--
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
        int a = 1;
    --file: seed.c--
        int a = 1;
                     a
    --file: <formatted tokenized program in its original format>--
        int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
        int c = 3;
    --file: seed.c--
        int c = 3;
                     a
    --file: <formatted tokenized program in its original format>--
        int c = 3;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4
------------------------------------------------------------


==================Reducing node 7, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


==================Reducing node 9, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: variant.c--
    int main(    )
    {
    }
    --file: seed.c--
    int main(    )
    {
                     a
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 12, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=12}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: variant.c--
    int main(    )
    {
        int a = 1;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
                     a
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: variant.c--
    int main(    )
    {
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     a
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: variant.c--
    int main(    )
    {
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 18, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=18}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18
------------------------------------------------------------


=================Reducing node 19, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 37, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=37}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf       a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"  a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", c ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", c ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 37
------------------------------------------------------------


=================Reducing node 125, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=125}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 125
------------------------------------------------------------


=================Reducing node 88, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=88}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 88
------------------------------------------------------------


=================Reducing node 39, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf       a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 39
------------------------------------------------------------


=================Reducing node 41, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=41}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 41
------------------------------------------------------------


=================Reducing node 161, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 127, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 127
------------------------------------------------------------


=================Reducing node 130, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=130}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 130
------------------------------------------------------------


=================Reducing node 90, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 90
------------------------------------------------------------


=================Reducing node 93, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=93}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 93
------------------------------------------------------------


=================Reducing node 43, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 43
------------------------------------------------------------


=================Reducing node 45, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=45}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 163, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 163
------------------------------------------------------------


=================Reducing node 165, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=165}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 132, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 132
------------------------------------------------------------


=================Reducing node 133, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=133}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 133
------------------------------------------------------------


=================Reducing node 95, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 95
------------------------------------------------------------


=================Reducing node 96, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=96}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 96
------------------------------------------------------------


=================Reducing node 47, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 47
------------------------------------------------------------


=================Reducing node 48, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=48}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 169, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 169
------------------------------------------------------------


=================Reducing node 168, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 168
------------------------------------------------------------


=================Reducing node 166, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 166
------------------------------------------------------------


=================Reducing node 156, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 153, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 153
------------------------------------------------------------


=================Reducing node 134, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 134
------------------------------------------------------------


=================Reducing node 128, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 128
------------------------------------------------------------


=================Reducing node 126, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 126
------------------------------------------------------------


=================Reducing node 160, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 119, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 119
------------------------------------------------------------


=================Reducing node 116, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 97, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 91, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 91
------------------------------------------------------------


=================Reducing node 89, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 89
------------------------------------------------------------


=================Reducing node 123, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 123
------------------------------------------------------------


=================Reducing node 86, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 86
------------------------------------------------------------


=================Reducing node 84, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 84
------------------------------------------------------------


=================Reducing node 85, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 85
------------------------------------------------------------


=================Reducing node 67, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 49, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 44, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 44
------------------------------------------------------------


=================Reducing node 42, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 42
------------------------------------------------------------


=================Reducing node 20, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20
------------------------------------------------------------


=================Reducing node 10, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 8, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


==================Reducing node 5, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: variant.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


=================Reducing node 170, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=170}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 174, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 174
------------------------------------------------------------


#test success = 0
#test failure = 33
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 14
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 23
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
treeDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: customized_tree_diff_node_reducer

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=170,slot_type=declarationSpecifiers}
        |       |___Token:int {id=174,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=161,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=169,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=163,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=165,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=166,slot_type=LeftParen}
        |           |___Token:) {id=168,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=125,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=126,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=160,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=127,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=130,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=156,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=132,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=133,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=134,slot_type=Assign}
            |       |   |               |___Token:1 {id=153,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=128,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=88,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=89,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=123,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=90,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=93,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=119,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=95,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=96,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=97,slot_type=Assign}
            |       |   |               |___Token:3 {id=116,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=91,slot_type=Semi}
            |       |___expressionStatement {id=18,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=19,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=37,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=86,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=39,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=41,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=42,slot_type=LeftParen}
            |           |               |___(?) {id=43,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=45,slot_type=expression}
            |           |               |       |___(+) {id=84,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=85,slot_type=StringLiteral}
            |           |               |       |___(*) {id=47,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=48,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=49,slot_type=Comma}
            |           |               |               |___Token:a {id=67,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=44,slot_type=RightParen}
            |           |___Token:; {id=20,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 67, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


#test success = 0
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 23
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
treeDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: customized_tree_diff_node_reducer

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=170,slot_type=declarationSpecifiers}
        |       |___Token:int {id=174,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=161,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=169,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=163,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=165,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=166,slot_type=LeftParen}
        |           |___Token:) {id=168,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=125,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=126,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=160,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=127,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=130,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=156,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=132,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=133,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=134,slot_type=Assign}
            |       |   |               |___Token:1 {id=153,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=128,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=88,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=89,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=123,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=90,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=93,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=119,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=95,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=96,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=97,slot_type=Assign}
            |       |   |               |___Token:3 {id=116,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=91,slot_type=Semi}
            |       |___expressionStatement {id=18,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=19,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=37,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=86,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=39,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=41,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=42,slot_type=LeftParen}
            |           |               |___(?) {id=43,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=45,slot_type=expression}
            |           |               |       |___(+) {id=84,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=85,slot_type=StringLiteral}
            |           |               |       |___(*) {id=47,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=48,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=49,slot_type=Comma}
            |           |               |               |___Token:c {id=67,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=44,slot_type=RightParen}
            |           |___Token:; {id=20,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 67, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


#test success = 0
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 1
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
listDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "seed.c"

Current diff:
    <a, c>

------------------------------------------------------------


=======Fixpoint iteration 1. Reducer: ListDiffSlicer========

The spar-tree is the following.
Current diff:
    <a, c>
------------------------------------------------------------


========Fixpoint iteration 2. Reducer: ListDiffDdmin========

The spar-tree is the following.
Current diff:
    <a, c>
------------------------------------------------------------


Current diff:
    <a, c>

#test success = 0
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 1
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "variant.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
listDiffInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  enableDiffSlicer: true
  enableDiffDdmin: true
  sourceFile: "variant.c"

Current diff:
    <c, a>

------------------------------------------------------------


=======Fixpoint iteration 1. Reducer: ListDiffSlicer========

The spar-tree is the following.
Current diff:
    <c, a>
------------------------------------------------------------


========Fixpoint iteration 2. Reducer: ListDiffDdmin========

The spar-tree is the following.
Current diff:
    <c, a>
------------------------------------------------------------


Current diff:
    <c, a>

#test success = 0
#test failure = 0
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 23
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
seedInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "seed.c"
  deps: []
  variantFile: "variant.c"
  sourceFile: "seed.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=170,slot_type=declarationSpecifiers}
        |       |___Token:int {id=174,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=161,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=169,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=163,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=165,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=166,slot_type=LeftParen}
        |           |___Token:) {id=168,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=125,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=126,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=160,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=127,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=130,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=156,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=132,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=133,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=134,slot_type=Assign}
            |       |   |               |___Token:1 {id=153,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=128,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=88,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=89,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=123,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=90,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=93,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=119,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=95,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=96,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=97,slot_type=Assign}
            |       |   |               |___Token:3 {id=116,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=91,slot_type=Semi}
            |       |___expressionStatement {id=18,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=19,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=37,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=86,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=39,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=41,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=42,slot_type=LeftParen}
            |           |               |___(?) {id=43,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=45,slot_type=expression}
            |           |               |       |___(+) {id=84,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=85,slot_type=StringLiteral}
            |           |               |       |___(*) {id=47,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=48,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=49,slot_type=Comma}
            |           |               |               |___Token:a {id=67,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=44,slot_type=RightParen}
            |           |___Token:; {id=20,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 4, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                 ;
    --file: variant.c--
                 ;
                     c
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                 ;
    --file: variant.c--
                 ;
                     c
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
                       ;
    --file: variant.c--
                     c ;
    --file: <formatted tokenized program in its original format>--
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
        int a = 1;
    --file: variant.c--
        int a = 1;
                     c
    --file: <formatted tokenized program in its original format>--
        int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
        int c = 3;
    --file: variant.c--
        int c = 3;
                     c
    --file: <formatted tokenized program in its original format>--
        int c = 3;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4
------------------------------------------------------------


==================Reducing node 7, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


==================Reducing node 9, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: seed.c--
    int main(    )
    {
    }
    --file: variant.c--
    int main(    )
    {
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 12, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=12}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: seed.c--
    int main(    )
    {
        int a = 1;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: seed.c--
    int main(    )
    {
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     c
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(    )
    {
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 18, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=18}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18
------------------------------------------------------------


=================Reducing node 19, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 37, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=37}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf       c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"  c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", a ;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", a ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 37
------------------------------------------------------------


=================Reducing node 125, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=125}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 125
------------------------------------------------------------


=================Reducing node 88, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=88}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 88
------------------------------------------------------------


=================Reducing node 39, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf       c ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 39
------------------------------------------------------------


=================Reducing node 41, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=41}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 41
------------------------------------------------------------


=================Reducing node 161, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 127, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.c--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 127
------------------------------------------------------------


=================Reducing node 130, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=130}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 130
------------------------------------------------------------


=================Reducing node 90, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 90
------------------------------------------------------------


=================Reducing node 93, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=93}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 93
------------------------------------------------------------


=================Reducing node 43, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 43
------------------------------------------------------------


=================Reducing node 45, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=45}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 163, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 163
------------------------------------------------------------


=================Reducing node 165, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=165}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 132, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 132
------------------------------------------------------------


=================Reducing node 133, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=133}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 133
------------------------------------------------------------


=================Reducing node 95, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 95
------------------------------------------------------------


=================Reducing node 96, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=96}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 96
------------------------------------------------------------


=================Reducing node 47, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  c);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 47
------------------------------------------------------------


=================Reducing node 48, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=48}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 169, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 169
------------------------------------------------------------


=================Reducing node 168, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 168
------------------------------------------------------------


=================Reducing node 166, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 166
------------------------------------------------------------


=================Reducing node 156, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 153, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 153
------------------------------------------------------------


=================Reducing node 134, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 134
------------------------------------------------------------


=================Reducing node 128, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 128
------------------------------------------------------------


=================Reducing node 126, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 126
------------------------------------------------------------


=================Reducing node 160, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 119, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 119
------------------------------------------------------------


=================Reducing node 116, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 97, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 91, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 91
------------------------------------------------------------


=================Reducing node 89, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 89
------------------------------------------------------------


=================Reducing node 123, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 123
------------------------------------------------------------


=================Reducing node 86, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 86
------------------------------------------------------------


=================Reducing node 84, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 84
------------------------------------------------------------


=================Reducing node 85, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 85
------------------------------------------------------------


=================Reducing node 67, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 49, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 44, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 44
------------------------------------------------------------


=================Reducing node 42, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 42
------------------------------------------------------------


=================Reducing node 20, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20
------------------------------------------------------------


=================Reducing node 10, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 8, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


==================Reducing node 5, size=23==================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: seed.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: <formatted tokenized program in its original format>--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


=================Reducing node 170, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=170}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 174, size=23=================

The current best program is the following

    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 174
------------------------------------------------------------


#test success = 0
#test failure = 33
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 14
#external test execution cache hits = 0
=====================Reduction starts.======================

The initial program size is 23
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  sourceFile: "variant.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_ppr_reduction_golden_test_all_reducers_mirror_perses_node_priority_with_dfs_delta_seed.c_variant.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: false
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: false
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "PERSES_VARIANT_OF_PRISTINE"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "all_reducers_mirror_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
seedInputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "variant.c"
  deps: []
  variantFile: "seed.c"
  sourceFile: "variant.c"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___functionDefinition {id=4,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=5,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=170,slot_type=declarationSpecifiers}
        |       |___Token:int {id=174,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=161,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=169,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=163,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=165,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=166,slot_type=LeftParen}
        |           |___Token:) {id=168,slot_type=RightParen}
        |___compoundStatement {id=7,slot_type=compoundStatement}
            |___Token:{ {id=8,slot_type=LeftBrace}
            |___(?) {id=9,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=12,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=125,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=126,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=160,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=127,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=130,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=156,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=132,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=133,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=134,slot_type=Assign}
            |       |   |               |___Token:1 {id=153,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=128,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=88,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=89,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=123,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=90,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=93,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:c {id=119,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=95,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=96,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=97,slot_type=Assign}
            |       |   |               |___Token:3 {id=116,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=91,slot_type=Semi}
            |       |___expressionStatement {id=18,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=19,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=37,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=86,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=39,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=41,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=42,slot_type=LeftParen}
            |           |               |___(?) {id=43,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=45,slot_type=expression}
            |           |               |       |___(+) {id=84,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=85,slot_type=StringLiteral}
            |           |               |       |___(*) {id=47,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=48,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=49,slot_type=Comma}
            |           |               |               |___Token:c {id=67,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=44,slot_type=RightParen}
            |           |___Token:; {id=20,slot_type=Semi}
            |___Token:} {id=10,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 4, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
                 ;
    --file: seed.c--
                 ;
                     a
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
                 ;
    --file: seed.c--
                 ;
                     a
    --file: <formatted tokenized program in its original format>--
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
                       ;
    --file: seed.c--
                     a ;
    --file: <formatted tokenized program in its original format>--
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
        int a = 1;
    --file: seed.c--
        int a = 1;
                     a
    --file: <formatted tokenized program in its original format>--
        int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
        int c = 3;
    --file: seed.c--
        int c = 3;
                     a
    --file: <formatted tokenized program in its original format>--
        int c = 3;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4
------------------------------------------------------------


==================Reducing node 7, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


==================Reducing node 9, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: variant.c--
    int main(    )
    {
    }
    --file: seed.c--
    int main(    )
    {
                     a
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 12, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=12}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: variant.c--
    int main(    )
    {
        int a = 1;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
                     a
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: variant.c--
    int main(    )
    {
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     a
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: variant.c--
    int main(    )
    {
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 18, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=18}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 18
------------------------------------------------------------


=================Reducing node 19, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
                     a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
                       ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 37, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=37}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf       a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"  a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", c ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
               "%d", c ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 37
------------------------------------------------------------


=================Reducing node 125, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=125}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
                 ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 125
------------------------------------------------------------


=================Reducing node 88, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=88}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
                 ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 88
------------------------------------------------------------


=================Reducing node 39, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf       a ;
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 39
------------------------------------------------------------


=================Reducing node 41, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=41}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 41
------------------------------------------------------------


=================Reducing node 161, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 127, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int      ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 127
------------------------------------------------------------


=================Reducing node 130, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=130}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 130
------------------------------------------------------------


=================Reducing node 90, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int      ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 90
------------------------------------------------------------


=================Reducing node 93, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=93}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 93
------------------------------------------------------------


=================Reducing node 43, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 43
------------------------------------------------------------


=================Reducing node 45, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=45}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf(      c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 163, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: variant.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 163
------------------------------------------------------------


=================Reducing node 165, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=165}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 132, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a    ;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 132
------------------------------------------------------------


=================Reducing node 133, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=133}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 133
------------------------------------------------------------


=================Reducing node 95, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c    ;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 95
------------------------------------------------------------


=================Reducing node 96, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=96}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 96
------------------------------------------------------------


=================Reducing node 47, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"  a);
    }
    --file: <formatted tokenized program in its original format>--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 47
------------------------------------------------------------


=================Reducing node 48, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=48}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 169, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 169
------------------------------------------------------------


=================Reducing node 168, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 168
------------------------------------------------------------


=================Reducing node 166, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 166
------------------------------------------------------------


=================Reducing node 156, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 153, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 153
------------------------------------------------------------


=================Reducing node 134, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 134
------------------------------------------------------------


=================Reducing node 128, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 128
------------------------------------------------------------


=================Reducing node 126, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 126
------------------------------------------------------------


=================Reducing node 160, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 119, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 119
------------------------------------------------------------


=================Reducing node 116, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 116
------------------------------------------------------------


=================Reducing node 97, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 91, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 91
------------------------------------------------------------


=================Reducing node 89, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 89
------------------------------------------------------------


=================Reducing node 123, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 123
------------------------------------------------------------


=================Reducing node 86, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 86
------------------------------------------------------------


=================Reducing node 84, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 84
------------------------------------------------------------


=================Reducing node 85, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 85
------------------------------------------------------------


=================Reducing node 67, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 49, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 44, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 44
------------------------------------------------------------


=================Reducing node 42, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 42
------------------------------------------------------------


=================Reducing node 20, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20
------------------------------------------------------------


=================Reducing node 10, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 8, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


==================Reducing node 5, size=23==================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: variant.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
        main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


=================Reducing node 170, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=170}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 174, size=23=================

The current best program is the following

    --file: variant.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", c);
    }
    --file: seed.c--
    int main(    )
    {
        int a = 1;
        int c = 3;
        printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 174
------------------------------------------------------------


#test success = 0
#test failure = 33
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 14
#external test execution cache hits = 0
