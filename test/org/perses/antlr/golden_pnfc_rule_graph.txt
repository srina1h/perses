abstractDeclarator -> [aux_rule__abstractDeclarator_3, pointer]
additiveExpression -> [kleene_star__additiveExpression_1, multiplicativeExpression]
alignmentSpecifier -> [altnt_block__alignmentSpecifier_1]
altnt_block__additiveExpression_3 -> []
altnt_block__alignmentSpecifier_1 -> [constantExpression, typeName]
altnt_block__conditionalExpression_3 -> [aux_rule__conditionalExpression_4]
altnt_block__directAbstractDeclarator_15 -> [aux_rule__directAbstractDeclarator_25, aux_rule__directAbstractDeclarator_26]
altnt_block__directAbstractDeclarator_17 -> [altnt_block__directAbstractDeclarator_20, kleene_star__declarator_2]
altnt_block__directAbstractDeclarator_20 -> [abstractDeclarator, optional__directAbstractDeclarator_5]
altnt_block__directDeclarator_10 -> [aux_rule__directDeclarator_17, aux_rule__directDeclarator_18]
altnt_block__directDeclarator_11 -> [optional__directDeclarator_6, parameterTypeList]
altnt_block__directDeclarator_12 -> [aux_rule__directDeclarator_19, aux_rule__directDeclarator_20]
altnt_block__directDeclarator_13 -> [optional__directDeclarator_3]
altnt_block__enumSpecifier_3 -> [aux_rule__enumSpecifier_6]
altnt_block__enumSpecifier_4 -> [enumeratorList, optional__postfixExpression_5, optional__structOrUnionSpecifier_1]
altnt_block__equalityExpression_3 -> []
altnt_block__genericAssociation_1 -> [typeName]
altnt_block__iterationStatement_7 -> [altnt_block__iterationStatement_8, optional__postfixExpression_1]
altnt_block__iterationStatement_8 -> [aux_rule__iterationStatement_9, declaration]
altnt_block__jumpStatement_2 -> [aux_rule__jumpStatement_4, aux_rule__jumpStatement_5]
altnt_block__jumpStatement_3 -> [unaryExpression]
altnt_block__labeledStatement_1 -> [aux_rule__labeledStatement_2]
altnt_block__multiplicativeExpression_3 -> []
altnt_block__parameterDeclaration_2 -> [declarator, optional__typeName_1]
altnt_block__pointer_9 -> []
altnt_block__postfixExpression_7 -> []
altnt_block__postfixExpression_8 -> [initializerList, optional__postfixExpression_5, optional__primaryExpression_2, typeName]
altnt_block__primaryExpression_3 -> [aux_rule__primaryExpression_4, aux_rule__primaryExpression_5, aux_rule__primaryExpression_6, aux_rule__primaryExpression_7]
altnt_block__relationalExpression_3 -> []
altnt_block__shiftExpression_3 -> []
altnt_block__specifierQualifierList_3 -> [typeQualifier, typeSpecifierWithAttrList]
altnt_block__statement_4 -> [aux_rule__statement_8, aux_rule__statement_9]
altnt_block__statement_5 -> []
altnt_block__structOrUnionSpecifier_2 -> [aux_rule__structOrUnionSpecifier_3]
altnt_block__typeSpecifier_1 -> [aux_rule__typeSpecifier_4, aux_rule__typeSpecifier_5]
altnt_block__typeSpecifier_2 -> []
altnt_block__unaryExpression_4 -> [aux_rule__unaryExpression_10, aux_rule__unaryExpression_11]
altnt_block__unaryExpression_5 -> []
altnt_block__unaryExpression_6 -> [typeName, unaryExpression]
andExpression -> [equalityExpression, kleene_star__andExpression_1]
asmKeyword -> []
asmStatement -> [asmKeyword, kleene_star__asmStatement_12, optional__asmStatement_2, optional__asmStatement_6]
assignmentExpression -> [conditionalExpression, kleene_star__assignmentExpression_1]
assignmentOperator -> []
atomicTypeSpecifier -> [typeName]
aux_rule__abstractDeclarator_3 -> [directAbstractDeclarator, kleene_star__declarator_2, optional__declarator_1]
aux_rule__additiveExpression_2 -> [altnt_block__additiveExpression_3, multiplicativeExpression]
aux_rule__andExpression_2 -> [equalityExpression]
aux_rule__asmStatement_1 -> []
aux_rule__asmStatement_11 -> [optional__asmStatement_6]
aux_rule__asmStatement_3 -> [logicalOrExpression]
aux_rule__asmStatement_5 -> [kleene_star__asmStatement_4, logicalOrExpression]
aux_rule__assignmentExpression_2 -> [assignmentOperator, unaryExpression]
aux_rule__blockItemList_2 -> [declaration, statement]
aux_rule__castExpression_2 -> [optional__primaryExpression_2, typeName]
aux_rule__conditionalExpression_1 -> [altnt_block__conditionalExpression_3, conditionalExpression]
aux_rule__conditionalExpression_4 -> [expression]
aux_rule__declarationList_2 -> [declaration]
aux_rule__declarationSpecifier_1 -> []
aux_rule__declaration_3 -> [declarationSpecifiers, optional__declaration_2, optional__primaryExpression_2]
aux_rule__designatorList_2 -> [aux_rule__designatorList_4, aux_rule__designatorList_5]
aux_rule__designatorList_4 -> [constantExpression]
aux_rule__designatorList_5 -> []
aux_rule__directAbstractDeclarator_13 -> [aux_rule__directAbstractDeclarator_21, aux_rule__directAbstractDeclarator_22]
aux_rule__directAbstractDeclarator_14 -> [aux_rule__directAbstractDeclarator_23, aux_rule__directAbstractDeclarator_24]
aux_rule__directAbstractDeclarator_21 -> [kleene_star__declarator_2, optional__directAbstractDeclarator_5]
aux_rule__directAbstractDeclarator_22 -> [altnt_block__directAbstractDeclarator_15]
aux_rule__directAbstractDeclarator_23 -> [altnt_block__directAbstractDeclarator_15]
aux_rule__directAbstractDeclarator_24 -> [altnt_block__directAbstractDeclarator_17]
aux_rule__directAbstractDeclarator_25 -> [optional__directDeclarator_3, optional__pointer_1]
aux_rule__directAbstractDeclarator_26 -> [altnt_block__directDeclarator_12, assignmentExpression]
aux_rule__directDeclarator_14 -> [altnt_block__directDeclarator_10]
aux_rule__directDeclarator_15 -> [altnt_block__directDeclarator_11]
aux_rule__directDeclarator_16 -> [declarator, optional__typeSpecifierWithAttrList_1]
aux_rule__directDeclarator_17 -> [altnt_block__directDeclarator_12, assignmentExpression]
aux_rule__directDeclarator_18 -> [altnt_block__directDeclarator_13, optional__pointer_1]
aux_rule__directDeclarator_19 -> [optional__pointer_1]
aux_rule__directDeclarator_20 -> [typeQualifierList]
aux_rule__directDeclarator_8 -> [aux_rule__directDeclarator_14, aux_rule__directDeclarator_15]
aux_rule__directDeclarator_9 -> [aux_rule__directDeclarator_16]
aux_rule__enumSpecifier_6 -> [altnt_block__enumSpecifier_4]
aux_rule__enumeratorList_2 -> [enumerator]
aux_rule__enumerator_1 -> [constantExpression]
aux_rule__equalityExpression_2 -> [altnt_block__equalityExpression_3, relationalExpression]
aux_rule__exclusiveOrExpression_2 -> [andExpression]
aux_rule__expression_2 -> [assignmentExpression]
aux_rule__gccAttributeList_1 -> [gccAttribute]
aux_rule__gccAttributeList_3 -> [gccAttribute, kleene_star__gccAttributeList_2]
aux_rule__gccAttribute_2 -> [optional__postfixExpression_1]
aux_rule__gccAttribute_4 -> [optional__gccAttribute_3]
aux_rule__gccDeclaratorExtension_2 -> [asmKeyword, kleene_plus__primaryExpression_1]
aux_rule__genericAssocList_2 -> [genericAssociation]
aux_rule__identifierList_2 -> []
aux_rule__inclusiveOrExpression_2 -> [exclusiveOrExpression]
aux_rule__initDeclaratorList_2 -> [initDeclarator]
aux_rule__initDeclarator_1 -> [initializer]
aux_rule__initializerList_4 -> [initializer, optional__initializerList_1]
aux_rule__initializer_2 -> [initializerList, optional__postfixExpression_5]
aux_rule__iterationStatement_9 -> [optional__postfixExpression_1]
aux_rule__jumpStatement_4 -> [optional__postfixExpression_1]
aux_rule__jumpStatement_5 -> [altnt_block__jumpStatement_3]
aux_rule__labeledStatement_2 -> [constantExpression]
aux_rule__logicalAndExpression_2 -> [inclusiveOrExpression]
aux_rule__logicalOrExpression_2 -> [logicalAndExpression]
aux_rule__multiplicativeExpression_2 -> [altnt_block__multiplicativeExpression_3, castExpression]
aux_rule__parameterList_2 -> [parameterDeclaration]
aux_rule__parameterTypeList_1 -> []
aux_rule__pointer_6 -> [altnt_block__pointer_9, optional__pointer_1]
aux_rule__postfixExpression_10 -> [expression]
aux_rule__postfixExpression_11 -> [optional__postfixExpression_1]
aux_rule__postfixExpression_12 -> [altnt_block__postfixExpression_7]
aux_rule__postfixExpression_13 -> [altnt_block__primaryExpression_3]
aux_rule__postfixExpression_14 -> [altnt_block__postfixExpression_8]
aux_rule__postfixExpression_3 -> [aux_rule__postfixExpression_10, aux_rule__postfixExpression_11, aux_rule__postfixExpression_12]
aux_rule__postfixExpression_4 -> [aux_rule__postfixExpression_13, aux_rule__postfixExpression_14, genericSelection, kleene_plus__primaryExpression_1]
aux_rule__primaryExpression_4 -> [expression]
aux_rule__primaryExpression_5 -> [compoundStatement, optional__primaryExpression_2]
aux_rule__primaryExpression_6 -> [typeName, unaryExpression]
aux_rule__primaryExpression_7 -> [typeName, unaryExpression]
aux_rule__relationalExpression_2 -> [altnt_block__relationalExpression_3, shiftExpression]
aux_rule__selectionStatement_1 -> [statement]
aux_rule__shiftExpression_2 -> [additiveExpression, altnt_block__shiftExpression_3]
aux_rule__statement_2 -> [altnt_block__statement_4]
aux_rule__statement_3 -> [asmStatement, aux_rule__statement_6, aux_rule__statement_7, compoundStatement, expressionStatement, jumpStatement, labeledStatement]
aux_rule__statement_6 -> [expression, optional__selectionStatement_2, statement]
aux_rule__statement_7 -> [expression, statement]
aux_rule__statement_8 -> [altnt_block__iterationStatement_7]
aux_rule__statement_9 -> [altnt_block__statement_5, expression]
aux_rule__structDeclarationList_2 -> [staticAssertDeclarationWithoutSemicolon, structDeclaration, structQualifierListWithStructDeclaratorListWithoutSemicolon]
aux_rule__structDeclaration_1 -> [structQualifierListWithStructDeclaratorListWithoutSemicolon]
aux_rule__structDeclaratorList_2 -> [structDeclarator]
aux_rule__structDeclarator_2 -> [constantExpression, optional__structDeclarator_1]
aux_rule__structOrUnionSpecifier_3 -> [optional__structOrUnionSpecifier_1, structDeclarationList]
aux_rule__translationUnit_2 -> [declaration, functionDefinition]
aux_rule__typeQualifierList_1 -> [gccAttributeSpecifier, typeQualifier]
aux_rule__typeSpecifier_3 -> [altnt_block__typeSpecifier_1]
aux_rule__typeSpecifier_4 -> [altnt_block__typeSpecifier_2]
aux_rule__typeSpecifier_5 -> [constantExpression]
aux_rule__unaryExpression_10 -> [typeName]
aux_rule__unaryExpression_11 -> [altnt_block__unaryExpression_5, altnt_block__unaryExpression_6]
aux_rule__unaryExpression_2 -> []
aux_rule__unaryExpression_3 -> [aux_rule__unaryExpression_7, aux_rule__unaryExpression_8, aux_rule__unaryExpression_9, postfixExpression]
aux_rule__unaryExpression_7 -> [castExpression, unaryOperator]
aux_rule__unaryExpression_8 -> []
aux_rule__unaryExpression_9 -> [altnt_block__unaryExpression_4]
blockItemList -> [kleene_plus__blockItemList_3]
castExpression -> [kleene_star__castExpression_1, unaryExpression]
compilationUnit -> [optional__compilationUnit_1]
compoundStatement -> [optional__compoundStatement_1]
conditionalExpression -> [logicalOrExpression, optional__conditionalExpression_2]
constantExpression -> [conditionalExpression]
declaration -> [asmStatement, aux_rule__declaration_3, staticAssertDeclaration]
declarationList -> [kleene_plus__declarationList_3]
declarationSpecifier -> [alignmentSpecifier, aux_rule__declarationSpecifier_1, gccAttributeSpecifier, typeQualifier, typeSpecifierWithAttrList]
declarationSpecifiers -> [declarationSpecifier]
declarator -> [directDeclarator, kleene_star__declarator_2, optional__declarator_1]
designation -> [designatorList]
designatorList -> [kleene_plus__designatorList_3]
directAbstractDeclarator -> [aux_rule__directAbstractDeclarator_14, kleene_star__directAbstractDeclarator_12]
directDeclarator -> [aux_rule__directDeclarator_9, kleene_star__directDeclarator_7]
enumSpecifier -> [altnt_block__enumSpecifier_3]
enumerator -> [optional__enumerator_2, typedefName]
enumeratorList -> [enumerator, kleene_star__enumeratorList_1]
equalityExpression -> [kleene_star__equalityExpression_1, relationalExpression]
exclusiveOrExpression -> [andExpression, kleene_star__exclusiveOrExpression_1]
expression -> [assignmentExpression, kleene_star__expression_1]
expressionStatement -> [optional__postfixExpression_1]
functionDefinition -> [compoundStatement, declarator, optional__functionDefinition_2, optional__functionDefinition_3, optional__primaryExpression_2]
gccAttribute -> [aux_rule__gccAttribute_4]
gccAttributeList -> [aux_rule__gccAttributeList_3]
gccAttributeSpecifier -> [gccAttributeList]
gccDeclaratorExtension -> [aux_rule__gccDeclaratorExtension_2, gccAttributeSpecifier]
genericAssocList -> [genericAssociation, kleene_star__genericAssocList_1]
genericAssociation -> [altnt_block__genericAssociation_1, assignmentExpression]
genericSelection -> [assignmentExpression, genericAssocList]
identifierList -> [kleene_star__identifierList_1]
inclusiveOrExpression -> [exclusiveOrExpression, kleene_star__inclusiveOrExpression_1]
initDeclarator -> [declarator, optional__initDeclarator_2]
initDeclaratorList -> [initDeclarator, kleene_star__initDeclaratorList_1]
initializer -> [assignmentExpression, aux_rule__initializer_2]
initializerList -> [initializer, kleene_star__initializerList_3, optional__initializerList_1]
jumpStatement -> [altnt_block__jumpStatement_2]
kleene_plus__blockItemList_3 -> [aux_rule__blockItemList_2]
kleene_plus__declarationList_3 -> [aux_rule__declarationList_2]
kleene_plus__designatorList_3 -> [aux_rule__designatorList_2]
kleene_plus__pointer_8 -> [aux_rule__pointer_6]
kleene_plus__primaryExpression_1 -> []
kleene_plus__translationUnit_3 -> [aux_rule__translationUnit_2]
kleene_star__additiveExpression_1 -> [aux_rule__additiveExpression_2]
kleene_star__andExpression_1 -> [aux_rule__andExpression_2]
kleene_star__asmStatement_12 -> [aux_rule__asmStatement_11]
kleene_star__asmStatement_4 -> [aux_rule__asmStatement_3]
kleene_star__assignmentExpression_1 -> [aux_rule__assignmentExpression_2]
kleene_star__castExpression_1 -> [aux_rule__castExpression_2]
kleene_star__declarator_2 -> [gccDeclaratorExtension]
kleene_star__directAbstractDeclarator_12 -> [aux_rule__directAbstractDeclarator_13]
kleene_star__directDeclarator_7 -> [aux_rule__directDeclarator_8]
kleene_star__enumeratorList_1 -> [aux_rule__enumeratorList_2]
kleene_star__equalityExpression_1 -> [aux_rule__equalityExpression_2]
kleene_star__exclusiveOrExpression_1 -> [aux_rule__exclusiveOrExpression_2]
kleene_star__expression_1 -> [aux_rule__expression_2]
kleene_star__gccAttributeList_2 -> [aux_rule__gccAttributeList_1]
kleene_star__genericAssocList_1 -> [aux_rule__genericAssocList_2]
kleene_star__identifierList_1 -> [aux_rule__identifierList_2]
kleene_star__inclusiveOrExpression_1 -> [aux_rule__inclusiveOrExpression_2]
kleene_star__initDeclaratorList_1 -> [aux_rule__initDeclaratorList_2]
kleene_star__initializerList_3 -> [aux_rule__initializerList_4]
kleene_star__logicalAndExpression_1 -> [aux_rule__logicalAndExpression_2]
kleene_star__logicalOrExpression_1 -> [aux_rule__logicalOrExpression_2]
kleene_star__multiplicativeExpression_1 -> [aux_rule__multiplicativeExpression_2]
kleene_star__parameterList_1 -> [aux_rule__parameterList_2]
kleene_star__postfixExpression_2 -> [aux_rule__postfixExpression_3]
kleene_star__relationalExpression_1 -> [aux_rule__relationalExpression_2]
kleene_star__shiftExpression_1 -> [aux_rule__shiftExpression_2]
kleene_star__statement_1 -> [aux_rule__statement_2]
kleene_star__structDeclarationList_1 -> [structDeclaration]
kleene_star__structDeclaratorList_1 -> [aux_rule__structDeclaratorList_2]
kleene_star__unaryExpression_1 -> [aux_rule__unaryExpression_2]
labeledStatement -> [altnt_block__labeledStatement_1, statement]
logicalAndExpression -> [inclusiveOrExpression, kleene_star__logicalAndExpression_1]
logicalOrExpression -> [kleene_star__logicalOrExpression_1, logicalAndExpression]
multiplicativeExpression -> [castExpression, kleene_star__multiplicativeExpression_1]
optional__asmStatement_2 -> [aux_rule__asmStatement_1]
optional__asmStatement_6 -> [aux_rule__asmStatement_5]
optional__compilationUnit_1 -> [translationUnit]
optional__compoundStatement_1 -> [blockItemList]
optional__conditionalExpression_2 -> [aux_rule__conditionalExpression_1]
optional__declaration_2 -> [initDeclaratorList]
optional__declarator_1 -> [pointer]
optional__directAbstractDeclarator_5 -> [parameterTypeList]
optional__directDeclarator_3 -> [assignmentExpression]
optional__directDeclarator_6 -> [identifierList]
optional__enumerator_2 -> [aux_rule__enumerator_1]
optional__functionDefinition_2 -> [declarationSpecifiers]
optional__functionDefinition_3 -> [declarationList]
optional__gccAttribute_3 -> [aux_rule__gccAttribute_2]
optional__initDeclarator_2 -> [aux_rule__initDeclarator_1]
optional__initializerList_1 -> [designation]
optional__parameterTypeList_2 -> [aux_rule__parameterTypeList_1]
optional__pointer_1 -> [typeQualifierList]
optional__postfixExpression_1 -> [expression]
optional__postfixExpression_5 -> []
optional__primaryExpression_2 -> []
optional__selectionStatement_2 -> [aux_rule__selectionStatement_1]
optional__specifierQualifierList_1 -> [specifierQualifierList]
optional__structDeclarationList_3 -> [aux_rule__structDeclarationList_2]
optional__structDeclarator_1 -> [declarator]
optional__structOrUnionSpecifier_1 -> []
optional__structQualifierListWithStructDeclaratorListWithoutSemicolon_2 -> [structDeclaratorList]
optional__typeName_1 -> [abstractDeclarator]
optional__typeSpecifierWithAttrList_1 -> [gccAttributeSpecifier]
parameterDeclaration -> [altnt_block__parameterDeclaration_2, declarationSpecifiers]
parameterList -> [kleene_star__parameterList_1, parameterDeclaration]
parameterTypeList -> [optional__parameterTypeList_2, parameterList]
pointer -> [kleene_plus__pointer_8]
postfixExpression -> [aux_rule__postfixExpression_4, kleene_star__postfixExpression_2]
relationalExpression -> [kleene_star__relationalExpression_1, shiftExpression]
shiftExpression -> [additiveExpression, kleene_star__shiftExpression_1]
specifierQualifierList -> [altnt_block__specifierQualifierList_3, optional__specifierQualifierList_1]
statement -> [aux_rule__statement_3, kleene_star__statement_1]
staticAssertDeclaration -> [staticAssertDeclarationWithoutSemicolon]
staticAssertDeclarationWithoutSemicolon -> [constantExpression, kleene_plus__primaryExpression_1]
structDeclaration -> [aux_rule__structDeclaration_1, staticAssertDeclaration]
structDeclarationList -> [kleene_star__structDeclarationList_1, optional__structDeclarationList_3]
structDeclarator -> [aux_rule__structDeclarator_2, declarator]
structDeclaratorList -> [kleene_star__structDeclaratorList_1, structDeclarator]
structOrUnion -> []
structOrUnionSpecifier -> [altnt_block__structOrUnionSpecifier_2, structOrUnion]
structQualifierListWithStructDeclaratorListWithoutSemicolon -> [optional__primaryExpression_2, optional__structQualifierListWithStructDeclaratorListWithoutSemicolon_2, specifierQualifierList]
translationUnit -> [kleene_plus__translationUnit_3]
typeName -> [optional__typeName_1, specifierQualifierList]
typeQualifier -> []
typeQualifierList -> [aux_rule__typeQualifierList_1]
typeSpecifier -> [atomicTypeSpecifier, aux_rule__typeSpecifier_3, enumSpecifier, structOrUnionSpecifier, typedefName]
typeSpecifierWithAttrList -> [optional__typeSpecifierWithAttrList_1, typeSpecifier]
typedefName -> []
unaryExpression -> [aux_rule__unaryExpression_3, kleene_star__unaryExpression_1]
unaryOperator -> []
