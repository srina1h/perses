altnt_block__arguments_7 -> [aux_rule__arguments_8, expressionList]
altnt_block__channelType_1 -> [aux_rule__channelType_3, aux_rule__channelType_4]
altnt_block__commCase_1 -> [recvStmt, sendStmt]
altnt_block__constDecl_3 -> [aux_rule__constDecl_4, constSpec]
altnt_block__expression_3 -> []
altnt_block__fieldDecl_2 -> [anonymousField, aux_rule__fieldDecl_3]
altnt_block__ifStmt_5 -> [block, ifStmt]
altnt_block__importDecl_3 -> [aux_rule__importDecl_4, importSpec]
altnt_block__incDecStmt_1 -> []
altnt_block__slice_4 -> [altnt_block__slice_5, optional__exprSwitchStmt_3]
altnt_block__slice_5 -> [aux_rule__slice_6, optional__exprSwitchStmt_3]
altnt_block__sourceFile_5 -> [declaration, functionDecl, methodDecl]
altnt_block__typeDecl_3 -> [aux_rule__typeDecl_4, typeSpec]
altnt_block__typeList_3 -> [type_]
altnt_block__varDecl_3 -> [aux_rule__varDecl_4, varSpec]
altnt_block__varSpec_3 -> [aux_rule__varSpec_4, aux_rule__varSpec_5]
anonymousField -> [optional__anonymousField_1, typeName]
arguments -> [optional__arguments_6]
arrayType -> [elementType, expressionStmt]
assign_op -> [optional__assign_op_2]
assignment -> [assign_op, expressionList]
aux_rule__arguments_1 -> [expressionList]
aux_rule__arguments_5 -> [altnt_block__arguments_7, optional__conversion_1, optional__parameterDecl_2]
aux_rule__arguments_8 -> [optional__arguments_2, type_]
aux_rule__assign_op_1 -> []
aux_rule__channelType_3 -> []
aux_rule__channelType_4 -> [optional__channelType_2]
aux_rule__commCase_2 -> [altnt_block__commCase_1]
aux_rule__constDecl_1 -> [constSpec, eos]
aux_rule__constDecl_4 -> [kleene_star__constDecl_2]
aux_rule__constSpec_2 -> [expressionList, optional__constSpec_1]
aux_rule__elementList_1 -> [keyedElement]
aux_rule__eos_1 -> []
aux_rule__eos_2 -> []
aux_rule__exprSwitchCase_1 -> [expressionList]
aux_rule__expressionList_1 -> [expression]
aux_rule__expression_2 -> [altnt_block__expression_3, expression]
aux_rule__fieldDecl_3 -> [identifierList, type_]
aux_rule__forStmt_1 -> [expression, forClause, rangeClause]
aux_rule__identifierList_1 -> []
aux_rule__ifStmt_1 -> [simpleStmt]
aux_rule__ifStmt_3 -> [altnt_block__ifStmt_5]
aux_rule__importDecl_1 -> [eos, importSpec]
aux_rule__importDecl_4 -> [kleene_star__importDecl_2]
aux_rule__importSpec_1 -> []
aux_rule__interfaceType_1 -> [eos, methodSpec]
aux_rule__keyedElement_1 -> [key]
aux_rule__literalType_1 -> [elementType]
aux_rule__literalValue_2 -> [elementList, optional__conversion_1]
aux_rule__methodSpec_2 -> [optional__signature_1, parameters]
aux_rule__parameters_1 -> [parameterDecl]
aux_rule__parameters_4 -> [kleene_star__parameters_2, optional__parameters_3, parameterDecl]
aux_rule__primaryExpr_2 -> [arguments, aux_rule__primaryExpr_4, index, slice, typeAssertion]
aux_rule__primaryExpr_3 -> [aux_rule__primaryExpr_5, compositeLit, conversion, functionLit, methodExpr, string_, typeName]
aux_rule__primaryExpr_4 -> []
aux_rule__primaryExpr_5 -> [expression]
aux_rule__recvStmt_1 -> [aux_rule__recvStmt_3, aux_rule__recvStmt_4]
aux_rule__recvStmt_3 -> [expressionList]
aux_rule__recvStmt_4 -> [identifierList]
aux_rule__slice_6 -> [expression]
aux_rule__sourceFile_1 -> [eos, importDecl]
aux_rule__sourceFile_3 -> [altnt_block__sourceFile_5, eos]
aux_rule__sourceFile_6 -> [eos, kleene_star__sourceFile_2, kleene_star__sourceFile_4, packageClause]
aux_rule__statementList_1 -> [aux_rule__statementList_2]
aux_rule__statementList_2 -> [eos, realStatement]
aux_rule__structType_1 -> [eos, fieldDecl]
aux_rule__typeDecl_1 -> [eos, typeSpec]
aux_rule__typeDecl_4 -> [kleene_star__typeDecl_2]
aux_rule__typeList_1 -> [altnt_block__typeList_3]
aux_rule__typeSwitchCase_1 -> [typeList]
aux_rule__typeSwitchGuard_1 -> []
aux_rule__type__1 -> [type_]
aux_rule__unaryExpr_2 -> []
aux_rule__varDecl_1 -> [eos, varSpec]
aux_rule__varDecl_4 -> [kleene_star__varDecl_2]
aux_rule__varSpec_1 -> [expressionList]
aux_rule__varSpec_4 -> [optional__varSpec_2, type_]
aux_rule__varSpec_5 -> [expressionList]
block -> [optional__block_1]
breakStmt -> [optional__breakStmt_1]
channelType -> [altnt_block__channelType_1, elementType]
commCase -> [aux_rule__commCase_2]
commClause -> [commCase, optional__block_1]
compositeLit -> [literalType, literalValue]
constDecl -> [altnt_block__constDecl_3]
constSpec -> [identifierList, optional__constSpec_3]
continueStmt -> [optional__breakStmt_1]
conversion -> [expression, optional__conversion_1, type_]
declaration -> [constDecl, typeDecl, varDecl]
deferStmt -> [expression]
element -> [expression, literalValue]
elementList -> [keyedElement, kleene_star__elementList_2]
elementType -> [type_]
eos -> [aux_rule__eos_1, aux_rule__eos_2]
exprCaseClause -> [exprSwitchCase, optional__block_1]
exprSwitchCase -> [aux_rule__exprSwitchCase_1]
exprSwitchStmt -> [kleene_star__exprSwitchStmt_4, optional__exprSwitchStmt_3, optional__ifStmt_2]
expression -> [kleene_star__expression_1, unaryExpr]
expressionList -> [expression, kleene_star__expressionList_2]
expressionStmt -> [expression]
fallthroughStmt -> []
fieldDecl -> [altnt_block__fieldDecl_2, optional__fieldDecl_1]
forClause -> [optional__exprSwitchStmt_3, optional__forClause_1]
forStmt -> [block, optional__forStmt_2]
functionDecl -> [optional__functionDecl_1, signature]
functionLit -> [block, signature]
functionType -> [signature]
goStmt -> [expression]
gotoStmt -> []
identifierList -> [kleene_star__identifierList_2]
ifStmt -> [block, expression, optional__ifStmt_2, optional__ifStmt_4]
importDecl -> [altnt_block__importDecl_3]
importPath -> [string_]
importSpec -> [importPath, optional__importSpec_2]
incDecStmt -> [altnt_block__incDecStmt_1, expression]
index -> [expression]
interfaceType -> [kleene_star__interfaceType_2]
key -> [expression, literalValue]
keyedElement -> [element, optional__keyedElement_2]
kleene_star__constDecl_2 -> [aux_rule__constDecl_1]
kleene_star__elementList_2 -> [aux_rule__elementList_1]
kleene_star__exprSwitchStmt_4 -> [exprCaseClause]
kleene_star__expressionList_2 -> [aux_rule__expressionList_1]
kleene_star__expression_1 -> [aux_rule__expression_2]
kleene_star__identifierList_2 -> [aux_rule__identifierList_1]
kleene_star__importDecl_2 -> [aux_rule__importDecl_1]
kleene_star__interfaceType_2 -> [aux_rule__interfaceType_1]
kleene_star__parameters_2 -> [aux_rule__parameters_1]
kleene_star__primaryExpr_1 -> [aux_rule__primaryExpr_2]
kleene_star__selectStmt_1 -> [commClause]
kleene_star__sourceFile_2 -> [aux_rule__sourceFile_1]
kleene_star__sourceFile_4 -> [aux_rule__sourceFile_3]
kleene_star__structType_2 -> [aux_rule__structType_1]
kleene_star__typeDecl_2 -> [aux_rule__typeDecl_1]
kleene_star__typeList_2 -> [aux_rule__typeList_1]
kleene_star__typeSwitchStmt_3 -> [typeCaseClause]
kleene_star__unaryExpr_1 -> [aux_rule__unaryExpr_2]
kleene_star__varDecl_2 -> [aux_rule__varDecl_1]
labeledStmt -> [statement]
literalType -> [arrayType, aux_rule__literalType_1, mapType, sliceType, structType, typeName]
literalValue -> [optional__literalValue_3]
mapType -> [elementType, type_]
methodDecl -> [optional__functionDecl_1, receiver, signature]
methodExpr -> [elementType]
methodSpec -> [aux_rule__methodSpec_2, typeName]
optional__anonymousField_1 -> []
optional__arguments_2 -> [aux_rule__arguments_1]
optional__arguments_6 -> [aux_rule__arguments_5]
optional__assign_op_2 -> [aux_rule__assign_op_1]
optional__block_1 -> [statementList]
optional__breakStmt_1 -> []
optional__channelType_2 -> []
optional__constSpec_1 -> [type_]
optional__constSpec_3 -> [aux_rule__constSpec_2]
optional__conversion_1 -> []
optional__exprSwitchStmt_3 -> [expression]
optional__fieldDecl_1 -> [string_]
optional__forClause_1 -> [simpleStmt]
optional__forStmt_2 -> [aux_rule__forStmt_1]
optional__functionDecl_1 -> [block]
optional__ifStmt_2 -> [aux_rule__ifStmt_1]
optional__ifStmt_4 -> [aux_rule__ifStmt_3]
optional__importSpec_2 -> [aux_rule__importSpec_1]
optional__keyedElement_2 -> [aux_rule__keyedElement_1]
optional__literalValue_3 -> [aux_rule__literalValue_2]
optional__parameterDecl_1 -> [identifierList]
optional__parameterDecl_2 -> []
optional__parameters_3 -> []
optional__parameters_5 -> [aux_rule__parameters_4]
optional__recvStmt_2 -> [aux_rule__recvStmt_1]
optional__returnStmt_1 -> [expressionList]
optional__signature_1 -> [result]
optional__typeSpec_1 -> []
optional__typeSwitchGuard_2 -> [aux_rule__typeSwitchGuard_1]
optional__varSpec_2 -> [aux_rule__varSpec_1]
packageClause -> []
parameterDecl -> [optional__parameterDecl_1, optional__parameterDecl_2, type_]
parameters -> [optional__parameters_5]
pointerType -> [type_]
primaryExpr -> [aux_rule__primaryExpr_3, kleene_star__primaryExpr_1]
qualifiedIdent -> []
rangeClause -> [expression, optional__recvStmt_2]
realSimpleStmt -> [assignment, expressionStmt, incDecStmt, sendStmt, shortVarDecl]
realStatement -> [block, breakStmt, continueStmt, declaration, deferStmt, exprSwitchStmt, fallthroughStmt, forStmt, goStmt, gotoStmt, ifStmt, labeledStmt, realSimpleStmt, returnStmt, selectStmt, typeSwitchStmt]
receiver -> [parameters]
recvStmt -> [expression, optional__recvStmt_2]
result -> [parameters, type_]
returnStmt -> [optional__returnStmt_1]
selectStmt -> [kleene_star__selectStmt_1]
sendStmt -> [expression]
shortVarDecl -> [expressionList, identifierList]
signature -> [optional__signature_1, parameters]
simpleStmt -> [realSimpleStmt]
slice -> [altnt_block__slice_4]
sliceType -> [elementType]
sourceFile -> [aux_rule__sourceFile_6]
statement -> [realStatement]
statementList -> [aux_rule__statementList_1]
string_ -> []
structType -> [kleene_star__structType_2]
typeAssertion -> [type_]
typeCaseClause -> [optional__block_1, typeSwitchCase]
typeDecl -> [altnt_block__typeDecl_3]
typeList -> [altnt_block__typeList_3, kleene_star__typeList_2]
typeName -> [qualifiedIdent]
typeSpec -> [optional__typeSpec_1, type_]
typeSwitchCase -> [aux_rule__typeSwitchCase_1]
typeSwitchGuard -> [optional__typeSwitchGuard_2, primaryExpr]
typeSwitchStmt -> [kleene_star__typeSwitchStmt_3, optional__ifStmt_2, typeSwitchGuard]
type_ -> [arrayType, aux_rule__type__1, channelType, functionType, interfaceType, mapType, pointerType, sliceType, structType, typeName]
unaryExpr -> [kleene_star__unaryExpr_1, primaryExpr]
varDecl -> [altnt_block__varDecl_3]
varSpec -> [altnt_block__varSpec_3, identifierList]
