accessModifier -> [altnt_block__accessModifier_2, optional__accessModifier_1]
accessQualifier -> [altnt_block__accessQualifier_1]
altnt_block__accessModifier_2 -> []
altnt_block__accessQualifier_1 -> []
altnt_block__argumentExprs_5 -> [aux_rule__argumentExprs_8, optional__simpleExpr1_1]
altnt_block__ascription_2 -> [aux_rule__ascription_3, infixType, kleene_plus__ascription_1]
altnt_block__blockExpr_1 -> [block, caseClauses]
altnt_block__blockStat_6 -> [aux_rule__blockStat_8, aux_rule__blockStat_9]
altnt_block__dcl_2 -> []
altnt_block__expr1_15 -> [aux_rule__expr1_26, aux_rule__expr1_27, aux_rule__expr1_28]
altnt_block__expr1_16 -> [aux_rule__expr1_29, optional__expr1_14]
altnt_block__expr1_17 -> [aux_rule__expr1_30, aux_rule__expr1_31]
altnt_block__expr1_18 -> [aux_rule__expr1_32, simpleExpr]
altnt_block__expr1_19 -> [aux_rule__expr1_33, aux_rule__expr1_34]
altnt_block__expr_4 -> [aux_rule__expr_5, bindings]
altnt_block__funDef_5 -> [aux_rule__funDef_10, aux_rule__funDef_9]
altnt_block__funDef_6 -> [aux_rule__funDef_11, aux_rule__funDef_12]
altnt_block__importExpr_3 -> [importSelectors]
altnt_block__importSelectors_3 -> [importSelector]
altnt_block__literal_3 -> []
altnt_block__pattern1_1 -> []
altnt_block__resultExpr_2 -> [aux_rule__resultExpr_5, bindings]
altnt_block__resultExpr_3 -> [aux_rule__resultExpr_6]
altnt_block__selfType_3 -> [aux_rule__selfType_4, aux_rule__selfType_5]
altnt_block__simpleExpr1_7 -> [aux_rule__simpleExpr1_12, typeArgs]
altnt_block__simpleExpr_1 -> [classTemplate, templateBody]
altnt_block__simplePattern_9 -> [aux_rule__simplePattern_12, optional__simplePattern_3]
altnt_block__stableId_7 -> [aux_rule__stableId_9]
altnt_block__templateStat_9 -> [dcl, def]
altnt_block__tmplDef_3 -> [aux_rule__tmplDef_6, aux_rule__tmplDef_7]
altnt_block__typeParam_10 -> []
annotType -> [kleene_star__annotType_1, simpleType]
annotation -> [kleene_star__annotation_1, simpleType]
argumentExprs -> [aux_rule__argumentExprs_6, aux_rule__argumentExprs_7]
ascription -> [altnt_block__ascription_2]
aux_rule__argumentExprs_2 -> [exprs]
aux_rule__argumentExprs_6 -> [blockExpr, optional__refinement_1]
aux_rule__argumentExprs_7 -> [altnt_block__argumentExprs_5]
aux_rule__argumentExprs_8 -> [optional__argumentExprs_3, postfixExpr]
aux_rule__ascription_3 -> []
aux_rule__bindings_1 -> [binding]
aux_rule__blockStat_2 -> []
aux_rule__blockStat_7 -> [altnt_block__blockStat_6, kleene_star__annotType_1]
aux_rule__blockStat_8 -> [def, optional__blockStat_3]
aux_rule__blockStat_9 -> [kleene_star__blockStat_5, tmplDef]
aux_rule__classParamClauses_3 -> [classParams, optional__refinement_1]
aux_rule__classParams_1 -> [classParam]
aux_rule__classTemplateOpt_2 -> [optional__classTemplateOpt_1, templateBody]
aux_rule__classTemplateOpt_4 -> [classTemplate]
aux_rule__compilationUnit_1 -> [qualId]
aux_rule__compoundType_1 -> [annotType]
aux_rule__compoundType_4 -> [annotType, kleene_star__compoundType_2, optional__compoundType_3]
aux_rule__dcl_3 -> [funDcl]
aux_rule__dcl_4 -> [kleene_star__dcl_1, typeDcl]
aux_rule__dcl_5 -> [altnt_block__dcl_2, valDcl]
aux_rule__def_2 -> [funDef]
aux_rule__def_3 -> [kleene_star__dcl_1, typeDef]
aux_rule__existentialDcl_1 -> [typeDcl]
aux_rule__existentialDcl_2 -> [valDcl]
aux_rule__expr1_12 -> [altnt_block__expr1_18]
aux_rule__expr1_2 -> [expr]
aux_rule__expr1_20 -> [expr, kleene_star__dcl_1, optional__expr1_3]
aux_rule__expr1_21 -> [expr, optional__expr1_6, optional__expr1_8]
aux_rule__expr1_22 -> [expr]
aux_rule__expr1_23 -> [optional__expr1_10]
aux_rule__expr1_24 -> [altnt_block__expr1_15, expr]
aux_rule__expr1_25 -> [altnt_block__expr1_16, postfixExpr]
aux_rule__expr1_26 -> [expr, kleene_star__dcl_1]
aux_rule__expr1_27 -> [altnt_block__expr1_19, optional__expr1_9]
aux_rule__expr1_28 -> [altnt_block__expr1_17]
aux_rule__expr1_29 -> [caseClauses]
aux_rule__expr1_30 -> [optional__expr1_13]
aux_rule__expr1_31 -> [argumentExprs, simpleExpr1]
aux_rule__expr1_32 -> [optional__expr1_11, simpleExpr1]
aux_rule__expr1_33 -> [enumerators]
aux_rule__expr1_34 -> [enumerators]
aux_rule__expr1_5 -> [expr]
aux_rule__expr1_7 -> [expr]
aux_rule__expr_3 -> [altnt_block__expr_4]
aux_rule__expr_5 -> [optional__expr_1]
aux_rule__exprs_1 -> [expr]
aux_rule__funDef_10 -> [block, optional__refinement_1]
aux_rule__funDef_11 -> [constrExpr]
aux_rule__funDef_12 -> [constrBlock, optional__refinement_1]
aux_rule__funDef_7 -> [altnt_block__funDef_6, paramClause, paramClauses]
aux_rule__funDef_8 -> [altnt_block__funDef_5, funSig]
aux_rule__funDef_9 -> [expr, optional__binding_2]
aux_rule__funTypeParamClause_1 -> [typeParam]
aux_rule__functionArgTypes_1 -> [paramType]
aux_rule__functionArgTypes_3 -> [kleene_star__functionArgTypes_2, paramType]
aux_rule__functionArgTypes_5 -> [optional__functionArgTypes_4]
aux_rule__generator_1 -> [aux_rule__generator_3, guard]
aux_rule__generator_3 -> [expr, pattern1]
aux_rule__ids_1 -> []
aux_rule__importExpr_1 -> [altnt_block__importExpr_3]
aux_rule__importSelector_1 -> [altnt_block__typeParam_10]
aux_rule__importSelectors_1 -> [importSelector]
aux_rule__import__1 -> [importExpr]
aux_rule__infixExpr_3 -> [infixExpr, optional__refinement_1]
aux_rule__infixType_1 -> [compoundType]
aux_rule__literal_4 -> [altnt_block__literal_3, optional__literal_1]
aux_rule__paramClauses_3 -> [optional__refinement_1, params]
aux_rule__paramType_2 -> [optional__paramType_1, type_]
aux_rule__paramType_3 -> [type_]
aux_rule__param_2 -> [paramType]
aux_rule__param_4 -> [expr]
aux_rule__params_1 -> [param]
aux_rule__patDef_1 -> [pattern2]
aux_rule__patVarDef_1 -> [patDef]
aux_rule__patVarDef_2 -> [varDef]
aux_rule__pattern1_2 -> [altnt_block__pattern1_1, typePat]
aux_rule__pattern2_1 -> [pattern3]
aux_rule__pattern2_3 -> [optional__pattern2_2]
aux_rule__pattern3_2 -> [optional__refinement_1, simplePattern]
aux_rule__pattern_1 -> [pattern1]
aux_rule__patterns_1 -> [patterns]
aux_rule__patterns_3 -> [optional__patterns_2, pattern]
aux_rule__patterns_4 -> []
aux_rule__postfixExpr_2 -> [prefixDef, simpleExpr1]
aux_rule__qualId_1 -> []
aux_rule__refineStat_1 -> [typeDef]
aux_rule__resultExpr_4 -> [altnt_block__resultExpr_2, block]
aux_rule__resultExpr_5 -> [altnt_block__resultExpr_3, compoundType]
aux_rule__resultExpr_6 -> [optional__expr_1]
aux_rule__selfType_4 -> [optional__binding_2]
aux_rule__selfType_5 -> [type_]
aux_rule__simpleExpr1_10 -> [optional__simpleExpr1_1]
aux_rule__simpleExpr1_11 -> [altnt_block__simpleExpr1_7, simpleExpr]
aux_rule__simpleExpr1_12 -> []
aux_rule__simpleExpr1_5 -> [argumentExprs, aux_rule__simpleExpr1_9]
aux_rule__simpleExpr1_6 -> [aux_rule__simpleExpr1_10, aux_rule__simpleExpr1_11, literal, stableId]
aux_rule__simpleExpr1_9 -> [altnt_block__simpleExpr1_7, optional__expr1_11]
aux_rule__simpleExpr_2 -> [altnt_block__simpleExpr_1]
aux_rule__simplePattern_10 -> [optional__simplePattern_1]
aux_rule__simplePattern_11 -> [altnt_block__simplePattern_9, stableId]
aux_rule__simplePattern_12 -> [optional__simplePattern_5, optional__simplePattern_7]
aux_rule__simplePattern_2 -> [optional__simplePattern_1]
aux_rule__simplePattern_4 -> [patterns]
aux_rule__simplePattern_6 -> []
aux_rule__simpleType_1 -> []
aux_rule__simpleType_4 -> [aux_rule__simpleType_6, typeArgs]
aux_rule__simpleType_5 -> [aux_rule__simpleType_7, aux_rule__simpleType_8]
aux_rule__simpleType_6 -> []
aux_rule__simpleType_7 -> [optional__simpleType_2, stableId]
aux_rule__simpleType_8 -> [types]
aux_rule__stableId_1 -> []
aux_rule__stableId_6 -> [aux_rule__stableId_8]
aux_rule__stableId_8 -> [altnt_block__stableId_7, optional__stableId_2]
aux_rule__stableId_9 -> [optional__stableId_3]
aux_rule__templateStat_10 -> [altnt_block__templateStat_9, kleene_star__classParam_2, kleene_star__templateStat_3]
aux_rule__templateStat_2 -> [annotation, optional__refinement_1]
aux_rule__tmplDef_4 -> [traitDef]
aux_rule__tmplDef_5 -> [altnt_block__tmplDef_3, optional__tmplDef_1]
aux_rule__tmplDef_6 -> [classDef]
aux_rule__tmplDef_7 -> [objectDef]
aux_rule__topStat_5 -> [kleene_star__classParam_2, kleene_star__templateStat_3, tmplDef]
aux_rule__traitTemplateOpt_4 -> [traitTemplate]
aux_rule__typeDcl_2 -> [type_]
aux_rule__typeDcl_4 -> [type_]
aux_rule__typeParamClause_1 -> [variantTypeParam]
aux_rule__typeParam_6 -> [type_]
aux_rule__typeParam_8 -> [type_]
aux_rule__type__3 -> [functionArgTypes]
aux_rule__types_1 -> [type_]
aux_rule__varDef_1 -> [ids, type_]
aux_rule__variantTypeParam_2 -> []
binding -> [altnt_block__typeParam_10, optional__binding_2]
bindings -> [binding, kleene_star__bindings_2]
block -> [kleene_plus__block_1, optional__block_2]
blockExpr -> [altnt_block__blockExpr_1]
blockStat -> [aux_rule__blockStat_7, expr1, import_]
caseClause -> [block, optional__caseClause_1, pattern]
caseClauses -> [caseClause]
classDef -> [classParamClauses, classTemplateOpt, kleene_star__classDef_2, optional__classDef_3, optional__typeDcl_1]
classParam -> [kleene_star__annotType_1, kleene_star__classParam_2, optional__classParam_4, optional__param_5, paramType]
classParamClause -> [optional__classParamClause_2, optional__refinement_1]
classParamClauses -> [kleene_star__classParamClauses_1, optional__classParamClauses_4]
classParams -> [classParam, kleene_star__classParams_2]
classParents -> [constr, kleene_star__compoundType_2]
classQualifier -> []
classTemplate -> [classParents, optional__classTemplate_1, optional__classTemplate_2]
classTemplateOpt -> [aux_rule__classTemplateOpt_4, optional__classTemplateOpt_3]
compilationUnit -> [kleene_star__compilationUnit_2, topStatSeq]
compoundType -> [aux_rule__compoundType_4, refinement]
constr -> [annotType, kleene_star__annotation_1]
constrAnnotation -> [argumentExprs, simpleType]
constrBlock -> [kleene_star__constrBlock_1, selfInvocation]
constrExpr -> [constrBlock, selfInvocation]
dcl -> [aux_rule__dcl_3, aux_rule__dcl_4, aux_rule__dcl_5]
def -> [aux_rule__def_2, aux_rule__def_3, patVarDef, tmplDef]
earlyDef -> [kleene_star__classParam_2, kleene_star__templateStat_3, patVarDef]
earlyDefs -> [kleene_plus__earlyDefs_1]
enumerators -> [generator]
existentialClause -> [kleene_plus__existentialClause_1]
existentialDcl -> [aux_rule__existentialDcl_1, aux_rule__existentialDcl_2]
expr -> [expr1, kleene_star__expr_2]
expr1 -> [aux_rule__expr1_20, aux_rule__expr1_21, aux_rule__expr1_22, aux_rule__expr1_23, aux_rule__expr1_24, aux_rule__expr1_25]
exprs -> [expr, kleene_star__exprs_2]
funDcl -> [funSig, optional__binding_2]
funDef -> [aux_rule__funDef_7, aux_rule__funDef_8]
funSig -> [optional__funSig_1, paramClauses]
funTypeParamClause -> [kleene_star__funTypeParamClause_2, typeParam]
functionArgTypes -> [aux_rule__functionArgTypes_5, infixType]
generator -> [expr, kleene_star__generator_2, pattern1]
guard -> [postfixExpr]
ids -> [kleene_star__ids_2]
importExpr -> [optional__importExpr_2, stableId]
importSelector -> [optional__importSelector_2]
importSelectors -> [altnt_block__importSelectors_3, kleene_star__importSelectors_2]
import_ -> [importExpr, kleene_star__import__2]
infixExpr -> [kleene_star__infixExpr_2, prefixExpr]
infixType -> [compoundType, kleene_star__infixType_2]
kleene_plus__ascription_1 -> [annotation]
kleene_plus__block_1 -> [blockStat]
kleene_plus__earlyDefs_1 -> [earlyDef]
kleene_plus__existentialClause_1 -> [existentialDcl]
kleene_plus__refinement_2 -> [refineStat]
kleene_plus__selfInvocation_1 -> [argumentExprs]
kleene_plus__templateBody_3 -> [templateStat]
kleene_star__annotType_1 -> [annotation]
kleene_star__annotation_1 -> [argumentExprs]
kleene_star__bindings_2 -> [aux_rule__bindings_1]
kleene_star__blockStat_5 -> [localModifier]
kleene_star__classDef_2 -> [constrAnnotation]
kleene_star__classParamClauses_1 -> [classParamClause]
kleene_star__classParam_2 -> [modifier]
kleene_star__classParams_2 -> [aux_rule__classParams_1]
kleene_star__compilationUnit_2 -> [aux_rule__compilationUnit_1]
kleene_star__compoundType_2 -> [aux_rule__compoundType_1]
kleene_star__constrBlock_1 -> [blockStat]
kleene_star__dcl_1 -> []
kleene_star__expr_2 -> [aux_rule__expr_3]
kleene_star__exprs_2 -> [aux_rule__exprs_1]
kleene_star__funTypeParamClause_2 -> [aux_rule__funTypeParamClause_1]
kleene_star__functionArgTypes_2 -> [aux_rule__functionArgTypes_1]
kleene_star__generator_2 -> [aux_rule__generator_1]
kleene_star__ids_2 -> [aux_rule__ids_1]
kleene_star__importSelectors_2 -> [aux_rule__importSelectors_1]
kleene_star__import__2 -> [aux_rule__import__1]
kleene_star__infixExpr_2 -> [aux_rule__infixExpr_3]
kleene_star__infixType_2 -> [aux_rule__infixType_1]
kleene_star__paramClauses_1 -> [paramClause]
kleene_star__params_2 -> [aux_rule__params_1]
kleene_star__patDef_2 -> [aux_rule__patDef_1]
kleene_star__pattern3_3 -> [aux_rule__pattern3_2]
kleene_star__pattern_2 -> [aux_rule__pattern_1]
kleene_star__postfixExpr_3 -> [aux_rule__postfixExpr_2]
kleene_star__qualId_2 -> [aux_rule__qualId_1]
kleene_star__simpleExpr1_4 -> [aux_rule__simpleExpr1_5]
kleene_star__simpleType_3 -> [aux_rule__simpleType_4]
kleene_star__templateStat_3 -> [aux_rule__templateStat_2]
kleene_star__typeParamClause_2 -> [aux_rule__typeParamClause_1]
kleene_star__typeParam_7 -> [aux_rule__typeParam_6]
kleene_star__typeParam_9 -> [aux_rule__typeParam_8]
kleene_star__type__2 -> [aux_rule__type__3]
kleene_star__types_2 -> [aux_rule__types_1]
literal -> [aux_rule__literal_4]
localModifier -> []
modifier -> [accessModifier, localModifier]
objectDef -> [classTemplateOpt]
optional__accessModifier_1 -> [accessQualifier]
optional__argumentExprs_3 -> [aux_rule__argumentExprs_2]
optional__binding_2 -> [aux_rule__typeParam_8]
optional__blockStat_3 -> [aux_rule__blockStat_2]
optional__block_2 -> [resultExpr]
optional__caseClause_1 -> [guard]
optional__classDef_3 -> [accessModifier]
optional__classParamClause_2 -> [classParams]
optional__classParamClauses_4 -> [aux_rule__classParamClauses_3]
optional__classParam_4 -> [altnt_block__dcl_2]
optional__classTemplateOpt_1 -> []
optional__classTemplateOpt_3 -> [aux_rule__classTemplateOpt_2]
optional__classTemplate_1 -> [earlyDefs]
optional__classTemplate_2 -> [templateBody]
optional__compoundType_3 -> [refinement]
optional__expr1_10 -> [expr]
optional__expr1_11 -> []
optional__expr1_13 -> [aux_rule__expr1_12]
optional__expr1_14 -> [ascription]
optional__expr1_3 -> [aux_rule__expr1_2]
optional__expr1_6 -> [aux_rule__expr1_5]
optional__expr1_8 -> [aux_rule__expr1_7]
optional__expr1_9 -> []
optional__expr_1 -> []
optional__funSig_1 -> [funTypeParamClause]
optional__functionArgTypes_4 -> [aux_rule__functionArgTypes_3]
optional__importExpr_2 -> [aux_rule__importExpr_1]
optional__importSelector_2 -> [aux_rule__importSelector_1]
optional__literal_1 -> []
optional__paramClause_2 -> [params]
optional__paramClauses_4 -> [aux_rule__paramClauses_3]
optional__paramType_1 -> []
optional__param_3 -> [aux_rule__param_2]
optional__param_5 -> [aux_rule__param_4]
optional__pattern2_2 -> [aux_rule__pattern2_1]
optional__pattern3_4 -> [kleene_star__pattern3_3]
optional__patterns_2 -> [aux_rule__patterns_1]
optional__postfixExpr_1 -> []
optional__prefixExpr_1 -> [prefixDef]
optional__refinement_1 -> []
optional__simpleExpr1_1 -> [exprs]
optional__simplePattern_1 -> [patterns]
optional__simplePattern_3 -> [aux_rule__simplePattern_2]
optional__simplePattern_5 -> [aux_rule__simplePattern_4]
optional__simplePattern_7 -> [aux_rule__simplePattern_6]
optional__simpleType_2 -> [aux_rule__simpleType_1]
optional__stableId_2 -> [aux_rule__stableId_1]
optional__stableId_3 -> [classQualifier]
optional__templateBody_2 -> [selfType]
optional__tmplDef_1 -> []
optional__typeDcl_1 -> [typeParamClause]
optional__typeDcl_3 -> [aux_rule__typeDcl_2]
optional__typeDcl_5 -> [aux_rule__typeDcl_4]
optional__type__1 -> [existentialClause]
optional__variantTypeParam_3 -> [aux_rule__variantTypeParam_2]
packageObject -> [objectDef]
packaging -> [optional__refinement_1, qualId, topStatSeq]
param -> [kleene_star__annotType_1, optional__param_3, optional__param_5]
paramClause -> [optional__paramClause_2, optional__refinement_1]
paramClauses -> [kleene_star__paramClauses_1, optional__paramClauses_4]
paramType -> [aux_rule__paramType_2, aux_rule__paramType_3]
params -> [kleene_star__params_2, param]
patDef -> [expr, kleene_star__patDef_2, optional__binding_2, pattern2]
patVarDef -> [aux_rule__patVarDef_1, aux_rule__patVarDef_2]
pattern -> [kleene_star__pattern_2, pattern1]
pattern1 -> [aux_rule__pattern1_2, pattern2]
pattern2 -> [aux_rule__pattern2_3, pattern3]
pattern3 -> [optional__pattern3_4, simplePattern]
patterns -> [aux_rule__patterns_3, aux_rule__patterns_4]
postfixExpr -> [infixExpr, kleene_star__postfixExpr_3, optional__postfixExpr_1, optional__refinement_1]
prefixDef -> []
prefixExpr -> [altnt_block__expr1_18, optional__prefixExpr_1]
qualId -> [kleene_star__qualId_2]
refineStat -> [aux_rule__refineStat_1, dcl]
refinement -> [kleene_plus__refinement_2, optional__refinement_1]
resultExpr -> [aux_rule__resultExpr_4, expr1]
selfInvocation -> [kleene_plus__selfInvocation_1]
selfType -> [altnt_block__selfType_3]
simpleExpr -> [aux_rule__simpleExpr_2, blockExpr]
simpleExpr1 -> [aux_rule__simpleExpr1_6, kleene_star__simpleExpr1_4]
simplePattern -> [aux_rule__simplePattern_10, aux_rule__simplePattern_11, literal]
simpleType -> [aux_rule__simpleType_5, kleene_star__simpleType_3]
stableId -> [aux_rule__stableId_6, kleene_star__qualId_2]
templateBody -> [kleene_plus__templateBody_3, optional__refinement_1, optional__templateBody_2]
templateStat -> [aux_rule__templateStat_10, expr, import_]
tmplDef -> [aux_rule__tmplDef_4, aux_rule__tmplDef_5]
topStat -> [aux_rule__topStat_5, import_, packageObject, packaging]
topStatSeq -> [topStat]
traitDef -> [optional__typeDcl_1, traitTemplateOpt]
traitParents -> [annotType, kleene_star__compoundType_2]
traitTemplate -> [optional__classTemplate_1, optional__classTemplate_2, traitParents]
traitTemplateOpt -> [aux_rule__traitTemplateOpt_4, optional__classTemplateOpt_3]
typeArgs -> [types]
typeDcl -> [optional__typeDcl_1, optional__typeDcl_3, optional__typeDcl_5]
typeDef -> [optional__typeDcl_1, type_]
typeParam -> [altnt_block__typeParam_10, kleene_star__typeParam_7, kleene_star__typeParam_9, optional__typeDcl_1, optional__typeDcl_3, optional__typeDcl_5]
typeParamClause -> [kleene_star__typeParamClause_2, variantTypeParam]
typePat -> [type_]
type_ -> [infixType, kleene_star__type__2, optional__type__1]
types -> [kleene_star__types_2, type_]
valDcl -> [ids, type_]
varDef -> [aux_rule__varDef_1, patDef]
variantTypeParam -> [kleene_star__annotType_1, optional__variantTypeParam_3, typeParam]
