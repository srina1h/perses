=====================Reduction starts.======================

The initial program size is 54
The command line options are:
---
help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "t.c"
  deps: []
  sourceFile: "t.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_reduction_golden_test_perses_node_priority_with_dfs_delta_t.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: true
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: true
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "DFS"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
  enableTrec: false
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "TRUE"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "reduction_progress.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses: null
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___aux_rule__declaration_3 {id=350,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=351,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=392,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=352,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=357,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:printf {id=388,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=359,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_15 {id=361,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |               |___Token:( {id=362,slot_type=LeftParen}
    |   |               |___parameterTypeList {id=365,slot_type=[altnt_block__directDeclarator_11,parameterTypeList]}
    |   |               |   |___parameterDeclaration {id=371,slot_type=[parameterList,parameterDeclaration]}
    |   |               |   |   |___(+) {id=372,slot_type=declarationSpecifiers}
    |   |               |   |   |   |___Token:const {id=387,slot_type=[declarationSpecifier,typeQualifier,Const]}
    |   |               |   |   |   |___Token:char {id=385,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Char]}
    |   |               |   |   |___(?) {id=374,slot_type=[altnt_block__parameterDeclaration_2,optional__typeName_1]}
    |   |               |   |       |___(+) {id=377,slot_type=[abstractDeclarator,pointer,kleene_plus__pointer_8]}
    |   |               |   |           |___Token:* {id=380,slot_type=[aux_rule__pointer_6,altnt_block__pointer_9,Star]}
    |   |               |   |___(?) {id=367,slot_type=optional__parameterTypeList_2}
    |   |               |       |___aux_rule__parameterTypeList_1 {id=368,slot_type=aux_rule__parameterTypeList_1}
    |   |               |           |___Token:, {id=369,slot_type=Comma}
    |   |               |           |___Token:... {id=370,slot_type=Ellipsis}
    |   |               |___Token:) {id=364,slot_type=RightParen}
    |   |___Token:; {id=353,slot_type=Semi}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=344,slot_type=declarationSpecifiers}
        |       |___Token:int {id=348,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=293,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=343,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=295,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=297,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=298,slot_type=LeftParen}
        |           |___parameterList {id=302,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList]}
        |           |   |___(+) {id=332,slot_type=[parameterDeclaration,declarationSpecifiers]}
        |           |   |   |___Token:int {id=342,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |           |   |   |___Token:argc {id=339,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
        |           |   |___(*) {id=304,slot_type=kleene_star__parameterList_1}
        |           |       |___aux_rule__parameterList_2 {id=305,slot_type=aux_rule__parameterList_2}
        |           |           |___Token:, {id=306,slot_type=Comma}
        |           |           |___parameterDeclaration {id=307,slot_type=parameterDeclaration}
        |           |               |___(+) {id=308,slot_type=declarationSpecifiers}
        |           |               |   |___Token:char {id=331,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Char]}
        |           |               |___declarator {id=310,slot_type=[altnt_block__parameterDeclaration_2,declarator]}
        |           |                   |___(?) {id=311,slot_type=optional__declarator_1}
        |           |                   |   |___(+) {id=324,slot_type=[pointer,kleene_plus__pointer_8]}
        |           |                   |       |___Token:* {id=327,slot_type=[aux_rule__pointer_6,altnt_block__pointer_9,Star]}
        |           |                   |___directDeclarator {id=312,slot_type=directDeclarator}
        |           |                       |___Token:argv {id=322,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |           |                       |___(*) {id=314,slot_type=kleene_star__directDeclarator_7}
        |           |                           |___aux_rule__directDeclarator_14 {id=316,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
        |           |                               |___Token:[ {id=317,slot_type=LeftBracket}
        |           |                               |___Token:] {id=319,slot_type=RightBracket}
        |           |___Token:) {id=300,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=257,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=258,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=292,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=259,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=262,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=288,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=264,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=265,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=266,slot_type=Assign}
            |       |   |               |___Token:1 {id=285,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=260,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=117,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=118,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=255,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=119,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=122,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=251,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=124,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=125,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=126,slot_type=Assign}
            |       |   |               |___aux_rule__postfixExpression_13 {id=145,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |___aux_rule__primaryExpression_4 {id=148,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |   |___Token:( {id=149,slot_type=LeftParen}
            |       |   |                   |   |___aux_rule__postfixExpression_13 {id=168,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |       |___aux_rule__primaryExpression_4 {id=171,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |       |   |___Token:( {id=172,slot_type=LeftParen}
            |       |   |                   |       |   |___additiveExpression {id=184,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |                   |       |       |___aux_rule__postfixExpression_13 {id=202,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |       |       |   |___aux_rule__primaryExpression_4 {id=205,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |       |       |   |   |___Token:( {id=206,slot_type=LeftParen}
            |       |   |                   |       |       |   |   |___aux_rule__postfixExpression_13 {id=225,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,aux_rule__postfixExpression_13]}
            |       |   |                   |       |       |   |       |___aux_rule__primaryExpression_4 {id=228,slot_type=[altnt_block__primaryExpression_3,aux_rule__primaryExpression_4]}
            |       |   |                   |       |       |   |       |   |___Token:( {id=229,slot_type=LeftParen}
            |       |   |                   |       |       |   |       |   |___Token:a {id=248,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |       |       |   |       |___Token:) {id=227,slot_type=RightParen}
            |       |   |                   |       |       |   |___Token:) {id=204,slot_type=RightParen}
            |       |   |                   |       |       |___(*) {id=186,slot_type=kleene_star__additiveExpression_1}
            |       |   |                   |       |           |___aux_rule__additiveExpression_2 {id=187,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |       |               |___Token:+ {id=196,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |       |               |___Token:1 {id=195,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |                   |       |___Token:) {id=170,slot_type=RightParen}
            |       |   |                   |___Token:) {id=147,slot_type=RightParen}
            |       |   |___Token:; {id=120,slot_type=Semi}
            |       |___expressionStatement {id=47,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=48,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=66,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:printf {id=115,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=68,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=70,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=71,slot_type=LeftParen}
            |       |   |               |___(?) {id=72,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=74,slot_type=expression}
            |       |   |               |       |___(+) {id=113,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"b=%d\n" {id=114,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=76,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=77,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=78,slot_type=Comma}
            |       |   |               |               |___Token:b {id=96,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |___Token:) {id=73,slot_type=RightParen}
            |       |   |___Token:; {id=49,slot_type=Semi}
            |       |___jumpStatement {id=20,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=23,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=24,slot_type=Return}
            |           |   |___(?) {id=25,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=44,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=22,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=54==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    int printf(const char*, ...);
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=54==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
               ;
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
      int a = 1;
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
      int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
      int b = ((      ((a)) + 1  ));
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
      int b = ((      ((a)) + 1  ));
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=54==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=54==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=54==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

1 entries are removed: 8 --> 7.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 12
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 13 from 54 to 51
------------------------------------------------------------


=================Reducing node 117, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=117}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
                                   ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
                                   ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 117
------------------------------------------------------------


=================Reducing node 119, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int                          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int                          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 119
------------------------------------------------------------


=================Reducing node 122, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=122}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 122
------------------------------------------------------------


=================Reducing node 124, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 124
------------------------------------------------------------


=================Reducing node 125, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=125}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 125
------------------------------------------------------------


=================Reducing node 293, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main                          {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main                          {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int           argc                {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int           argc                {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 293
------------------------------------------------------------


=================Reducing node 145, size=51=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b = ((      ((a)) + 1  ));
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a))        ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a))        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =  (      ((a)) + 1  ) ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =  (      ((a)) + 1  ) ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

5 entries are removed: 16 --> 11.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 13
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 145 from 51 to 47
------------------------------------------------------------


=================Reducing node 350, size=47=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
                                ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
                                ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 350
------------------------------------------------------------


=================Reducing node 295, size=47=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    int printf(const char*, ...);
    int main                          {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main                          {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 295
------------------------------------------------------------


=================Reducing node 297, size=47=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=297}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 297
------------------------------------------------------------


=================Reducing node 352, size=47=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    int                         ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int                         ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 352
------------------------------------------------------------


=================Reducing node 357, size=47=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=357}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf                  ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf                  ;
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 357
------------------------------------------------------------


=================Reducing node 302, size=47=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc, char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*, ...);
    int main (int                   ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int                   ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*, ...);
    int main (    argc              ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (    argc              ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*, ...);
    int main (          char        ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (          char        ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*, ...);
    int main (int argc              ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (int argc              ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*, ...);
    int main (          char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (          char *argv[]) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

12 entries are removed: 16 --> 4.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 12
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 302 from 47 to 39
------------------------------------------------------------


=================Reducing node 359, size=39=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 359
------------------------------------------------------------


=================Reducing node 361, size=39=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=361}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 361
------------------------------------------------------------


=================Reducing node 184, size=39=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =                 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =                 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =          (a)         ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =          (a)         ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a))        ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a))        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 184
------------------------------------------------------------


=================Reducing node 47, size=39==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
                         ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 47
------------------------------------------------------------


=================Reducing node 48, size=39==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
                         ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 66, size=39==================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=66}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf             ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf             ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
             "b=%d\n"    ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
             "b=%d\n"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
             "b=%d\n", b ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
             "b=%d\n", b ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 66
------------------------------------------------------------


=================Reducing node 365, size=39=================

The current best program is the following

    --file: t.c--
    int printf(const char*, ...);
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const           );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const           );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(      char      );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(      char      );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char      );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char      );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(const char*     );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(const char*     );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

13 entries are removed: 14 --> 1.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 16
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 365 from 39 to 34
------------------------------------------------------------


=================Reducing node 257, size=34=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
               ;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
               ;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 257
------------------------------------------------------------


=================Reducing node 202, size=34=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =         ((a)) + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Test script execution is cancelled.=============

It took less than 1 second to cancel the task.

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =          (a)  + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =          (a)  + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

3 entries are removed: 3 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 4
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 202 from 34 to 30
------------------------------------------------------------


=================Reducing node 68, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 70, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=70}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 259, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int      ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int      ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 259
------------------------------------------------------------


=================Reducing node 262, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=262}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 262
------------------------------------------------------------


=================Reducing node 72, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(           );
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(           );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 74, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=74}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(          b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(          b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 264, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 264
------------------------------------------------------------


=================Reducing node 265, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=265}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 265
------------------------------------------------------------


=================Reducing node 186, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 186
------------------------------------------------------------


=================Reducing node 187, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=187}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 76, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


=================Reducing node 77, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=77}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 77
------------------------------------------------------------


=================Reducing node 388, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 388
------------------------------------------------------------


=================Reducing node 364, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 364
------------------------------------------------------------


=================Reducing node 362, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 362
------------------------------------------------------------


=================Reducing node 353, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 353
------------------------------------------------------------


=================Reducing node 351, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 351
------------------------------------------------------------


=================Reducing node 392, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 392
------------------------------------------------------------


=================Reducing node 343, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 343
------------------------------------------------------------


=================Reducing node 300, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 300
------------------------------------------------------------


=================Reducing node 298, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 298
------------------------------------------------------------


=================Reducing node 288, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 288
------------------------------------------------------------


=================Reducing node 285, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 285
------------------------------------------------------------


=================Reducing node 266, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 266
------------------------------------------------------------


=================Reducing node 260, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 260
------------------------------------------------------------


=================Reducing node 258, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 258
------------------------------------------------------------


=================Reducing node 292, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 292
------------------------------------------------------------


=================Reducing node 251, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 251
------------------------------------------------------------


=================Reducing node 248, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 248
------------------------------------------------------------


=================Reducing node 196, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 196
------------------------------------------------------------


=================Reducing node 195, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 195
------------------------------------------------------------


=================Reducing node 126, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 126
------------------------------------------------------------


=================Reducing node 120, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 120
------------------------------------------------------------


=================Reducing node 118, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 118
------------------------------------------------------------


=================Reducing node 255, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 255
------------------------------------------------------------


=================Reducing node 115, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 115
------------------------------------------------------------


=================Reducing node 113, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 113
------------------------------------------------------------


=================Reducing node 114, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 114
------------------------------------------------------------


=================Reducing node 96, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 96
------------------------------------------------------------


=================Reducing node 78, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 78
------------------------------------------------------------


=================Reducing node 73, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 71, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 49, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 11, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=30==================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    int printf(                );
        main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
        main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 344, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=344}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 344
------------------------------------------------------------


=================Reducing node 348, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 348
------------------------------------------------------------


=Fixpoint iteration 2. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=393}
|___(+) {id=394,slot_type=kleene_plus__translationUnit_3}
    |___aux_rule__declaration_3 {id=580,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=581,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=599,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=582,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=587,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:printf {id=595,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=589,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_15 {id=591,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |               |___Token:( {id=592,slot_type=LeftParen}
    |   |               |___Token:) {id=594,slot_type=RightParen}
    |   |___Token:; {id=583,slot_type=Semi}
    |___functionDefinition {id=397,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=398,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=574,slot_type=declarationSpecifiers}
        |       |___Token:int {id=578,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=565,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=573,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=567,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=569,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=570,slot_type=LeftParen}
        |           |___Token:) {id=572,slot_type=RightParen}
        |___compoundStatement {id=400,slot_type=compoundStatement}
            |___Token:{ {id=401,slot_type=LeftBrace}
            |___(?) {id=402,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=405,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=529,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=530,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=564,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=531,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=534,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=560,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=536,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=537,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=538,slot_type=Assign}
            |       |   |               |___Token:1 {id=557,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=532,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=481,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=482,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=527,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=483,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=486,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=523,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=488,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=489,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=490,slot_type=Assign}
            |       |   |               |___additiveExpression {id=502,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |                   |___Token:a {id=520,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |___(*) {id=504,slot_type=kleene_star__additiveExpression_1}
            |       |   |                       |___aux_rule__additiveExpression_2 {id=505,slot_type=aux_rule__additiveExpression_2}
            |       |   |                           |___Token:+ {id=514,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                           |___Token:1 {id=513,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=484,slot_type=Semi}
            |       |___expressionStatement {id=411,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=412,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=430,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=479,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=432,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=434,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=435,slot_type=LeftParen}
            |           |               |___(?) {id=436,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=438,slot_type=expression}
            |           |               |       |___(+) {id=477,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"b=%d\n" {id=478,slot_type=StringLiteral}
            |           |               |       |___(*) {id=440,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=441,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=442,slot_type=Comma}
            |           |               |               |___Token:b {id=460,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=437,slot_type=RightParen}
            |           |___Token:; {id=413,slot_type=Semi}
            |___Token:} {id=403,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 394, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    int printf(                );
    --file: <formatted tokenized program in its original format>--
    int printf(                );
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=397}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 394
------------------------------------------------------------


=================Reducing node 397, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=397}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
               ;
    --file: <formatted tokenized program in its original format>--
    int printf(                );
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
      int a = 1;
    --file: <formatted tokenized program in its original format>--
    int printf(                );
      int a = 1;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
      int b =           a   + 1    ;
    --file: <formatted tokenized program in its original format>--
    int printf(                );
      int b =           a   + 1    ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 397
------------------------------------------------------------


=================Reducing node 400, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 400
------------------------------------------------------------


=================Reducing node 402, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 402
------------------------------------------------------------


=================Reducing node 405, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=405}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    int printf(                );
    int main (                      ) {
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 405
------------------------------------------------------------


=================Reducing node 481, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=481}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
                                   ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
                                   ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 481
------------------------------------------------------------


=================Reducing node 411, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=411}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
                         ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 411
------------------------------------------------------------


=================Reducing node 412, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
                         ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
                         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 412
------------------------------------------------------------


=================Reducing node 430, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=430}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
             "b=%d\n"    ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
             "b=%d\n"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
             "b=%d\n", b ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
             "b=%d\n", b ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 430
------------------------------------------------------------


=================Reducing node 580, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=580}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
                                ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
                                ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 580
------------------------------------------------------------


=================Reducing node 529, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=529}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
               ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
               ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 529
------------------------------------------------------------


=================Reducing node 483, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int                          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int                          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 483
------------------------------------------------------------


=================Reducing node 486, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=486}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int               a          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int               a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 486
------------------------------------------------------------


=================Reducing node 432, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf             ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 432
------------------------------------------------------------


=================Reducing node 434, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=434}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 434
------------------------------------------------------------


=================Reducing node 488, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b                        ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 488
------------------------------------------------------------


=================Reducing node 489, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=489}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 489
------------------------------------------------------------


=================Reducing node 582, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    int                         ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int                         ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 582
------------------------------------------------------------


=================Reducing node 587, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=587}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 587
------------------------------------------------------------


=================Reducing node 565, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main                          {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main                          {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 565
------------------------------------------------------------


=================Reducing node 531, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int      ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int      ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 531
------------------------------------------------------------


=================Reducing node 534, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=534}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 534
------------------------------------------------------------


=================Reducing node 502, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =                 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =                 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 502
------------------------------------------------------------


=================Reducing node 436, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(           );
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(           );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 436
------------------------------------------------------------


=================Reducing node 438, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=438}
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(          b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf(          b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 438
------------------------------------------------------------


=================Reducing node 589, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf                  ;
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 589
------------------------------------------------------------


=================Reducing node 591, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=591}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 591
------------------------------------------------------------


=================Reducing node 567, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main                          {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main                          {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 567
------------------------------------------------------------


=================Reducing node 569, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=569}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 569
------------------------------------------------------------


=================Reducing node 536, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a    ;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 536
------------------------------------------------------------


=================Reducing node 537, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=537}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 537
------------------------------------------------------------


=================Reducing node 504, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a          ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 504
------------------------------------------------------------


=================Reducing node 505, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=505}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 505
------------------------------------------------------------


=================Reducing node 440, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 440
------------------------------------------------------------


=================Reducing node 441, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=441}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 441
------------------------------------------------------------


=================Reducing node 595, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 595
------------------------------------------------------------


=================Reducing node 594, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 594
------------------------------------------------------------


=================Reducing node 592, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 592
------------------------------------------------------------


=================Reducing node 583, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 583
------------------------------------------------------------


=================Reducing node 581, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 581
------------------------------------------------------------


=================Reducing node 599, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 599
------------------------------------------------------------


=================Reducing node 573, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 573
------------------------------------------------------------


=================Reducing node 572, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 572
------------------------------------------------------------


=================Reducing node 570, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 570
------------------------------------------------------------


=================Reducing node 560, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 560
------------------------------------------------------------


=================Reducing node 557, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 557
------------------------------------------------------------


=================Reducing node 538, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 538
------------------------------------------------------------


=================Reducing node 532, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 532
------------------------------------------------------------


=================Reducing node 530, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 530
------------------------------------------------------------


=================Reducing node 564, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 564
------------------------------------------------------------


=================Reducing node 523, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 523
------------------------------------------------------------


=================Reducing node 520, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 520
------------------------------------------------------------


=================Reducing node 514, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 514
------------------------------------------------------------


=================Reducing node 513, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 513
------------------------------------------------------------


=================Reducing node 490, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 490
------------------------------------------------------------


=================Reducing node 484, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 484
------------------------------------------------------------


=================Reducing node 482, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 482
------------------------------------------------------------


=================Reducing node 527, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 527
------------------------------------------------------------


=================Reducing node 479, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 479
------------------------------------------------------------


=================Reducing node 477, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 477
------------------------------------------------------------


=================Reducing node 478, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 478
------------------------------------------------------------


=================Reducing node 460, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 460
------------------------------------------------------------


=================Reducing node 442, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 442
------------------------------------------------------------


=================Reducing node 437, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 437
------------------------------------------------------------


=================Reducing node 435, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 435
------------------------------------------------------------


=================Reducing node 413, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 413
------------------------------------------------------------


=================Reducing node 403, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 403
------------------------------------------------------------


=================Reducing node 401, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 401
------------------------------------------------------------


=================Reducing node 398, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


=========Cache hit for the following program: fail==========

    --file: t.c--
    int printf(                );
        main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
    --file: <formatted tokenized program in its original format>--
    int printf(                );
        main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 398
------------------------------------------------------------


=================Reducing node 574, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=574}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 574
------------------------------------------------------------


=================Reducing node 578, size=30=================

The current best program is the following

    --file: t.c--
    int printf(                );
    int main (                      ) {
      int a = 1;
      int b =           a   + 1    ;
      printf("b=%d\n", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 578
------------------------------------------------------------


#test success = 5
#test failure = 66
#test result cache hits = 21
#test execution cancelled = 11
#node edit action set cache hits = 37
#external test execution cache hits = 0
