=====================Reduction starts.======================

The initial program size is 71
The command line options are:
---
helpFlags:
  groupName: "Help"
  help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "t.c"
  deps: []
  sourceFile: "t.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_lpr_fixpoint_reduction_golden_test_perses_node_priority_with_dfs_delta_t.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: true
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: true
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "DFS"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
trecFlags:
  groupName: "T-Rec Reducer Control"
  enableTrec: false
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "progress_dump_lpr_fixpoint.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  cacheType: "CONTENT_SHA512"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
experimentFlags:
  groupName: "Experiment Control"
  onDemandFineGritReducerAnnotationClasses: []
  onDemandMediumGritReducerAnnotationClasses: []
  onDemandCoarseGritReducerAnnotationClasses: []
lprFlags:
  groupName: "LPR Reducer Control"
  enableLPR: true
  lprFixpoint: true
  llmClientPath: "llm_client_mock_to_test_workflow.py"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
The reducer execution plan is listed below.
--- !<sequence>
reducers:
- !<fixpoint>
  body: !<atomic>
    reducer: perses_node_priority_with_dfs_delta
  condition: smaller
- !<fixpoint>
  body: !<sequence>
    reducers:
    - !<if>
      condition: !<atomic>
        reducer: llm_based_function_inlining_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_loop_unrolling_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_data_type_elimination_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_data_type_simplification_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_variable_elimination_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
  condition: 10


Rebuilding spar-tree: The spartree is not dirty, and thus the rebuilding is skipped.

=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=489,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=475,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=476,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=488,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=487,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=484,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=477,slot_type=Semi}
    |___aux_rule__declaration_3 {id=432,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=433,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=473,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=434,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=439,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=468,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=441,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=443,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=444,slot_type=LeftBracket}
    |   |               |___(?) {id=449,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=467,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=446,slot_type=RightBracket}
    |   |___Token:; {id=435,slot_type=Semi}
    |___functionDefinition {id=380,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=381,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=426,slot_type=declarationSpecifiers}
    |   |       |___Token:int {id=430,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___directDeclarator {id=417,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:init {id=425,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=419,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=421,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=422,slot_type=LeftParen}
    |   |           |___Token:) {id=424,slot_type=RightParen}
    |   |___compoundStatement {id=383,slot_type=compoundStatement}
    |       |___Token:{ {id=384,slot_type=LeftBrace}
    |       |___(?) {id=385,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=388,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___jumpStatement {id=392,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
    |       |           |___aux_rule__jumpStatement_4 {id=395,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
    |       |           |   |___Token:return {id=396,slot_type=Return}
    |       |           |   |___(?) {id=397,slot_type=optional__postfixExpression_1}
    |       |           |       |___Token:100 {id=416,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |       |           |___Token:; {id=394,slot_type=Semi}
    |       |___Token:} {id=386,slot_type=RightBrace}
    |___functionDefinition {id=8,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=9,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=375,slot_type=declarationSpecifiers}
        |       |___Token:int {id=379,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=366,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=374,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=368,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=370,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=371,slot_type=LeftParen}
        |           |___Token:) {id=373,slot_type=RightParen}
        |___compoundStatement {id=11,slot_type=compoundStatement}
            |___Token:{ {id=12,slot_type=LeftBrace}
            |___(?) {id=13,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=16,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=324,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=325,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=365,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=326,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=329,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=360,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=331,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=332,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=333,slot_type=Assign}
            |       |   |               |___postfixExpression {id=350,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |                   |___Token:init {id=357,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |___(*) {id=352,slot_type=kleene_star__postfixExpression_2}
            |       |   |                       |___aux_rule__postfixExpression_11 {id=354,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |                           |___Token:( {id=355,slot_type=LeftParen}
            |       |   |                           |___Token:) {id=356,slot_type=RightParen}
            |       |   |___Token:; {id=327,slot_type=Semi}
            |       |___statement {id=143,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=144,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=221,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=224,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=225,slot_type=For}
            |       |   |       |   |___Token:( {id=226,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=227,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=287,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=288,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=322,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=289,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=292,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=318,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=294,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=295,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=296,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=315,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=290,slot_type=Semi}
            |       |   |       |       |___(?) {id=229,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=263,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=285,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=265,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=266,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=277,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=276,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=230,slot_type=Semi}
            |       |   |       |       |___(?) {id=231,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=248,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=253,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=250,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=252,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=223,slot_type=RightParen}
            |       |   |___compoundStatement {id=146,slot_type=[aux_rule__statement_3,compoundStatement]}
            |       |       |___Token:{ {id=147,slot_type=LeftBrace}
            |       |       |___(?) {id=148,slot_type=optional__compoundStatement_1}
            |       |       |   |___(+) {id=151,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |       |       |___expressionStatement {id=155,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |       |           |___(?) {id=156,slot_type=optional__postfixExpression_1}
            |       |       |           |   |___assignmentExpression {id=159,slot_type=[expression,assignmentExpression]}
            |       |       |           |       |___(*) {id=160,slot_type=kleene_star__assignmentExpression_1}
            |       |       |           |       |   |___aux_rule__assignmentExpression_2 {id=189,slot_type=aux_rule__assignmentExpression_2}
            |       |       |           |       |       |___postfixExpression {id=194,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |       |           |       |       |   |___Token:b {id=220,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |       |       |   |___(*) {id=196,slot_type=kleene_star__postfixExpression_2}
            |       |       |           |       |       |       |___aux_rule__postfixExpression_10 {id=198,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |       |           |       |       |           |___Token:[ {id=199,slot_type=LeftBracket}
            |       |       |           |       |       |           |___Token:i {id=219,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |       |       |           |___Token:] {id=201,slot_type=RightBracket}
            |       |       |           |       |       |___Token:= {id=192,slot_type=[assignmentOperator,Assign]}
            |       |       |           |       |___additiveExpression {id=170,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |           |___Token:a {id=188,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |           |___(*) {id=172,slot_type=kleene_star__additiveExpression_1}
            |       |       |           |               |___aux_rule__additiveExpression_2 {id=173,slot_type=aux_rule__additiveExpression_2}
            |       |       |           |                   |___Token:- {id=182,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |       |           |                   |___Token:i {id=181,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___Token:; {id=157,slot_type=Semi}
            |       |       |___Token:} {id=149,slot_type=RightBrace}
            |       |___expressionStatement {id=50,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=51,slot_type=optional__postfixExpression_1}
            |       |   |   |___postfixExpression {id=69,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |___Token:printf {id=142,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |___(*) {id=71,slot_type=kleene_star__postfixExpression_2}
            |       |   |           |___aux_rule__postfixExpression_11 {id=73,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |               |___Token:( {id=74,slot_type=LeftParen}
            |       |   |               |___(?) {id=75,slot_type=optional__postfixExpression_1}
            |       |   |               |   |___expression {id=77,slot_type=expression}
            |       |   |               |       |___(+) {id=140,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |       |   |               |       |   |___Token:"%d" {id=141,slot_type=StringLiteral}
            |       |   |               |       |___(*) {id=79,slot_type=kleene_star__expression_1}
            |       |   |               |           |___aux_rule__expression_2 {id=80,slot_type=aux_rule__expression_2}
            |       |   |               |               |___Token:, {id=81,slot_type=Comma}
            |       |   |               |               |___postfixExpression {id=97,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |               |                   |___Token:b {id=123,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |               |                   |___(*) {id=99,slot_type=kleene_star__postfixExpression_2}
            |       |   |               |                       |___aux_rule__postfixExpression_10 {id=101,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |               |                           |___Token:[ {id=102,slot_type=LeftBracket}
            |       |   |               |                           |___Token:6 {id=122,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |               |                           |___Token:] {id=104,slot_type=RightBracket}
            |       |   |               |___Token:) {id=76,slot_type=RightParen}
            |       |   |___Token:; {id=52,slot_type=Semi}
            |       |___jumpStatement {id=23,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=26,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=27,slot_type=Return}
            |           |   |___(?) {id=28,slot_type=optional__postfixExpression_1}
            |           |       |___Token:0 {id=47,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |___Token:; {id=25,slot_type=Semi}
            |___Token:} {id=14,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=71==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@3
    --file: t.c--
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
    --file: <formatted tokenized program in its original format>--
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 8, size=71==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=8}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                       ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                        ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                        ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
              ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
              ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
      length a = init();
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
      length a = init();
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 11, size=71==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main()
                                   {
        b[i] = a - i;
      }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main()
                                   {
        b[i] = a - i;
      }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


=================Reducing node 13, size=71==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 13
------------------------------------------------------------


=================Reducing node 16, size=71==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
      return 0;
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=16}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 18
------------------------------------------------------------


================The best program is updated.================

token count change 71 -> 68
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 16 from 71 to 68
------------------------------------------------------------


=================Reducing node 143, size=68=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=143}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                            ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                            ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
           int i = 0;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
           int i = 0;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]kleene replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                                   {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                                   {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 143
------------------------------------------------------------


=================Reducing node 144, size=68=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__statement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                                   {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                                   {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 144
------------------------------------------------------------


=================Reducing node 221, size=68=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=221}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 221
------------------------------------------------------------


=================Reducing node 224, size=68=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 224
------------------------------------------------------------


=================Reducing node 227, size=68=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 227
------------------------------------------------------------


=================Reducing node 146, size=68=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++) {
        b[i] = a - i;
      }
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 13
------------------------------------------------------------


================The best program is updated.================

token count change 68 -> 66
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 146 from 68 to 66
------------------------------------------------------------


=================Reducing node 50, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 380, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                ;
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                ;
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 380
------------------------------------------------------------


=================Reducing node 155, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 155
------------------------------------------------------------


=================Reducing node 51, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 51
------------------------------------------------------------


=================Reducing node 69, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=69}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d"       ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d"       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d", b[6] ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d", b[6] ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 156, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 159, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=159}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b           ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b           ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                   i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                   i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i]        ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i]        ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 159
------------------------------------------------------------


=================Reducing node 71, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 73, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=73}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 73
------------------------------------------------------------


=================Reducing node 324, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
                       ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
                       ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 324
------------------------------------------------------------


=================Reducing node 432, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
                 ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
                 ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 432
------------------------------------------------------------


=================Reducing node 75, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(          );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(          );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 75
------------------------------------------------------------


=================Reducing node 77, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=77}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 77
------------------------------------------------------------


=================Reducing node 383, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 383
------------------------------------------------------------


=================Reducing node 326, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length           ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length           ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 326
------------------------------------------------------------


=================Reducing node 329, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=329}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length     init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length     init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 329
------------------------------------------------------------


=================Reducing node 287, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (         ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (         ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 287
------------------------------------------------------------


=================Reducing node 160, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 189, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=189}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 189
------------------------------------------------------------


=================Reducing node 79, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 79
------------------------------------------------------------


=================Reducing node 80, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=80}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 80
------------------------------------------------------------


=================Reducing node 475, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                      ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                      ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 475
------------------------------------------------------------


=================Reducing node 434, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length       ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length       ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 434
------------------------------------------------------------


=================Reducing node 439, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=439}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 439
------------------------------------------------------------


=================Reducing node 331, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 331
------------------------------------------------------------


=================Reducing node 332, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=332}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 332
------------------------------------------------------------


=================Reducing node 194, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
          i  = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
          i  = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 97, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d",   6 );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d",   6 );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 476, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@2
    --file: t.c--
    #include <stdio.h>
                length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
            int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
            int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 476
------------------------------------------------------------


=================Reducing node 441, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 441
------------------------------------------------------------


=================Reducing node 443, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=443}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 443
------------------------------------------------------------


=================Reducing node 417, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 417
------------------------------------------------------------


=================Reducing node 385, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 385
------------------------------------------------------------


=================Reducing node 388, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=388}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 388
------------------------------------------------------------


=================Reducing node 392, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
                ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
                ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 392
------------------------------------------------------------


=================Reducing node 366, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 366
------------------------------------------------------------


=================Reducing node 350, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 350
------------------------------------------------------------


=================Reducing node 289, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int      ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int      ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 289
------------------------------------------------------------


=================Reducing node 292, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=292}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 292
------------------------------------------------------------


=================Reducing node 229, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;       ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;       ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 229
------------------------------------------------------------


=================Reducing node 263, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=263}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;     10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;     10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 263
------------------------------------------------------------


=================Reducing node 196, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 196
------------------------------------------------------------


=================Reducing node 198, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=198}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 198
------------------------------------------------------------


=================Reducing node 170, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] =     i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] =     i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 99, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 99
------------------------------------------------------------


=================Reducing node 101, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=101}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 101
------------------------------------------------------------


=================Reducing node 419, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 419
------------------------------------------------------------


=================Reducing node 421, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=421}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 421
------------------------------------------------------------


=================Reducing node 395, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 395
------------------------------------------------------------


=================Reducing node 368, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 368
------------------------------------------------------------


=================Reducing node 370, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=370}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 370
------------------------------------------------------------


=================Reducing node 352, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 352
------------------------------------------------------------


=================Reducing node 354, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=354}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 354
------------------------------------------------------------


=================Reducing node 294, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 294
------------------------------------------------------------


=================Reducing node 295, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=295}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 295
------------------------------------------------------------


=================Reducing node 265, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__relationalExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 265
------------------------------------------------------------


=================Reducing node 266, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=266}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 266
------------------------------------------------------------


=================Reducing node 231, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10;    )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10;    )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 231
------------------------------------------------------------


=================Reducing node 248, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=248}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 248
------------------------------------------------------------


=================Reducing node 172, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 172
------------------------------------------------------------


=================Reducing node 173, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=173}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 173
------------------------------------------------------------


=================Reducing node 489, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 489
------------------------------------------------------------


=================Reducing node 488, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 488
------------------------------------------------------------


=================Reducing node 487, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 487
------------------------------------------------------------


=================Reducing node 484, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 484
------------------------------------------------------------


=================Reducing node 477, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 477
------------------------------------------------------------


=================Reducing node 468, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 468
------------------------------------------------------------


=================Reducing node 449, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__directDeclarator_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 449
------------------------------------------------------------


=================Reducing node 467, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 467
------------------------------------------------------------


=================Reducing node 446, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 446
------------------------------------------------------------


=================Reducing node 444, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 444
------------------------------------------------------------


=================Reducing node 435, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 435
------------------------------------------------------------


=================Reducing node 433, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 433
------------------------------------------------------------


=================Reducing node 473, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 473
------------------------------------------------------------


=================Reducing node 425, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 425
------------------------------------------------------------


=================Reducing node 424, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 424
------------------------------------------------------------


=================Reducing node 422, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 422
------------------------------------------------------------


=================Reducing node 397, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 397
------------------------------------------------------------


=================Reducing node 416, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 416
------------------------------------------------------------


=================Reducing node 396, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 396
------------------------------------------------------------


=================Reducing node 394, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 394
------------------------------------------------------------


=================Reducing node 386, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 386
------------------------------------------------------------


=================Reducing node 384, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 384
------------------------------------------------------------


=================Reducing node 381, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
        init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
        init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 381
------------------------------------------------------------


=================Reducing node 426, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=426}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 426
------------------------------------------------------------


=================Reducing node 430, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 430
------------------------------------------------------------


=================Reducing node 374, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 374
------------------------------------------------------------


=================Reducing node 373, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 373
------------------------------------------------------------


=================Reducing node 371, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 371
------------------------------------------------------------


=================Reducing node 360, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 360
------------------------------------------------------------


=================Reducing node 357, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 357
------------------------------------------------------------


=================Reducing node 356, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 356
------------------------------------------------------------


=================Reducing node 355, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 355
------------------------------------------------------------


=================Reducing node 333, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 333
------------------------------------------------------------


=================Reducing node 327, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 327
------------------------------------------------------------


=================Reducing node 325, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 325
------------------------------------------------------------


=================Reducing node 365, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 365
------------------------------------------------------------


=================Reducing node 318, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 318
------------------------------------------------------------


=================Reducing node 315, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 315
------------------------------------------------------------


=================Reducing node 296, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 296
------------------------------------------------------------


=================Reducing node 290, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 290
------------------------------------------------------------


=================Reducing node 288, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 288
------------------------------------------------------------


=================Reducing node 322, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 322
------------------------------------------------------------


=================Reducing node 285, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 285
------------------------------------------------------------


=================Reducing node 277, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 277
------------------------------------------------------------


=================Reducing node 276, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 276
------------------------------------------------------------


=================Reducing node 253, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 253
------------------------------------------------------------


=================Reducing node 250, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 250
------------------------------------------------------------


=================Reducing node 252, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 252
------------------------------------------------------------


=================Reducing node 230, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 230
------------------------------------------------------------


=================Reducing node 226, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 226
------------------------------------------------------------


=================Reducing node 225, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 225
------------------------------------------------------------


=================Reducing node 223, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 223
------------------------------------------------------------


=================Reducing node 220, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 220
------------------------------------------------------------


=================Reducing node 219, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 219
------------------------------------------------------------


=================Reducing node 201, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 201
------------------------------------------------------------


=================Reducing node 199, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 199
------------------------------------------------------------


=================Reducing node 192, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 192
------------------------------------------------------------


=================Reducing node 188, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 188
------------------------------------------------------------


=================Reducing node 182, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 182
------------------------------------------------------------


=================Reducing node 181, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 181
------------------------------------------------------------


=================Reducing node 157, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 157
------------------------------------------------------------


=================Reducing node 142, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 142
------------------------------------------------------------


=================Reducing node 140, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 140
------------------------------------------------------------


=================Reducing node 141, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 141
------------------------------------------------------------


=================Reducing node 123, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 123
------------------------------------------------------------


=================Reducing node 122, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 122
------------------------------------------------------------


=================Reducing node 104, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 104
------------------------------------------------------------


=================Reducing node 102, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 102
------------------------------------------------------------


=================Reducing node 81, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 81
------------------------------------------------------------


=================Reducing node 76, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


=================Reducing node 74, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 52, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 52
------------------------------------------------------------


=================Reducing node 14, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 14
------------------------------------------------------------


=================Reducing node 12, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


==================Reducing node 9, size=66==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
        main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
        main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 375, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=375}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 375
------------------------------------------------------------


=================Reducing node 379, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 379
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 2. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=491,slot_type=translationUnit}
|___(+) {id=492,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=942,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=928,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=929,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=941,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=940,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=937,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=930,slot_type=Semi}
    |___aux_rule__declaration_3 {id=885,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=886,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=926,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=887,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=892,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=921,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=894,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=896,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=897,slot_type=LeftBracket}
    |   |               |___(?) {id=902,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=920,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=899,slot_type=RightBracket}
    |   |___Token:; {id=888,slot_type=Semi}
    |___functionDefinition {id=833,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=834,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=879,slot_type=declarationSpecifiers}
    |   |       |___Token:int {id=883,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___directDeclarator {id=870,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:init {id=878,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=872,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=874,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=875,slot_type=LeftParen}
    |   |           |___Token:) {id=877,slot_type=RightParen}
    |   |___compoundStatement {id=836,slot_type=compoundStatement}
    |       |___Token:{ {id=837,slot_type=LeftBrace}
    |       |___(?) {id=838,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=841,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___jumpStatement {id=845,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
    |       |           |___aux_rule__jumpStatement_4 {id=848,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
    |       |           |   |___Token:return {id=849,slot_type=Return}
    |       |           |   |___(?) {id=850,slot_type=optional__postfixExpression_1}
    |       |           |       |___Token:100 {id=869,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |       |           |___Token:; {id=847,slot_type=Semi}
    |       |___Token:} {id=839,slot_type=RightBrace}
    |___functionDefinition {id=498,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=499,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=828,slot_type=declarationSpecifiers}
        |       |___Token:int {id=832,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=819,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=827,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=821,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=823,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=824,slot_type=LeftParen}
        |           |___Token:) {id=826,slot_type=RightParen}
        |___compoundStatement {id=501,slot_type=compoundStatement}
            |___Token:{ {id=502,slot_type=LeftBrace}
            |___(?) {id=503,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=506,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=777,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=778,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=818,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=779,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=782,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=813,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=784,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=785,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=786,slot_type=Assign}
            |       |   |               |___postfixExpression {id=803,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |                   |___Token:init {id=810,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |___(*) {id=805,slot_type=kleene_star__postfixExpression_2}
            |       |   |                       |___aux_rule__postfixExpression_11 {id=807,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |                           |___Token:( {id=808,slot_type=LeftParen}
            |       |   |                           |___Token:) {id=809,slot_type=RightParen}
            |       |   |___Token:; {id=780,slot_type=Semi}
            |       |___statement {id=605,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=606,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=674,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=677,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=678,slot_type=For}
            |       |   |       |   |___Token:( {id=679,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=680,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=740,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=741,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=775,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=742,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=745,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=771,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=747,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=748,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=749,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=768,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=743,slot_type=Semi}
            |       |   |       |       |___(?) {id=682,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=716,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=738,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=718,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=719,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=730,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=729,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=683,slot_type=Semi}
            |       |   |       |       |___(?) {id=684,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=701,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=706,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=703,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=705,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=676,slot_type=RightParen}
            |       |   |___expressionStatement {id=608,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=609,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=612,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=613,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=642,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___postfixExpression {id=647,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |       |       |       |   |___Token:b {id=673,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |   |___(*) {id=649,slot_type=kleene_star__postfixExpression_2}
            |       |       |       |       |       |___aux_rule__postfixExpression_10 {id=651,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |       |       |       |           |___Token:[ {id=652,slot_type=LeftBracket}
            |       |       |       |       |           |___Token:i {id=672,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |           |___Token:] {id=654,slot_type=RightBracket}
            |       |       |       |       |___Token:= {id=645,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=623,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=641,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=625,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=626,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:- {id=635,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |       |                   |___Token:i {id=634,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |___Token:; {id=610,slot_type=Semi}
            |       |___expressionStatement {id=512,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=513,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=531,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=604,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=533,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=535,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=536,slot_type=LeftParen}
            |           |               |___(?) {id=537,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=539,slot_type=expression}
            |           |               |       |___(+) {id=602,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=603,slot_type=StringLiteral}
            |           |               |       |___(*) {id=541,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=542,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=543,slot_type=Comma}
            |           |               |               |___postfixExpression {id=559,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=585,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=561,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=563,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=564,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=584,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=566,slot_type=RightBracket}
            |           |               |___Token:) {id=538,slot_type=RightParen}
            |           |___Token:; {id=514,slot_type=Semi}
            |___Token:} {id=504,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 492, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@3
    --file: t.c--
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 492
------------------------------------------------------------


=================Reducing node 498, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=498}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                       ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                       ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                        ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
                        ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
      length a = init();
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
      length a = init();
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 498
------------------------------------------------------------


=================Reducing node 501, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 501
------------------------------------------------------------


=================Reducing node 503, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 503
------------------------------------------------------------


=================Reducing node 506, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=506}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 506
------------------------------------------------------------


=================Reducing node 605, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=605}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                            ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
                            ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
           int i = 0;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
           int i = 0;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 605
------------------------------------------------------------


=================Reducing node 606, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__statement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 606
------------------------------------------------------------


=================Reducing node 674, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=674}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 674
------------------------------------------------------------


=================Reducing node 677, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 677
------------------------------------------------------------


=================Reducing node 680, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 680
------------------------------------------------------------


=================Reducing node 512, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=512}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 512
------------------------------------------------------------


=================Reducing node 833, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=833}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                ;
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                ;
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 833
------------------------------------------------------------


=================Reducing node 608, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 608
------------------------------------------------------------


=================Reducing node 513, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 513
------------------------------------------------------------


=================Reducing node 531, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=531}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d"       ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d"       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d", b[6] ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d", b[6] ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 531
------------------------------------------------------------


=================Reducing node 609, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 609
------------------------------------------------------------


=================Reducing node 612, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=612}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b           ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b           ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                   i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
                   i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i]        ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i]        ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 612
------------------------------------------------------------


=================Reducing node 533, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 533
------------------------------------------------------------


=================Reducing node 535, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=535}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 535
------------------------------------------------------------


=================Reducing node 777, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=777}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
                       ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
                       ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 777
------------------------------------------------------------


=================Reducing node 885, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=885}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
                 ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
                 ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 885
------------------------------------------------------------


=================Reducing node 537, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(          );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(          );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 537
------------------------------------------------------------


=================Reducing node 539, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=539}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 539
------------------------------------------------------------


=================Reducing node 836, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 836
------------------------------------------------------------


=================Reducing node 779, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length           ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length           ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 779
------------------------------------------------------------


=================Reducing node 782, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=782}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length     init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length     init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 782
------------------------------------------------------------


=================Reducing node 740, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (         ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (         ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 740
------------------------------------------------------------


=================Reducing node 613, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 613
------------------------------------------------------------


=================Reducing node 642, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=642}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 642
------------------------------------------------------------


=================Reducing node 541, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 541
------------------------------------------------------------


=================Reducing node 542, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=542}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 542
------------------------------------------------------------


=================Reducing node 928, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=928}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                      ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                      ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 928
------------------------------------------------------------


=================Reducing node 887, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length       ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length       ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 887
------------------------------------------------------------


=================Reducing node 892, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=892}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 892
------------------------------------------------------------


=================Reducing node 784, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a         ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 784
------------------------------------------------------------


=================Reducing node 785, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=785}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 785
------------------------------------------------------------


=================Reducing node 647, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
          i  = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
          i  = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 647
------------------------------------------------------------


=================Reducing node 559, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d",   6 );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d",   6 );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 559
------------------------------------------------------------


=================Reducing node 929, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@2
    --file: t.c--
    #include <stdio.h>
                length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
            int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
            int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 929
------------------------------------------------------------


=================Reducing node 894, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 894
------------------------------------------------------------


=================Reducing node 896, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=896}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 896
------------------------------------------------------------


=================Reducing node 870, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 870
------------------------------------------------------------


=================Reducing node 838, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 838
------------------------------------------------------------


=================Reducing node 841, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=841}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 841
------------------------------------------------------------


=================Reducing node 845, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
                ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
                ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 845
------------------------------------------------------------


=================Reducing node 819, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 819
------------------------------------------------------------


=================Reducing node 803, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 803
------------------------------------------------------------


=================Reducing node 742, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int      ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int      ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 742
------------------------------------------------------------


=================Reducing node 745, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=745}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 745
------------------------------------------------------------


=================Reducing node 682, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;       ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;       ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 682
------------------------------------------------------------


=================Reducing node 716, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=716}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;     10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0;     10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 716
------------------------------------------------------------


=================Reducing node 649, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 649
------------------------------------------------------------


=================Reducing node 651, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=651}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 651
------------------------------------------------------------


=================Reducing node 623, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] =     i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] =     i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 623
------------------------------------------------------------


=================Reducing node 561, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 561
------------------------------------------------------------


=================Reducing node 563, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=563}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 563
------------------------------------------------------------


=================Reducing node 872, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init   {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 872
------------------------------------------------------------


=================Reducing node 874, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=874}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 874
------------------------------------------------------------


=================Reducing node 848, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 848
------------------------------------------------------------


=================Reducing node 821, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main   {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 821
------------------------------------------------------------


=================Reducing node 823, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=823}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 823
------------------------------------------------------------


=================Reducing node 805, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init  ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 805
------------------------------------------------------------


=================Reducing node 807, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=807}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 807
------------------------------------------------------------


=================Reducing node 747, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 747
------------------------------------------------------------


=================Reducing node 748, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=748}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 748
------------------------------------------------------------


=================Reducing node 718, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__relationalExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 718
------------------------------------------------------------


=================Reducing node 719, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=719}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 719
------------------------------------------------------------


=================Reducing node 684, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10;    )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10;    )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 684
------------------------------------------------------------


=================Reducing node 701, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=701}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 701
------------------------------------------------------------


=================Reducing node 625, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 625
------------------------------------------------------------


=================Reducing node 626, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=626}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 626
------------------------------------------------------------


=================Reducing node 942, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 942
------------------------------------------------------------


=================Reducing node 941, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 941
------------------------------------------------------------


=================Reducing node 940, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 940
------------------------------------------------------------


=================Reducing node 937, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 937
------------------------------------------------------------


=================Reducing node 930, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 930
------------------------------------------------------------


=================Reducing node 921, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 921
------------------------------------------------------------


=================Reducing node 902, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__directDeclarator_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 902
------------------------------------------------------------


=================Reducing node 920, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 920
------------------------------------------------------------


=================Reducing node 899, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 899
------------------------------------------------------------


=================Reducing node 897, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 897
------------------------------------------------------------


=================Reducing node 888, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 888
------------------------------------------------------------


=================Reducing node 886, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 886
------------------------------------------------------------


=================Reducing node 926, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 926
------------------------------------------------------------


=================Reducing node 878, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 878
------------------------------------------------------------


=================Reducing node 877, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 877
------------------------------------------------------------


=================Reducing node 875, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 875
------------------------------------------------------------


=================Reducing node 850, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return    ;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 850
------------------------------------------------------------


=================Reducing node 869, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 869
------------------------------------------------------------


=================Reducing node 849, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 849
------------------------------------------------------------


=================Reducing node 847, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 847
------------------------------------------------------------


=================Reducing node 839, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 839
------------------------------------------------------------


=================Reducing node 837, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 837
------------------------------------------------------------


=================Reducing node 834, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
        init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
        init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 834
------------------------------------------------------------


=================Reducing node 879, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=879}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 879
------------------------------------------------------------


=================Reducing node 883, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 883
------------------------------------------------------------


=================Reducing node 827, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 827
------------------------------------------------------------


=================Reducing node 826, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 826
------------------------------------------------------------


=================Reducing node 824, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 824
------------------------------------------------------------


=================Reducing node 813, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 813
------------------------------------------------------------


=================Reducing node 810, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 810
------------------------------------------------------------


=================Reducing node 809, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 809
------------------------------------------------------------


=================Reducing node 808, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 808
------------------------------------------------------------


=================Reducing node 786, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 786
------------------------------------------------------------


=================Reducing node 780, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 780
------------------------------------------------------------


=================Reducing node 778, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 778
------------------------------------------------------------


=================Reducing node 818, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 818
------------------------------------------------------------


=================Reducing node 771, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 771
------------------------------------------------------------


=================Reducing node 768, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 768
------------------------------------------------------------


=================Reducing node 749, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 749
------------------------------------------------------------


=================Reducing node 743, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 743
------------------------------------------------------------


=================Reducing node 741, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 741
------------------------------------------------------------


=================Reducing node 775, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 775
------------------------------------------------------------


=================Reducing node 738, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 738
------------------------------------------------------------


=================Reducing node 730, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 730
------------------------------------------------------------


=================Reducing node 729, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 729
------------------------------------------------------------


=================Reducing node 706, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 706
------------------------------------------------------------


=================Reducing node 703, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 703
------------------------------------------------------------


=================Reducing node 705, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 705
------------------------------------------------------------


=================Reducing node 683, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 683
------------------------------------------------------------


=================Reducing node 679, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 679
------------------------------------------------------------


=================Reducing node 678, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 678
------------------------------------------------------------


=================Reducing node 676, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 676
------------------------------------------------------------


=================Reducing node 673, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 673
------------------------------------------------------------


=================Reducing node 672, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 672
------------------------------------------------------------


=================Reducing node 654, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 654
------------------------------------------------------------


=================Reducing node 652, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 652
------------------------------------------------------------


=================Reducing node 645, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 645
------------------------------------------------------------


=================Reducing node 641, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 641
------------------------------------------------------------


=================Reducing node 635, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 635
------------------------------------------------------------


=================Reducing node 634, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 634
------------------------------------------------------------


=================Reducing node 610, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 610
------------------------------------------------------------


=================Reducing node 604, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 604
------------------------------------------------------------


=================Reducing node 602, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 602
------------------------------------------------------------


=================Reducing node 603, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 603
------------------------------------------------------------


=================Reducing node 585, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 585
------------------------------------------------------------


=================Reducing node 584, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 584
------------------------------------------------------------


=================Reducing node 566, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 566
------------------------------------------------------------


=================Reducing node 564, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 564
------------------------------------------------------------


=================Reducing node 543, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 543
------------------------------------------------------------


=================Reducing node 538, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 538
------------------------------------------------------------


=================Reducing node 536, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 536
------------------------------------------------------------


=================Reducing node 514, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 514
------------------------------------------------------------


=================Reducing node 504, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 504
------------------------------------------------------------


=================Reducing node 502, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 502
------------------------------------------------------------


=================Reducing node 499, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
        main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
        main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 499
------------------------------------------------------------


=================Reducing node 828, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=828}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 828
------------------------------------------------------------


=================Reducing node 832, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 832
------------------------------------------------------------


=Fixpoint iteration 3. Reducer: llm_based_function_inlining_reducer

The spar-tree is the following.
translationUnit {id=491,slot_type=translationUnit}
|___(+) {id=492,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=942,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=928,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=929,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=941,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=940,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=937,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=930,slot_type=Semi}
    |___aux_rule__declaration_3 {id=885,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=886,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=926,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=887,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=892,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=921,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=894,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=896,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=897,slot_type=LeftBracket}
    |   |               |___(?) {id=902,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=920,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=899,slot_type=RightBracket}
    |   |___Token:; {id=888,slot_type=Semi}
    |___functionDefinition {id=833,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=834,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=879,slot_type=declarationSpecifiers}
    |   |       |___Token:int {id=883,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___directDeclarator {id=870,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:init {id=878,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=872,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=874,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=875,slot_type=LeftParen}
    |   |           |___Token:) {id=877,slot_type=RightParen}
    |   |___compoundStatement {id=836,slot_type=compoundStatement}
    |       |___Token:{ {id=837,slot_type=LeftBrace}
    |       |___(?) {id=838,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=841,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___jumpStatement {id=845,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
    |       |           |___aux_rule__jumpStatement_4 {id=848,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
    |       |           |   |___Token:return {id=849,slot_type=Return}
    |       |           |   |___(?) {id=850,slot_type=optional__postfixExpression_1}
    |       |           |       |___Token:100 {id=869,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |       |           |___Token:; {id=847,slot_type=Semi}
    |       |___Token:} {id=839,slot_type=RightBrace}
    |___functionDefinition {id=498,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=499,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=828,slot_type=declarationSpecifiers}
        |       |___Token:int {id=832,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=819,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=827,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=821,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=823,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=824,slot_type=LeftParen}
        |           |___Token:) {id=826,slot_type=RightParen}
        |___compoundStatement {id=501,slot_type=compoundStatement}
            |___Token:{ {id=502,slot_type=LeftBrace}
            |___(?) {id=503,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=506,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=777,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=778,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=818,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=779,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=782,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=813,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=784,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=785,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=786,slot_type=Assign}
            |       |   |               |___postfixExpression {id=803,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |                   |___Token:init {id=810,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |                   |___(*) {id=805,slot_type=kleene_star__postfixExpression_2}
            |       |   |                       |___aux_rule__postfixExpression_11 {id=807,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |       |   |                           |___Token:( {id=808,slot_type=LeftParen}
            |       |   |                           |___Token:) {id=809,slot_type=RightParen}
            |       |   |___Token:; {id=780,slot_type=Semi}
            |       |___statement {id=605,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=606,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=674,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=677,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=678,slot_type=For}
            |       |   |       |   |___Token:( {id=679,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=680,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=740,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=741,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=775,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=742,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=745,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=771,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=747,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=748,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=749,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=768,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=743,slot_type=Semi}
            |       |   |       |       |___(?) {id=682,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=716,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=738,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=718,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=719,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=730,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=729,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=683,slot_type=Semi}
            |       |   |       |       |___(?) {id=684,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=701,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=706,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=703,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=705,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=676,slot_type=RightParen}
            |       |   |___expressionStatement {id=608,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=609,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=612,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=613,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=642,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___postfixExpression {id=647,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |       |       |       |   |___Token:b {id=673,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |   |___(*) {id=649,slot_type=kleene_star__postfixExpression_2}
            |       |       |       |       |       |___aux_rule__postfixExpression_10 {id=651,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |       |       |       |           |___Token:[ {id=652,slot_type=LeftBracket}
            |       |       |       |       |           |___Token:i {id=672,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |           |___Token:] {id=654,slot_type=RightBracket}
            |       |       |       |       |___Token:= {id=645,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=623,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=641,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=625,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=626,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:- {id=635,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |       |                   |___Token:i {id=634,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |___Token:; {id=610,slot_type=Semi}
            |       |___expressionStatement {id=512,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=513,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=531,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=604,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=533,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=535,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=536,slot_type=LeftParen}
            |           |               |___(?) {id=537,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=539,slot_type=expression}
            |           |               |       |___(+) {id=602,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=603,slot_type=StringLiteral}
            |           |               |       |___(*) {id=541,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=542,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=543,slot_type=Comma}
            |           |               |               |___postfixExpression {id=559,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=585,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=561,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=563,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=564,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=584,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=566,slot_type=RightBracket}
            |           |               |___Token:) {id=538,slot_type=RightParen}
            |           |___Token:; {id=514,slot_type=Semi}
            |___Token:} {id=504,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 491, size=66=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int init() {
      return 100;
    }
    int main() {
      length a = init();
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedFunctionInliningReducer
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 66 -> 55
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 491 from 66 to 55
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 168
------------------------------------------------------------


================The best program is updated.================

token count change 66 -> 55
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 4. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1340,slot_type=translationUnit}
|___(+) {id=1341,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1734,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=1720,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=1721,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=1733,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=1732,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=1729,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=1722,slot_type=Semi}
    |___aux_rule__declaration_3 {id=1677,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=1678,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=1718,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=1679,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=1684,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=1713,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=1686,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=1688,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=1689,slot_type=LeftBracket}
    |   |               |___(?) {id=1694,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=1712,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=1691,slot_type=RightBracket}
    |   |___Token:; {id=1680,slot_type=Semi}
    |___functionDefinition {id=1346,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=1347,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1671,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1675,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1662,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1670,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1664,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1666,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1667,slot_type=LeftParen}
        |           |___Token:) {id=1669,slot_type=RightParen}
        |___compoundStatement {id=1349,slot_type=compoundStatement}
            |___Token:{ {id=1350,slot_type=LeftBrace}
            |___(?) {id=1351,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=1354,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1625,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1626,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=1661,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=1627,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1630,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1656,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1632,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1633,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1634,slot_type=Assign}
            |       |   |               |___Token:100 {id=1653,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1628,slot_type=Semi}
            |       |___statement {id=1453,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=1454,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=1522,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=1525,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=1526,slot_type=For}
            |       |   |       |   |___Token:( {id=1527,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=1528,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=1588,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=1589,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=1623,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=1590,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=1593,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=1619,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=1595,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=1596,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=1597,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=1616,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=1591,slot_type=Semi}
            |       |   |       |       |___(?) {id=1530,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=1564,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=1586,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=1566,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=1567,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=1578,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=1577,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=1531,slot_type=Semi}
            |       |   |       |       |___(?) {id=1532,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=1549,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=1554,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=1551,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=1553,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=1524,slot_type=RightParen}
            |       |   |___expressionStatement {id=1456,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=1457,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=1460,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=1461,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=1490,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___postfixExpression {id=1495,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |       |       |       |   |___Token:b {id=1521,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |   |___(*) {id=1497,slot_type=kleene_star__postfixExpression_2}
            |       |       |       |       |       |___aux_rule__postfixExpression_10 {id=1499,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |       |       |       |           |___Token:[ {id=1500,slot_type=LeftBracket}
            |       |       |       |       |           |___Token:i {id=1520,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |           |___Token:] {id=1502,slot_type=RightBracket}
            |       |       |       |       |___Token:= {id=1493,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=1471,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=1489,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=1473,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=1474,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:- {id=1483,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |       |                   |___Token:i {id=1482,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |___Token:; {id=1458,slot_type=Semi}
            |       |___expressionStatement {id=1360,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=1361,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=1379,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=1452,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=1381,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=1383,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=1384,slot_type=LeftParen}
            |           |               |___(?) {id=1385,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=1387,slot_type=expression}
            |           |               |       |___(+) {id=1450,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=1451,slot_type=StringLiteral}
            |           |               |       |___(*) {id=1389,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=1390,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=1391,slot_type=Comma}
            |           |               |               |___postfixExpression {id=1407,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=1433,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=1409,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=1411,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=1412,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=1432,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=1414,slot_type=RightBracket}
            |           |               |___Token:) {id=1386,slot_type=RightParen}
            |           |___Token:; {id=1362,slot_type=Semi}
            |___Token:} {id=1352,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 1341, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1341
------------------------------------------------------------


================Reducing node 1346, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1346}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                    ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                    ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                        ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                        ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
      length a = 100;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
      length a = 100;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1346
------------------------------------------------------------


================Reducing node 1349, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1349
------------------------------------------------------------


================Reducing node 1351, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1351
------------------------------------------------------------


================Reducing node 1354, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1354}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1354
------------------------------------------------------------


================Reducing node 1453, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1453}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                            ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                            ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
           int i = 0;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
           int i = 0;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1453
------------------------------------------------------------


================Reducing node 1454, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__statement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1454
------------------------------------------------------------


================Reducing node 1522, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1522}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1522
------------------------------------------------------------


================Reducing node 1525, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1525
------------------------------------------------------------


================Reducing node 1528, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1528
------------------------------------------------------------


================Reducing node 1360, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1360}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1360
------------------------------------------------------------


================Reducing node 1456, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1456
------------------------------------------------------------


================Reducing node 1361, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1361
------------------------------------------------------------


================Reducing node 1379, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1379}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d"       ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d"       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d", b[6] ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
             "%d", b[6] ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1379
------------------------------------------------------------


================Reducing node 1457, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
                    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1457
------------------------------------------------------------


================Reducing node 1460, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1460}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
               a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
               a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b           ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b           ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
                   i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
                   i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i]        ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i]        ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1460
------------------------------------------------------------


================Reducing node 1381, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf            ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1381
------------------------------------------------------------


================Reducing node 1383, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1383}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1383
------------------------------------------------------------


================Reducing node 1677, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1677}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
                 ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
                 ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1677
------------------------------------------------------------


================Reducing node 1385, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(          );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(          );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1385
------------------------------------------------------------


================Reducing node 1387, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1387}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf(      b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1387
------------------------------------------------------------


================Reducing node 1625, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1625}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
                    ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
                    ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1625
------------------------------------------------------------


================Reducing node 1588, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (         ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (         ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1588
------------------------------------------------------------


================Reducing node 1461, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
               a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1461
------------------------------------------------------------


================Reducing node 1490, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1490}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1490
------------------------------------------------------------


================Reducing node 1389, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d"      );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1389
------------------------------------------------------------


================Reducing node 1390, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1390}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1390
------------------------------------------------------------


================Reducing node 1720, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1720}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                      ;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                      ;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1720
------------------------------------------------------------


================Reducing node 1679, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length       ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length       ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1679
------------------------------------------------------------


================Reducing node 1684, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1684}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1684
------------------------------------------------------------


================Reducing node 1495, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
          i  = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
          i  = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1495
------------------------------------------------------------


================Reducing node 1407, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d",   6 );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d",   6 );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1407
------------------------------------------------------------


================Reducing node 1721, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@2
    --file: t.c--
    #include <stdio.h>
                length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
            int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
            int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1721
------------------------------------------------------------


================Reducing node 1686, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1686
------------------------------------------------------------


================Reducing node 1688, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1688}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1688
------------------------------------------------------------


================Reducing node 1662, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1662
------------------------------------------------------------


================Reducing node 1627, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length        ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length        ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1627
------------------------------------------------------------


================Reducing node 1630, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1630}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1630
------------------------------------------------------------


================Reducing node 1590, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int      ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int      ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1590
------------------------------------------------------------


================Reducing node 1593, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1593}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1593
------------------------------------------------------------


================Reducing node 1530, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0;       ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0;       ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1530
------------------------------------------------------------


================Reducing node 1564, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1564}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0;     10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0;     10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1564
------------------------------------------------------------


================Reducing node 1497, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b    = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1497
------------------------------------------------------------


================Reducing node 1499, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1499}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1499
------------------------------------------------------------


================Reducing node 1471, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] =     i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] =     i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1471
------------------------------------------------------------


================Reducing node 1409, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1409
------------------------------------------------------------


================Reducing node 1411, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1411}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1411
------------------------------------------------------------


================Reducing node 1664, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1664
------------------------------------------------------------


================Reducing node 1666, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1666}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1666
------------------------------------------------------------


================Reducing node 1632, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1632
------------------------------------------------------------


================Reducing node 1633, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1633}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1633
------------------------------------------------------------


================Reducing node 1595, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i    ; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1595
------------------------------------------------------------


================Reducing node 1596, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1596}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1596
------------------------------------------------------------


================Reducing node 1566, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__relationalExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i     ; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1566
------------------------------------------------------------


================Reducing node 1567, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1567}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1567
------------------------------------------------------------


================Reducing node 1532, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10;    )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10;    )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1532
------------------------------------------------------------


================Reducing node 1549, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1549}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1549
------------------------------------------------------------


================Reducing node 1473, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1473
------------------------------------------------------------


================Reducing node 1474, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1474}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1474
------------------------------------------------------------


================Reducing node 1734, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1734
------------------------------------------------------------


================Reducing node 1733, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1733
------------------------------------------------------------


================Reducing node 1732, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1732
------------------------------------------------------------


================Reducing node 1729, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1729
------------------------------------------------------------


================Reducing node 1722, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1722
------------------------------------------------------------


================Reducing node 1713, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1713
------------------------------------------------------------


================Reducing node 1694, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__directDeclarator_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1694
------------------------------------------------------------


================Reducing node 1712, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1712
------------------------------------------------------------


================Reducing node 1691, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1691
------------------------------------------------------------


================Reducing node 1689, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1689
------------------------------------------------------------


================Reducing node 1680, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1680
------------------------------------------------------------


================Reducing node 1678, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1678
------------------------------------------------------------


================Reducing node 1718, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1718
------------------------------------------------------------


================Reducing node 1670, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1670
------------------------------------------------------------


================Reducing node 1669, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1669
------------------------------------------------------------


================Reducing node 1667, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1667
------------------------------------------------------------


================Reducing node 1656, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1656
------------------------------------------------------------


================Reducing node 1653, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1653
------------------------------------------------------------


================Reducing node 1634, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1634
------------------------------------------------------------


================Reducing node 1628, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1628
------------------------------------------------------------


================Reducing node 1626, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1626
------------------------------------------------------------


================Reducing node 1661, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1661
------------------------------------------------------------


================Reducing node 1619, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1619
------------------------------------------------------------


================Reducing node 1616, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1616
------------------------------------------------------------


================Reducing node 1597, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1597
------------------------------------------------------------


================Reducing node 1591, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1591
------------------------------------------------------------


================Reducing node 1589, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1589
------------------------------------------------------------


================Reducing node 1623, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1623
------------------------------------------------------------


================Reducing node 1586, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1586
------------------------------------------------------------


================Reducing node 1578, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1578
------------------------------------------------------------


================Reducing node 1577, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1577
------------------------------------------------------------


================Reducing node 1554, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1554
------------------------------------------------------------


================Reducing node 1551, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i  )
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1551
------------------------------------------------------------


================Reducing node 1553, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1553
------------------------------------------------------------


================Reducing node 1531, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1531
------------------------------------------------------------


================Reducing node 1527, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1527
------------------------------------------------------------


================Reducing node 1526, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1526
------------------------------------------------------------


================Reducing node 1524, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1524
------------------------------------------------------------


================Reducing node 1521, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1521
------------------------------------------------------------


================Reducing node 1520, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1520
------------------------------------------------------------


================Reducing node 1502, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1502
------------------------------------------------------------


================Reducing node 1500, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1500
------------------------------------------------------------


================Reducing node 1493, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1493
------------------------------------------------------------


================Reducing node 1489, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1489
------------------------------------------------------------


================Reducing node 1483, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1483
------------------------------------------------------------


================Reducing node 1482, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1482
------------------------------------------------------------


================Reducing node 1458, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1458
------------------------------------------------------------


================Reducing node 1452, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1452
------------------------------------------------------------


================Reducing node 1450, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1450
------------------------------------------------------------


================Reducing node 1451, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1451
------------------------------------------------------------


================Reducing node 1433, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1433
------------------------------------------------------------


================Reducing node 1432, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1432
------------------------------------------------------------


================Reducing node 1414, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1414
------------------------------------------------------------


================Reducing node 1412, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1412
------------------------------------------------------------


================Reducing node 1391, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1391
------------------------------------------------------------


================Reducing node 1386, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1386
------------------------------------------------------------


================Reducing node 1384, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1384
------------------------------------------------------------


================Reducing node 1362, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1362
------------------------------------------------------------


================Reducing node 1352, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1352
------------------------------------------------------------


================Reducing node 1350, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1350
------------------------------------------------------------


================Reducing node 1347, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
        main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
        main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1347
------------------------------------------------------------


================Reducing node 1671, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1671}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1671
------------------------------------------------------------


================Reducing node 1675, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1675
------------------------------------------------------------


=Fixpoint iteration 5. Reducer: llm_based_loop_unrolling_reducer

The spar-tree is the following.
translationUnit {id=1340,slot_type=translationUnit}
|___(+) {id=1341,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1734,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=1720,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=1721,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=1733,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=1732,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=1729,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=1722,slot_type=Semi}
    |___aux_rule__declaration_3 {id=1677,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=1678,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=1718,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=1679,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=1684,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=1713,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=1686,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=1688,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=1689,slot_type=LeftBracket}
    |   |               |___(?) {id=1694,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=1712,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=1691,slot_type=RightBracket}
    |   |___Token:; {id=1680,slot_type=Semi}
    |___functionDefinition {id=1346,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=1347,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1671,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1675,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1662,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1670,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1664,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1666,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1667,slot_type=LeftParen}
        |           |___Token:) {id=1669,slot_type=RightParen}
        |___compoundStatement {id=1349,slot_type=compoundStatement}
            |___Token:{ {id=1350,slot_type=LeftBrace}
            |___(?) {id=1351,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=1354,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1625,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1626,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=1661,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=1627,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1630,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1656,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1632,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1633,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1634,slot_type=Assign}
            |       |   |               |___Token:100 {id=1653,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1628,slot_type=Semi}
            |       |___statement {id=1453,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=1454,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=1522,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=1525,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=1526,slot_type=For}
            |       |   |       |   |___Token:( {id=1527,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=1528,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=1588,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=1589,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=1623,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=1590,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=1593,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=1619,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=1595,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=1596,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=1597,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=1616,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=1591,slot_type=Semi}
            |       |   |       |       |___(?) {id=1530,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=1564,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=1586,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=1566,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=1567,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=1578,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=1577,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=1531,slot_type=Semi}
            |       |   |       |       |___(?) {id=1532,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=1549,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=1554,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=1551,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=1553,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=1524,slot_type=RightParen}
            |       |   |___expressionStatement {id=1456,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=1457,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=1460,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=1461,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=1490,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___postfixExpression {id=1495,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |       |       |       |   |___Token:b {id=1521,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |   |___(*) {id=1497,slot_type=kleene_star__postfixExpression_2}
            |       |       |       |       |       |___aux_rule__postfixExpression_10 {id=1499,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |       |       |       |           |___Token:[ {id=1500,slot_type=LeftBracket}
            |       |       |       |       |           |___Token:i {id=1520,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |           |___Token:] {id=1502,slot_type=RightBracket}
            |       |       |       |       |___Token:= {id=1493,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=1471,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=1489,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=1473,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=1474,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:- {id=1483,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |       |                   |___Token:i {id=1482,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |___Token:; {id=1458,slot_type=Semi}
            |       |___expressionStatement {id=1360,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=1361,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=1379,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=1452,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=1381,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=1383,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=1384,slot_type=LeftParen}
            |           |               |___(?) {id=1385,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=1387,slot_type=expression}
            |           |               |       |___(+) {id=1450,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=1451,slot_type=StringLiteral}
            |           |               |       |___(*) {id=1389,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=1390,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=1391,slot_type=Comma}
            |           |               |               |___postfixExpression {id=1407,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=1433,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=1409,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=1411,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=1412,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=1432,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=1414,slot_type=RightBracket}
            |           |               |___Token:) {id=1386,slot_type=RightParen}
            |           |___Token:; {id=1362,slot_type=Semi}
            |___Token:} {id=1352,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 1340, size=55=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      for (int i = 0; i < 10; i++)
        b[i] = a - i;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedLoopUnrollingReducer
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 55 -> 122
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1340
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 79
------------------------------------------------------------


================The best program is updated.================

token count change 55 -> 122
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 6. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=2650,slot_type=translationUnit}
|___(+) {id=2651,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=3562,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=3548,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=3549,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=3561,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=3560,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=3557,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=3550,slot_type=Semi}
    |___aux_rule__declaration_3 {id=3505,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=3506,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=3546,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=3507,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=3512,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=3541,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=3514,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=3516,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=3517,slot_type=LeftBracket}
    |   |               |___(?) {id=3522,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=3540,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=3519,slot_type=RightBracket}
    |   |___Token:; {id=3508,slot_type=Semi}
    |___functionDefinition {id=2656,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=2657,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=3499,slot_type=declarationSpecifiers}
        |       |___Token:int {id=3503,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=3490,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=3498,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=3492,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=3494,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=3495,slot_type=LeftParen}
        |           |___Token:) {id=3497,slot_type=RightParen}
        |___compoundStatement {id=2659,slot_type=compoundStatement}
            |___Token:{ {id=2660,slot_type=LeftBrace}
            |___(?) {id=2661,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=2664,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=3453,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=3454,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=3489,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=3455,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=3458,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=3484,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=3460,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=3461,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=3462,slot_type=Assign}
            |       |   |               |___Token:100 {id=3481,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3456,slot_type=Semi}
            |       |___expressionStatement {id=3386,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3387,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3390,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3391,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3420,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3425,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3451,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3427,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3429,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3430,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:0 {id=3450,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3432,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3423,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3401,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3419,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3403,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3404,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3413,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:0 {id=3412,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3388,slot_type=Semi}
            |       |___expressionStatement {id=3318,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3319,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3322,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3323,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3352,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3357,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3383,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3359,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3361,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3362,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:1 {id=3382,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3364,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3355,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3333,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3351,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3335,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3336,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3345,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:1 {id=3344,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3320,slot_type=Semi}
            |       |___expressionStatement {id=3250,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3251,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3254,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3255,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3284,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3289,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3315,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3291,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3293,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3294,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:2 {id=3314,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3296,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3287,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3265,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3283,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3267,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3268,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3277,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:2 {id=3276,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3252,slot_type=Semi}
            |       |___expressionStatement {id=3182,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3183,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3186,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3187,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3216,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3221,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3247,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3223,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3225,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3226,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:3 {id=3246,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3228,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3219,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3197,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3215,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3199,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3200,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3209,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:3 {id=3208,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3184,slot_type=Semi}
            |       |___expressionStatement {id=3114,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3115,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3118,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3119,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3148,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3153,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3179,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3155,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3157,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3158,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:4 {id=3178,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3160,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3151,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3129,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3147,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3131,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3132,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3141,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:4 {id=3140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3116,slot_type=Semi}
            |       |___expressionStatement {id=3046,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3047,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3050,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3051,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3080,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3085,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3111,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3087,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3089,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3090,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:5 {id=3110,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3092,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3083,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3061,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3079,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3063,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3064,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3073,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:5 {id=3072,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3048,slot_type=Semi}
            |       |___expressionStatement {id=2978,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=2979,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=2982,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=2983,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3012,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3017,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3043,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3019,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3021,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3022,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:6 {id=3042,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3024,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3015,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=2993,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3011,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=2995,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=2996,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3005,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:6 {id=3004,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=2980,slot_type=Semi}
            |       |___expressionStatement {id=2910,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=2911,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=2914,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=2915,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=2944,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=2949,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=2975,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=2951,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=2953,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=2954,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:7 {id=2974,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=2956,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=2947,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=2925,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=2943,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=2927,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=2928,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=2937,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:7 {id=2936,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=2912,slot_type=Semi}
            |       |___expressionStatement {id=2842,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=2843,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=2846,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=2847,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=2876,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=2881,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=2907,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=2883,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=2885,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=2886,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:8 {id=2906,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=2888,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=2879,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=2857,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=2875,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=2859,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=2860,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=2869,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:8 {id=2868,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=2844,slot_type=Semi}
            |       |___expressionStatement {id=2774,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=2775,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=2778,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=2779,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=2808,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=2813,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=2839,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=2815,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=2817,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=2818,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:9 {id=2838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=2820,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=2811,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=2789,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=2807,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=2791,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=2792,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=2801,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:9 {id=2800,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=2776,slot_type=Semi}
            |       |___expressionStatement {id=2679,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=2680,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=2698,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=2771,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=2700,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=2702,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=2703,slot_type=LeftParen}
            |           |               |___(?) {id=2704,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=2706,slot_type=expression}
            |           |               |       |___(+) {id=2769,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=2770,slot_type=StringLiteral}
            |           |               |       |___(*) {id=2708,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=2709,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=2710,slot_type=Comma}
            |           |               |               |___postfixExpression {id=2726,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=2752,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=2728,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=2730,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=2731,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=2751,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=2733,slot_type=RightBracket}
            |           |               |___Token:) {id=2705,slot_type=RightParen}
            |           |___Token:; {id=2681,slot_type=Semi}
            |___Token:} {id=2662,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 2651, size=122================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2651
------------------------------------------------------------


================Reducing node 2656, size=122================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2656}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                    ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                    ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
                        ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
                        ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
      length a = 100;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
      length a = 100;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2656
------------------------------------------------------------


================Reducing node 2659, size=122================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2659
------------------------------------------------------------


================Reducing node 2661, size=122================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2661
------------------------------------------------------------


================Reducing node 2664, size=122================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2664}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@6
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      b[8] = a - 8;
      b[9] = a - 9;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      b[7] = a - 7;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 26
------------------------------------------------------------


================The best program is updated.================

token count change 122 -> 104
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


================The best program is updated.================

token count change 104 -> 95
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[5] = a - 5;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[2] = a - 2;
      b[3] = a - 3;
      b[4] = a - 4;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 3
------------------------------------------------------------


================The best program is updated.================

token count change 95 -> 86
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@6
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[1] = a - 1;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


================The best program is updated.================

token count change 86 -> 59
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[0] = a - 0;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


================The best program is updated.================

token count change 59 -> 50
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 2
------------------------------------------------------------


================The best program is updated.================

token count change 50 -> 41
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 2664 from 122 to 41
------------------------------------------------------------


================Reducing node 2679, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2679
------------------------------------------------------------


================Reducing node 2978, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                  ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                  ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2978
------------------------------------------------------------


================Reducing node 2680, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2680
------------------------------------------------------------


================Reducing node 2698, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2698}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf            ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
             "%d"       ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
             "%d"       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
             "%d", b[6] ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
             "%d", b[6] ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2698
------------------------------------------------------------


================Reducing node 2979, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                  ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                  ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2979
------------------------------------------------------------


================Reducing node 2982, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2982}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
             a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
             a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b           ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b           ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
                 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
             a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
             a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6]        ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6]        ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2982
------------------------------------------------------------


================Reducing node 2700, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf            ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2700
------------------------------------------------------------


================Reducing node 2702, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2702}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2702
------------------------------------------------------------


================Reducing node 3505, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
                 ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
                 ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3505
------------------------------------------------------------


================Reducing node 2704, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf(          );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf(          );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2704
------------------------------------------------------------


================Reducing node 2706, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2706}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf(      b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf(      b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf(      b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf(      b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2706
------------------------------------------------------------


================Reducing node 3453, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3453}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
                    ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
                    ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3453
------------------------------------------------------------


================Reducing node 2983, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
             a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
             a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2983
------------------------------------------------------------


================Reducing node 3012, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3012}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3012
------------------------------------------------------------


================Reducing node 2708, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2708
------------------------------------------------------------


================Reducing node 2709, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2709}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2709
------------------------------------------------------------


================Reducing node 3548, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                      ;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                      ;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3548
------------------------------------------------------------


================Reducing node 3507, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length       ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length       ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3507
------------------------------------------------------------


================Reducing node 3512, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3512}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3512
------------------------------------------------------------


================Reducing node 3017, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
        6  = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
        6  = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3017
------------------------------------------------------------


================Reducing node 2726, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d",   6 );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d",   6 );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2726
------------------------------------------------------------


================Reducing node 3549, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef           ;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int       ;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@2
    --file: t.c--
    #include <stdio.h>
                length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef     length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
            int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
            int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3549
------------------------------------------------------------


================Reducing node 3514, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b     ;
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3514
------------------------------------------------------------


================Reducing node 3516, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3516}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3516
------------------------------------------------------------


================Reducing node 3490, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3490
------------------------------------------------------------


================Reducing node 3455, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length        ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length        ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3455
------------------------------------------------------------


================Reducing node 3458, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3458}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3458
------------------------------------------------------------


================Reducing node 3019, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3019
------------------------------------------------------------


================Reducing node 3021, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3021}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3021
------------------------------------------------------------


================Reducing node 2993, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] =     6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] =     6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2993
------------------------------------------------------------


================Reducing node 2728, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2728
------------------------------------------------------------


================Reducing node 2730, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2730}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2730
------------------------------------------------------------


================Reducing node 3492, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main   {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3492
------------------------------------------------------------


================Reducing node 3494, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3494}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3494
------------------------------------------------------------


================Reducing node 3460, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3460
------------------------------------------------------------


================Reducing node 3461, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3461}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3461
------------------------------------------------------------


================Reducing node 2995, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2995
------------------------------------------------------------


================Reducing node 2996, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=2996}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2996
------------------------------------------------------------


================Reducing node 3562, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3562
------------------------------------------------------------


================Reducing node 3561, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3561
------------------------------------------------------------


================Reducing node 3560, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3560
------------------------------------------------------------


================Reducing node 3557, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3557
------------------------------------------------------------


================Reducing node 3550, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3550
------------------------------------------------------------


================Reducing node 3541, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3541
------------------------------------------------------------


================Reducing node 3522, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__directDeclarator_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[   ];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3522
------------------------------------------------------------


================Reducing node 3540, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3540
------------------------------------------------------------


================Reducing node 3519, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3519
------------------------------------------------------------


================Reducing node 3517, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3517
------------------------------------------------------------


================Reducing node 3508, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3508
------------------------------------------------------------


================Reducing node 3506, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3506
------------------------------------------------------------


================Reducing node 3546, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3546
------------------------------------------------------------


================Reducing node 3498, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3498
------------------------------------------------------------


================Reducing node 3497, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3497
------------------------------------------------------------


================Reducing node 3495, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3495
------------------------------------------------------------


================Reducing node 3484, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3484
------------------------------------------------------------


================Reducing node 3481, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3481
------------------------------------------------------------


================Reducing node 3462, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3462
------------------------------------------------------------


================Reducing node 3456, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3456
------------------------------------------------------------


================Reducing node 3454, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3454
------------------------------------------------------------


================Reducing node 3489, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3489
------------------------------------------------------------


================Reducing node 3043, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3043
------------------------------------------------------------


================Reducing node 3042, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3042
------------------------------------------------------------


================Reducing node 3024, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3024
------------------------------------------------------------


================Reducing node 3022, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3022
------------------------------------------------------------


================Reducing node 3015, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3015
------------------------------------------------------------


================Reducing node 3011, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3011
------------------------------------------------------------


================Reducing node 3005, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3005
------------------------------------------------------------


================Reducing node 3004, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3004
------------------------------------------------------------


================Reducing node 2980, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2980
------------------------------------------------------------


================Reducing node 2771, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2771
------------------------------------------------------------


================Reducing node 2769, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2769
------------------------------------------------------------


================Reducing node 2770, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2770
------------------------------------------------------------


================Reducing node 2752, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2752
------------------------------------------------------------


================Reducing node 2751, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2751
------------------------------------------------------------


================Reducing node 2733, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2733
------------------------------------------------------------


================Reducing node 2731, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2731
------------------------------------------------------------


================Reducing node 2710, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2710
------------------------------------------------------------


================Reducing node 2705, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2705
------------------------------------------------------------


================Reducing node 2703, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2703
------------------------------------------------------------


================Reducing node 2681, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2681
------------------------------------------------------------


================Reducing node 2662, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2662
------------------------------------------------------------


================Reducing node 2660, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2660
------------------------------------------------------------


================Reducing node 2657, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
        main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    length b[100];
        main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2657
------------------------------------------------------------


================Reducing node 3499, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3499}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3499
------------------------------------------------------------


================Reducing node 3503, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3503
------------------------------------------------------------


=Fixpoint iteration 7. Reducer: llm_based_data_type_elimination_reducer

The spar-tree is the following.
translationUnit {id=2650,slot_type=translationUnit}
|___(+) {id=2651,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=3562,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=3548,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=3549,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=3561,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=3560,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=3557,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=3550,slot_type=Semi}
    |___aux_rule__declaration_3 {id=3505,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=3506,slot_type=declarationSpecifiers}
    |   |   |___Token:length {id=3546,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___(?) {id=3507,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=3512,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=3541,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=3514,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=3516,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=3517,slot_type=LeftBracket}
    |   |               |___(?) {id=3522,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=3540,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=3519,slot_type=RightBracket}
    |   |___Token:; {id=3508,slot_type=Semi}
    |___functionDefinition {id=2656,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=2657,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=3499,slot_type=declarationSpecifiers}
        |       |___Token:int {id=3503,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=3490,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=3498,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=3492,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=3494,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=3495,slot_type=LeftParen}
        |           |___Token:) {id=3497,slot_type=RightParen}
        |___compoundStatement {id=2659,slot_type=compoundStatement}
            |___Token:{ {id=2660,slot_type=LeftBrace}
            |___(?) {id=2661,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=2664,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=3453,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=3454,slot_type=declarationSpecifiers}
            |       |   |   |___Token:length {id=3489,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=3455,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=3458,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=3484,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=3460,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=3461,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=3462,slot_type=Assign}
            |       |   |               |___Token:100 {id=3481,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3456,slot_type=Semi}
            |       |___expressionStatement {id=2978,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=2979,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=2982,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=2983,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=3012,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=3017,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=3043,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=3019,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=3021,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=3022,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:6 {id=3042,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=3024,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=3015,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=2993,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=3011,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=2995,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=2996,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3005,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:6 {id=3004,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=2980,slot_type=Semi}
            |       |___expressionStatement {id=2679,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=2680,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=2698,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=2771,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=2700,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=2702,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=2703,slot_type=LeftParen}
            |           |               |___(?) {id=2704,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=2706,slot_type=expression}
            |           |               |       |___(+) {id=2769,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=2770,slot_type=StringLiteral}
            |           |               |       |___(*) {id=2708,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=2709,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=2710,slot_type=Comma}
            |           |               |               |___postfixExpression {id=2726,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=2752,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=2728,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=2730,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=2731,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=2751,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=2733,slot_type=RightBracket}
            |           |               |___Token:) {id=2705,slot_type=RightParen}
            |           |___Token:; {id=2681,slot_type=Semi}
            |___Token:} {id=2662,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 2650, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    length b[100];
    int main() {
      length a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedDataTypeEliminationReducer
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 41 -> 41
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2650
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 52
------------------------------------------------------------


================The best program is updated.================

token count change 41 -> 41
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 8. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=3855,slot_type=translationUnit}
|___(+) {id=3856,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4144,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=4130,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=4131,slot_type=declarationSpecifiers}
    |   |   |___Token:typedef {id=4143,slot_type=[declarationSpecifier,Typedef]}
    |   |   |___Token:int {id=4142,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:length {id=4139,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=4132,slot_type=Semi}
    |___aux_rule__declaration_3 {id=4088,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=4089,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=4128,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=4090,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=4095,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=4124,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=4097,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=4099,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=4100,slot_type=LeftBracket}
    |   |               |___(?) {id=4105,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=4123,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=4102,slot_type=RightBracket}
    |   |___Token:; {id=4091,slot_type=Semi}
    |___functionDefinition {id=3861,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=3862,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4082,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4086,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4073,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4081,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4075,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4077,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4078,slot_type=LeftParen}
        |           |___Token:) {id=4080,slot_type=RightParen}
        |___compoundStatement {id=3864,slot_type=compoundStatement}
            |___Token:{ {id=3865,slot_type=LeftBrace}
            |___(?) {id=3866,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=3869,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=4037,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=4038,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=4072,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=4039,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=4042,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=4068,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=4044,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=4045,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=4046,slot_type=Assign}
            |       |   |               |___Token:100 {id=4065,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=4040,slot_type=Semi}
            |       |___expressionStatement {id=3970,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3971,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3974,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3975,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=4004,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=4009,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=4035,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=4011,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=4013,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=4014,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:6 {id=4034,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=4016,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=4007,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3985,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=4003,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3987,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3988,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3997,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:6 {id=3996,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3972,slot_type=Semi}
            |       |___expressionStatement {id=3875,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=3876,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=3894,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=3967,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=3896,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=3898,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=3899,slot_type=LeftParen}
            |           |               |___(?) {id=3900,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=3902,slot_type=expression}
            |           |               |       |___(+) {id=3965,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=3966,slot_type=StringLiteral}
            |           |               |       |___(*) {id=3904,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=3905,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=3906,slot_type=Comma}
            |           |               |               |___postfixExpression {id=3922,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=3948,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=3924,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=3926,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=3927,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=3947,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=3929,slot_type=RightBracket}
            |           |               |___Token:) {id=3901,slot_type=RightParen}
            |           |___Token:; {id=3877,slot_type=Semi}
            |___Token:} {id=3867,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 3856, size=41=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int b[100];
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int b[100];
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    typedef int length;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    typedef int length;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 6
------------------------------------------------------------


================The best program is updated.================

token count change 41 -> 37
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 3856 from 41 to 37
------------------------------------------------------------


================Reducing node 3861, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    int b[100];
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
                 ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
                        ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
                        ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
      int a = 100;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
      int a = 100;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3861
------------------------------------------------------------


================Reducing node 3864, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3864
------------------------------------------------------------


================Reducing node 3866, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3866
------------------------------------------------------------


================Reducing node 3869, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3869}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3869
------------------------------------------------------------


================Reducing node 3875, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3875}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3875
------------------------------------------------------------


================Reducing node 3970, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3970}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
                  ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
                  ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3970
------------------------------------------------------------


================Reducing node 3876, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
                        ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
                        ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3876
------------------------------------------------------------


================Reducing node 3894, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3894}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf            ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
             "%d"       ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
             "%d"       ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
             "%d", b[6] ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
             "%d", b[6] ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3894
------------------------------------------------------------


================Reducing node 3971, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
                  ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
                  ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3971
------------------------------------------------------------


================Reducing node 3974, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3974}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
             a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
             a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b           ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b           ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
                 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
                 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
             a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
             a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6]        ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6]        ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3974
------------------------------------------------------------


================Reducing node 3896, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf            ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf            ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3896
------------------------------------------------------------


================Reducing node 3898, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3898}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3898
------------------------------------------------------------


================Reducing node 4088, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
              ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
              ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4088
------------------------------------------------------------


================Reducing node 3900, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf(          );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf(          );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3900
------------------------------------------------------------


================Reducing node 3902, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3902}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf(      b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf(      b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf(      b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf(      b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3902
------------------------------------------------------------


================Reducing node 4037, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4037}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
                 ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
                 ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4037
------------------------------------------------------------


================Reducing node 3975, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
             a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
             a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3975
------------------------------------------------------------


================Reducing node 4004, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4004}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4004
------------------------------------------------------------


================Reducing node 3904, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d"      );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3904
------------------------------------------------------------


================Reducing node 3905, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3905}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3905
------------------------------------------------------------


================Reducing node 4090, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int       ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int       ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4090
------------------------------------------------------------


================Reducing node 4095, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4095}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b     ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b     ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4095
------------------------------------------------------------


================Reducing node 4009, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
        6  = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
        6  = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4009
------------------------------------------------------------


================Reducing node 3922, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d",   6 );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d",   6 );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3922
------------------------------------------------------------


================Reducing node 4097, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    int b     ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b     ;
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4097
------------------------------------------------------------


================Reducing node 4099, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4099}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4099
------------------------------------------------------------


================Reducing node 4073, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main   {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main   {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4073
------------------------------------------------------------


================Reducing node 4039, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int        ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int        ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4039
------------------------------------------------------------


================Reducing node 4042, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4042}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4042
------------------------------------------------------------


================Reducing node 4011, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b    = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4011
------------------------------------------------------------


================Reducing node 4013, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4013}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4013
------------------------------------------------------------


================Reducing node 3985, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] =     6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] =     6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3985
------------------------------------------------------------


================Reducing node 3924, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3924
------------------------------------------------------------


================Reducing node 3926, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3926}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3926
------------------------------------------------------------


================Reducing node 4075, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main   {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main   {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4075
------------------------------------------------------------


================Reducing node 4077, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4077}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4077
------------------------------------------------------------


================Reducing node 4044, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a      ;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4044
------------------------------------------------------------


================Reducing node 4045, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4045}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4045
------------------------------------------------------------


================Reducing node 3987, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a    ;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3987
------------------------------------------------------------


================Reducing node 3988, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=3988}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3988
------------------------------------------------------------


================Reducing node 4144, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4144
------------------------------------------------------------


================Reducing node 4124, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4124
------------------------------------------------------------


================Reducing node 4105, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__directDeclarator_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[   ];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[   ];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4105
------------------------------------------------------------


================Reducing node 4123, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4123
------------------------------------------------------------


================Reducing node 4102, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4102
------------------------------------------------------------


================Reducing node 4100, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4100
------------------------------------------------------------


================Reducing node 4091, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4091
------------------------------------------------------------


================Reducing node 4089, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4089
------------------------------------------------------------


================Reducing node 4128, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4128
------------------------------------------------------------


================Reducing node 4081, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4081
------------------------------------------------------------


================Reducing node 4080, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4080
------------------------------------------------------------


================Reducing node 4078, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4078
------------------------------------------------------------


================Reducing node 4068, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4068
------------------------------------------------------------


================Reducing node 4065, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4065
------------------------------------------------------------


================Reducing node 4046, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4046
------------------------------------------------------------


================Reducing node 4040, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4040
------------------------------------------------------------


================Reducing node 4038, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4038
------------------------------------------------------------


================Reducing node 4072, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4072
------------------------------------------------------------


================Reducing node 4035, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4035
------------------------------------------------------------


================Reducing node 4034, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4034
------------------------------------------------------------


================Reducing node 4016, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4016
------------------------------------------------------------


================Reducing node 4014, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4014
------------------------------------------------------------


================Reducing node 4007, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4007
------------------------------------------------------------


================Reducing node 4003, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4003
------------------------------------------------------------


================Reducing node 3997, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3997
------------------------------------------------------------


================Reducing node 3996, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3996
------------------------------------------------------------


================Reducing node 3972, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3972
------------------------------------------------------------


================Reducing node 3967, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3967
------------------------------------------------------------


================Reducing node 3965, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3965
------------------------------------------------------------


================Reducing node 3966, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3966
------------------------------------------------------------


================Reducing node 3948, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3948
------------------------------------------------------------


================Reducing node 3947, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3947
------------------------------------------------------------


================Reducing node 3929, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3929
------------------------------------------------------------


================Reducing node 3927, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3927
------------------------------------------------------------


================Reducing node 3906, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3906
------------------------------------------------------------


================Reducing node 3901, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3901
------------------------------------------------------------


================Reducing node 3899, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3899
------------------------------------------------------------


================Reducing node 3877, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3877
------------------------------------------------------------


================Reducing node 3867, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3867
------------------------------------------------------------


================Reducing node 3865, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3865
------------------------------------------------------------


================Reducing node 3862, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b[100];
        main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b[100];
        main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 3862
------------------------------------------------------------


================Reducing node 4082, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4082}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4082
------------------------------------------------------------


================Reducing node 4086, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4086
------------------------------------------------------------


=Fixpoint iteration 9. Reducer: llm_based_data_type_simplification_reducer

The spar-tree is the following.
translationUnit {id=3855,slot_type=translationUnit}
|___(+) {id=3856,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4144,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=4088,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=4089,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=4128,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |___(?) {id=4090,slot_type=optional__declaration_2}
    |   |   |___directDeclarator {id=4095,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator]}
    |   |       |___Token:b {id=4124,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |       |___(*) {id=4097,slot_type=kleene_star__directDeclarator_7}
    |   |           |___aux_rule__directDeclarator_14 {id=4099,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_14]}
    |   |               |___Token:[ {id=4100,slot_type=LeftBracket}
    |   |               |___(?) {id=4105,slot_type=[altnt_block__directDeclarator_10,aux_rule__directDeclarator_18,altnt_block__directDeclarator_13,optional__directDeclarator_3]}
    |   |               |   |___Token:100 {id=4123,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
    |   |               |___Token:] {id=4102,slot_type=RightBracket}
    |   |___Token:; {id=4091,slot_type=Semi}
    |___functionDefinition {id=3861,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=3862,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4082,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4086,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4073,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4081,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4075,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4077,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4078,slot_type=LeftParen}
        |           |___Token:) {id=4080,slot_type=RightParen}
        |___compoundStatement {id=3864,slot_type=compoundStatement}
            |___Token:{ {id=3865,slot_type=LeftBrace}
            |___(?) {id=3866,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=3869,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=4037,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=4038,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=4072,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=4039,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=4042,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=4068,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=4044,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=4045,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=4046,slot_type=Assign}
            |       |   |               |___Token:100 {id=4065,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=4040,slot_type=Semi}
            |       |___expressionStatement {id=3970,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=3971,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=3974,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=3975,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=4004,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___postfixExpression {id=4009,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |       |   |___Token:b {id=4035,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |   |___(*) {id=4011,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |       |       |___aux_rule__postfixExpression_10 {id=4013,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |       |   |       |       |           |___Token:[ {id=4014,slot_type=LeftBracket}
            |       |   |       |       |           |___Token:6 {id=4034,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |           |___Token:] {id=4016,slot_type=RightBracket}
            |       |   |       |       |___Token:= {id=4007,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=3985,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=4003,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=3987,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=3988,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=3997,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:6 {id=3996,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=3972,slot_type=Semi}
            |       |___expressionStatement {id=3875,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=3876,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=3894,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=3967,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=3896,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=3898,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=3899,slot_type=LeftParen}
            |           |               |___(?) {id=3900,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=3902,slot_type=expression}
            |           |               |       |___(+) {id=3965,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=3966,slot_type=StringLiteral}
            |           |               |       |___(*) {id=3904,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=3905,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=3906,slot_type=Comma}
            |           |               |               |___postfixExpression {id=3922,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |               |                   |___Token:b {id=3948,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |               |                   |___(*) {id=3924,slot_type=kleene_star__postfixExpression_2}
            |           |               |                       |___aux_rule__postfixExpression_10 {id=3926,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_10]}
            |           |               |                           |___Token:[ {id=3927,slot_type=LeftBracket}
            |           |               |                           |___Token:6 {id=3947,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |                           |___Token:] {id=3929,slot_type=RightBracket}
            |           |               |___Token:) {id=3901,slot_type=RightParen}
            |           |___Token:; {id=3877,slot_type=Semi}
            |___Token:} {id=3867,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 3855, size=37=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b[100];
    int main() {
      int a = 100;
      b[6] = a - 6;
      printf("%d", b[6]);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedDataTypeSimplificationReducer
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 37 -> 28
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 3855 from 37 to 28
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 54
------------------------------------------------------------


================The best program is updated.================

token count change 37 -> 28
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 10. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=4344,slot_type=translationUnit}
|___(+) {id=4345,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4540,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=4528,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=4529,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=4539,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:b {id=4536,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=4530,slot_type=Semi}
    |___functionDefinition {id=4349,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4350,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4522,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4526,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4513,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4521,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4515,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4517,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4518,slot_type=LeftParen}
        |           |___Token:) {id=4520,slot_type=RightParen}
        |___compoundStatement {id=4352,slot_type=compoundStatement}
            |___Token:{ {id=4353,slot_type=LeftBrace}
            |___(?) {id=4354,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4357,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=4477,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=4478,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=4512,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=4479,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=4482,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=4508,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=4484,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=4485,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=4486,slot_type=Assign}
            |       |   |               |___Token:100 {id=4505,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=4480,slot_type=Semi}
            |       |___expressionStatement {id=4434,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=4435,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=4438,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=4439,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=4468,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:b {id=4475,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=4471,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=4449,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=4467,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=4451,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=4452,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=4461,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:6 {id=4460,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=4436,slot_type=Semi}
            |       |___expressionStatement {id=4363,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4364,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4382,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4431,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4384,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4386,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4387,slot_type=LeftParen}
            |           |               |___(?) {id=4388,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4390,slot_type=expression}
            |           |               |       |___(+) {id=4429,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4430,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4392,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4393,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4394,slot_type=Comma}
            |           |               |               |___Token:b {id=4412,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=4389,slot_type=RightParen}
            |           |___Token:; {id=4365,slot_type=Semi}
            |___Token:} {id=4355,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4345, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4345
------------------------------------------------------------


================Reducing node 4349, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4349}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
                 ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
                 ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
                     ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
                     ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
      int a = 100;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
      int a = 100;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4349
------------------------------------------------------------


================Reducing node 4352, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4352
------------------------------------------------------------


================Reducing node 4354, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4354
------------------------------------------------------------


================Reducing node 4357, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4357}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4357
------------------------------------------------------------


================Reducing node 4363, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4363}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
                     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4363
------------------------------------------------------------


================Reducing node 4434, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4434}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
               ;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
               ;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4434
------------------------------------------------------------


================Reducing node 4364, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
                     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4364
------------------------------------------------------------


================Reducing node 4382, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4382}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf         ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
             "%d"    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
             "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
             "%d", b ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
             "%d", b ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4382
------------------------------------------------------------


================Reducing node 4477, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4477}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
                 ;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
                 ;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4477
------------------------------------------------------------


================Reducing node 4435, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
               ;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
               ;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4435
------------------------------------------------------------


================Reducing node 4438, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4438}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
          a    ;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
          a    ;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b        ;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b        ;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
              6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
              6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
          a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
          a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4438
------------------------------------------------------------


================Reducing node 4384, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf         ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4384
------------------------------------------------------------


================Reducing node 4386, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4386}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4386
------------------------------------------------------------


================Reducing node 4528, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4528}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
         ;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
         ;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4528
------------------------------------------------------------


================Reducing node 4513, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main   {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main   {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4513
------------------------------------------------------------


================Reducing node 4479, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int        ;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int        ;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4479
------------------------------------------------------------


================Reducing node 4482, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4482}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a      ;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a      ;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4482
------------------------------------------------------------


================Reducing node 4449, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a    ;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a    ;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b =     6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b =     6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4449
------------------------------------------------------------


================Reducing node 4388, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf(       );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4388
------------------------------------------------------------


================Reducing node 4390, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4390}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf(      b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf(      b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4390
------------------------------------------------------------


================Reducing node 4529, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    int  ;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int  ;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4536}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
        b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4529
------------------------------------------------------------


================Reducing node 4515, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main   {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main   {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4515
------------------------------------------------------------


================Reducing node 4517, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4517}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4517
------------------------------------------------------------


================Reducing node 4484, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a      ;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a      ;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4484
------------------------------------------------------------


================Reducing node 4485, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4485}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4485
------------------------------------------------------------


================Reducing node 4451, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a    ;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a    ;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4451
------------------------------------------------------------


================Reducing node 4452, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4452}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4452
------------------------------------------------------------


================Reducing node 4439, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
          a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
          a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4439
------------------------------------------------------------


================Reducing node 4468, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4468}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4468
------------------------------------------------------------


================Reducing node 4392, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4392
------------------------------------------------------------


================Reducing node 4393, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4393}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4393
------------------------------------------------------------


================Reducing node 4540, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4540
------------------------------------------------------------


================Reducing node 4539, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4539
------------------------------------------------------------


================Reducing node 4536, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4536
------------------------------------------------------------


================Reducing node 4530, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4530
------------------------------------------------------------


================Reducing node 4521, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4521
------------------------------------------------------------


================Reducing node 4520, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4520
------------------------------------------------------------


================Reducing node 4518, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4518
------------------------------------------------------------


================Reducing node 4508, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4508
------------------------------------------------------------


================Reducing node 4505, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4505
------------------------------------------------------------


================Reducing node 4486, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4486
------------------------------------------------------------


================Reducing node 4480, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4480
------------------------------------------------------------


================Reducing node 4478, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4478
------------------------------------------------------------


================Reducing node 4512, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4512
------------------------------------------------------------


================Reducing node 4475, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4475
------------------------------------------------------------


================Reducing node 4471, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4471
------------------------------------------------------------


================Reducing node 4467, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4467
------------------------------------------------------------


================Reducing node 4461, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4461
------------------------------------------------------------


================Reducing node 4460, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4460
------------------------------------------------------------


================Reducing node 4436, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4436
------------------------------------------------------------


================Reducing node 4431, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4431
------------------------------------------------------------


================Reducing node 4429, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4429
------------------------------------------------------------


================Reducing node 4430, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4430
------------------------------------------------------------


================Reducing node 4412, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4412
------------------------------------------------------------


================Reducing node 4394, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4394
------------------------------------------------------------


================Reducing node 4389, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4389
------------------------------------------------------------


================Reducing node 4387, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4387
------------------------------------------------------------


================Reducing node 4365, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4365
------------------------------------------------------------


================Reducing node 4355, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4355
------------------------------------------------------------


================Reducing node 4353, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4353
------------------------------------------------------------


================Reducing node 4350, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int b;
        main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
        main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4350
------------------------------------------------------------


================Reducing node 4522, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4522}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4522
------------------------------------------------------------


================Reducing node 4526, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4526
------------------------------------------------------------


=Fixpoint iteration 11. Reducer: llm_based_variable_elimination_reducer

The spar-tree is the following.
translationUnit {id=4344,slot_type=translationUnit}
|___(+) {id=4345,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4540,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___aux_rule__declaration_3 {id=4528,slot_type=[aux_rule__translationUnit_2,declaration,aux_rule__declaration_3]}
    |   |___(+) {id=4529,slot_type=declarationSpecifiers}
    |   |   |___Token:int {id=4539,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |   |___Token:b {id=4536,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |___Token:; {id=4530,slot_type=Semi}
    |___functionDefinition {id=4349,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4350,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4522,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4526,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4513,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4521,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4515,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4517,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4518,slot_type=LeftParen}
        |           |___Token:) {id=4520,slot_type=RightParen}
        |___compoundStatement {id=4352,slot_type=compoundStatement}
            |___Token:{ {id=4353,slot_type=LeftBrace}
            |___(?) {id=4354,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4357,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=4477,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=4478,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=4512,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=4479,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=4482,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=4508,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=4484,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=4485,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=4486,slot_type=Assign}
            |       |   |               |___Token:100 {id=4505,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=4480,slot_type=Semi}
            |       |___expressionStatement {id=4434,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=4435,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=4438,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=4439,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=4468,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:b {id=4475,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=4471,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=4449,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=4467,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=4451,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=4452,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:- {id=4461,slot_type=[altnt_block__additiveExpression_3,Minus]}
            |       |   |                   |___Token:6 {id=4460,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=4436,slot_type=Semi}
            |       |___expressionStatement {id=4363,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4364,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4382,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4431,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4384,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4386,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4387,slot_type=LeftParen}
            |           |               |___(?) {id=4388,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4390,slot_type=expression}
            |           |               |       |___(+) {id=4429,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4430,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4392,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4393,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4394,slot_type=Comma}
            |           |               |               |___Token:b {id=4412,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=4389,slot_type=RightParen}
            |           |___Token:; {id=4365,slot_type=Semi}
            |___Token:} {id=4355,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4344, size=28=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      int a = 100;
      b = a - 6;
      printf("%d", b);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedVariableEliminationReducer
    --file: t.c--
    #include <stdio.h>
    int b;
    int main() {
      b = 100 - 6;
      printf("%d", b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int b;
    int main() {
      b = 100 - 6;
      printf("%d", b);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 28 -> 23
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedVariableEliminationReducer
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 23 -> 14
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 4344 from 28 to 14
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 46
------------------------------------------------------------


================The best program is updated.================

token count change 28 -> 14
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 12. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=4803,slot_type=translationUnit}
|___(+) {id=4804,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4902,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=4807,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4808,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4897,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4901,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4888,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4896,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4890,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4892,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4893,slot_type=LeftParen}
        |           |___Token:) {id=4895,slot_type=RightParen}
        |___compoundStatement {id=4810,slot_type=compoundStatement}
            |___Token:{ {id=4811,slot_type=LeftBrace}
            |___(?) {id=4812,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4815,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=4819,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4820,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4887,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4840,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4842,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4843,slot_type=LeftParen}
            |           |               |___(?) {id=4844,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4846,slot_type=expression}
            |           |               |       |___(+) {id=4885,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4886,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4848,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4849,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4850,slot_type=Comma}
            |           |               |               |___Token:94 {id=4868,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |___Token:) {id=4845,slot_type=RightParen}
            |           |___Token:; {id=4821,slot_type=Semi}
            |___Token:} {id=4813,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4804, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4807}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int main() {
      printf("%d", 94);
    }
    --file: <formatted tokenized program in its original format>--
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4804
------------------------------------------------------------


================Reducing node 4807, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4807}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                      ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                      ;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4807
------------------------------------------------------------


================Reducing node 4810, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4810
------------------------------------------------------------


================Reducing node 4812, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4812
------------------------------------------------------------


================Reducing node 4815, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4815}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4815
------------------------------------------------------------


================Reducing node 4819, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
                      ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
                      ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4819
------------------------------------------------------------


================Reducing node 4820, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
                      ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
                      ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4820
------------------------------------------------------------


================Reducing node 4838, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4838}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf          ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf          ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
             "%d"     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
             "%d"     ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
             "%d", 94 ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
             "%d", 94 ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4838
------------------------------------------------------------


================Reducing node 4840, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf          ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf          ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4840
------------------------------------------------------------


================Reducing node 4842, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4842}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4842
------------------------------------------------------------


================Reducing node 4888, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main   {
      printf("%d", 94);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main   {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4888
------------------------------------------------------------


================Reducing node 4844, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf(        );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf(        );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4844
------------------------------------------------------------


================Reducing node 4846, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4846}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d"    );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf("%d"    );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d"    );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf("%d"    );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf(      94);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf(      94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4846
------------------------------------------------------------


================Reducing node 4890, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    int main   {
      printf("%d", 94);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main   {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4890
------------------------------------------------------------


================Reducing node 4892, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4892}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4892
------------------------------------------------------------


================Reducing node 4848, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d"    );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf("%d"    );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4848
------------------------------------------------------------


================Reducing node 4849, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4849}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4849
------------------------------------------------------------


================Reducing node 4902, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4902
------------------------------------------------------------


================Reducing node 4896, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4896
------------------------------------------------------------


================Reducing node 4895, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4895
------------------------------------------------------------


================Reducing node 4893, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4893
------------------------------------------------------------


================Reducing node 4887, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4887
------------------------------------------------------------


================Reducing node 4885, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4885
------------------------------------------------------------


================Reducing node 4886, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4886
------------------------------------------------------------


================Reducing node 4868, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4868
------------------------------------------------------------


================Reducing node 4850, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4850
------------------------------------------------------------


================Reducing node 4845, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4845
------------------------------------------------------------


================Reducing node 4843, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4843
------------------------------------------------------------


================Reducing node 4821, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4821
------------------------------------------------------------


================Reducing node 4813, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4813
------------------------------------------------------------


================Reducing node 4811, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4811
------------------------------------------------------------


================Reducing node 4808, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
        main() {
      printf("%d", 94);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4808
------------------------------------------------------------


================Reducing node 4897, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=4897}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4897
------------------------------------------------------------


================Reducing node 4901, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 4901
------------------------------------------------------------


=Fixpoint iteration 13. Reducer: llm_based_function_inlining_reducer

The spar-tree is the following.
translationUnit {id=4803,slot_type=translationUnit}
|___(+) {id=4804,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4902,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=4807,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4808,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4897,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4901,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4888,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4896,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4890,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4892,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4893,slot_type=LeftParen}
        |           |___Token:) {id=4895,slot_type=RightParen}
        |___compoundStatement {id=4810,slot_type=compoundStatement}
            |___Token:{ {id=4811,slot_type=LeftBrace}
            |___(?) {id=4812,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4815,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=4819,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4820,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4887,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4840,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4842,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4843,slot_type=LeftParen}
            |           |               |___(?) {id=4844,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4846,slot_type=expression}
            |           |               |       |___(+) {id=4885,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4886,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4848,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4849,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4850,slot_type=Comma}
            |           |               |               |___Token:94 {id=4868,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |___Token:) {id=4845,slot_type=RightParen}
            |           |___Token:; {id=4821,slot_type=Semi}
            |___Token:} {id=4813,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4803, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


=Fixpoint iteration 14. Reducer: llm_based_loop_unrolling_reducer

The spar-tree is the following.
translationUnit {id=4803,slot_type=translationUnit}
|___(+) {id=4804,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4902,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=4807,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4808,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4897,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4901,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4888,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4896,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4890,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4892,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4893,slot_type=LeftParen}
        |           |___Token:) {id=4895,slot_type=RightParen}
        |___compoundStatement {id=4810,slot_type=compoundStatement}
            |___Token:{ {id=4811,slot_type=LeftBrace}
            |___(?) {id=4812,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4815,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=4819,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4820,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4887,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4840,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4842,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4843,slot_type=LeftParen}
            |           |               |___(?) {id=4844,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4846,slot_type=expression}
            |           |               |       |___(+) {id=4885,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4886,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4848,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4849,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4850,slot_type=Comma}
            |           |               |               |___Token:94 {id=4868,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |___Token:) {id=4845,slot_type=RightParen}
            |           |___Token:; {id=4821,slot_type=Semi}
            |___Token:} {id=4813,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4803, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


=Fixpoint iteration 15. Reducer: llm_based_data_type_elimination_reducer

The spar-tree is the following.
translationUnit {id=4803,slot_type=translationUnit}
|___(+) {id=4804,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4902,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=4807,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4808,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4897,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4901,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4888,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4896,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4890,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4892,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4893,slot_type=LeftParen}
        |           |___Token:) {id=4895,slot_type=RightParen}
        |___compoundStatement {id=4810,slot_type=compoundStatement}
            |___Token:{ {id=4811,slot_type=LeftBrace}
            |___(?) {id=4812,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4815,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=4819,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4820,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4887,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4840,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4842,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4843,slot_type=LeftParen}
            |           |               |___(?) {id=4844,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4846,slot_type=expression}
            |           |               |       |___(+) {id=4885,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4886,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4848,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4849,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4850,slot_type=Comma}
            |           |               |               |___Token:94 {id=4868,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |___Token:) {id=4845,slot_type=RightParen}
            |           |___Token:; {id=4821,slot_type=Semi}
            |___Token:} {id=4813,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4803, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


=Fixpoint iteration 16. Reducer: llm_based_data_type_simplification_reducer

The spar-tree is the following.
translationUnit {id=4803,slot_type=translationUnit}
|___(+) {id=4804,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4902,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=4807,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4808,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4897,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4901,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4888,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4896,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4890,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4892,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4893,slot_type=LeftParen}
        |           |___Token:) {id=4895,slot_type=RightParen}
        |___compoundStatement {id=4810,slot_type=compoundStatement}
            |___Token:{ {id=4811,slot_type=LeftBrace}
            |___(?) {id=4812,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4815,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=4819,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4820,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4887,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4840,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4842,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4843,slot_type=LeftParen}
            |           |               |___(?) {id=4844,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4846,slot_type=expression}
            |           |               |       |___(+) {id=4885,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4886,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4848,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4849,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4850,slot_type=Comma}
            |           |               |               |___Token:94 {id=4868,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |___Token:) {id=4845,slot_type=RightParen}
            |           |___Token:; {id=4821,slot_type=Semi}
            |___Token:} {id=4813,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4803, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


=Fixpoint iteration 17. Reducer: llm_based_variable_elimination_reducer

The spar-tree is the following.
translationUnit {id=4803,slot_type=translationUnit}
|___(+) {id=4804,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=4902,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=4807,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=4808,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=4897,slot_type=declarationSpecifiers}
        |       |___Token:int {id=4901,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=4888,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=4896,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=4890,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=4892,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=4893,slot_type=LeftParen}
        |           |___Token:) {id=4895,slot_type=RightParen}
        |___compoundStatement {id=4810,slot_type=compoundStatement}
            |___Token:{ {id=4811,slot_type=LeftBrace}
            |___(?) {id=4812,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=4815,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___expressionStatement {id=4819,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=4820,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=4838,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=4887,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=4840,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=4842,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=4843,slot_type=LeftParen}
            |           |               |___(?) {id=4844,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=4846,slot_type=expression}
            |           |               |       |___(+) {id=4885,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=4886,slot_type=StringLiteral}
            |           |               |       |___(*) {id=4848,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=4849,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=4850,slot_type=Comma}
            |           |               |               |___Token:94 {id=4868,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |           |               |___Token:) {id=4845,slot_type=RightParen}
            |           |___Token:; {id=4821,slot_type=Semi}
            |___Token:} {id=4813,slot_type=RightBrace}
------------------------------------------------------------


================Reducing node 4803, size=14=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", 94);
    }
------------------------------------------------------------


The history of the reducer invocation.
[0]: StatsSnapshotEvent
---
stats:
  tokenCount: 71
  characterCount: 152
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[1]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[2]: StatsSnapshotEvent
---
stats:
  tokenCount: 66
  characterCount: 142
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: true

[3]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[4]: StatsSnapshotEvent
---
stats:
  tokenCount: 66
  characterCount: 142
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[5]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_function_inlining_reducer"
  description: "Invoke LLMs for function inlining."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[6]: StatsSnapshotEvent
---
stats:
  tokenCount: 55
  characterCount: 118
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: true

[7]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[8]: StatsSnapshotEvent
---
stats:
  tokenCount: 55
  characterCount: 118
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[9]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_loop_unrolling_reducer"
  description: "Invoke LLMs for loop unrolling."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[10]: StatsSnapshotEvent
---
stats:
  tokenCount: 122
  characterCount: 179
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: true

[11]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[12]: StatsSnapshotEvent
---
stats:
  tokenCount: 41
  characterCount: 98
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: true

[13]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_elimination_reducer"
  description: "Invoke LLMs for data type elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[14]: StatsSnapshotEvent
---
stats:
  tokenCount: 41
  characterCount: 92
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: true

[15]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[16]: StatsSnapshotEvent
---
stats:
  tokenCount: 37
  characterCount: 75
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: true

[17]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_simplification_reducer"
  description: "Invoke LLMs for data type simplification."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[18]: StatsSnapshotEvent
---
stats:
  tokenCount: 28
  characterCount: 64
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: true

[19]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[20]: StatsSnapshotEvent
---
stats:
  tokenCount: 28
  characterCount: 64
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[21]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_variable_elimination_reducer"
  description: "Invoke LLMs for variable elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[22]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: true

[23]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[24]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[25]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_function_inlining_reducer"
  description: "Invoke LLMs for function inlining."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[26]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[27]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_loop_unrolling_reducer"
  description: "Invoke LLMs for loop unrolling."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[28]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[29]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_elimination_reducer"
  description: "Invoke LLMs for data type elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[30]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[31]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_simplification_reducer"
  description: "Invoke LLMs for data type simplification."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[32]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[33]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_variable_elimination_reducer"
  description: "Invoke LLMs for variable elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[34]: StatsSnapshotEvent
---
stats:
  tokenCount: 14
  characterCount: 45
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false


#test success = 15
#test failure = 483
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 153
#external test execution cache hits = 0
