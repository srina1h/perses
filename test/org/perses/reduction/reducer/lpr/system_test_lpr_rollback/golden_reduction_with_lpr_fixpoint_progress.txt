=====================Reduction starts.======================

The initial program size is 39
The command line options are:
---
helpFlags:
  groupName: "Help"
  help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "t.c"
  deps: []
  sourceFile: "t.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_lpr_fixpoint_reduction_golden_test_perses_node_priority_with_dfs_delta_t.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: true
  numOfThreads: 1
  codeFormat: "COMPACT_ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: true
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "DFS"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
trecFlags:
  groupName: "T-Rec Reducer Control"
  enableTrec: false
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "progress_dump_lpr_fixpoint.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "AUTO"
  cacheType: "CONTENT_SHA512"
  nodeActionSetCaching: true
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
experimentFlags:
  groupName: "Experiment Control"
  onDemandFineGritReducerAnnotationClasses: []
  onDemandMediumGritReducerAnnotationClasses: []
  onDemandCoarseGritReducerAnnotationClasses: []
lprFlags:
  groupName: "LPR Reducer Control"
  enableLPR: true
  lprFixpoint: true
  llmClientPath: "llm_client_mock_to_test_workflow.py"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
The reducer execution plan is listed below.
--- !<sequence>
reducers:
- !<fixpoint>
  body: !<atomic>
    reducer: perses_node_priority_with_dfs_delta
  condition: smaller
- !<fixpoint>
  body: !<sequence>
    reducers:
    - !<if>
      condition: !<atomic>
        reducer: llm_based_function_inlining_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_loop_unrolling_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_data_type_elimination_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_data_type_simplification_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
    - !<if>
      condition: !<atomic>
        reducer: llm_based_variable_elimination_reducer
      then: !<atomic>
        reducer: perses_node_priority_with_dfs_delta
  condition: 10


Rebuilding spar-tree: The spartree is not dirty, and thus the rebuilding is skipped.

=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=286,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=281,slot_type=declarationSpecifiers}
        |       |___Token:int {id=285,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=272,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=280,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=274,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=276,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=277,slot_type=LeftParen}
        |           |___Token:) {id=279,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=236,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=237,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=271,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=238,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=241,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=267,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=243,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=244,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=245,slot_type=Assign}
            |       |   |               |___Token:1 {id=264,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=239,slot_type=Semi}
            |       |___statement {id=88,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=89,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=133,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=136,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=137,slot_type=For}
            |       |   |       |   |___Token:( {id=138,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=139,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=199,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=200,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=234,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=201,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=204,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=230,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=206,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=207,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=208,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=227,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=202,slot_type=Semi}
            |       |   |       |       |___(?) {id=141,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=175,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=197,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=177,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=178,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=189,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=188,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=142,slot_type=Semi}
            |       |   |       |       |___(?) {id=143,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=160,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=165,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=162,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=164,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=135,slot_type=RightParen}
            |       |   |___expressionStatement {id=91,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=92,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=95,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=96,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=125,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___Token:a {id=132,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |___Token:= {id=128,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=106,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=124,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=108,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=109,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:+ {id=118,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |       |                   |___Token:1 {id=117,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |       |___Token:; {id=93,slot_type=Semi}
            |       |___expressionStatement {id=19,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=20,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=38,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=87,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=40,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=42,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=43,slot_type=LeftParen}
            |           |               |___(?) {id=44,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=46,slot_type=expression}
            |           |               |       |___(+) {id=85,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=86,slot_type=StringLiteral}
            |           |               |       |___(*) {id=48,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=49,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=50,slot_type=Comma}
            |           |               |               |___Token:a {id=68,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=45,slot_type=RightParen}
            |           |___Token:; {id=21,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 5, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=5}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                     ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                     ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
      int a = 1;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
      int a = 1;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 5
------------------------------------------------------------


==================Reducing node 8, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 8
------------------------------------------------------------


=================Reducing node 10, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


=================Reducing node 13, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=13}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int main() {
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 13
------------------------------------------------------------


=================Reducing node 88, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=88}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
                 ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
                 ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
                            ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
                            ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
           int i = 0;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
           int i = 0;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 88
------------------------------------------------------------


=================Reducing node 89, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__statement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 89
------------------------------------------------------------


=================Reducing node 133, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=133}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 133
------------------------------------------------------------


=================Reducing node 136, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 136
------------------------------------------------------------


=================Reducing node 139, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 139
------------------------------------------------------------


=================Reducing node 19, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=19}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
                     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 19
------------------------------------------------------------


=================Reducing node 91, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
                 ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
                 ;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 91
------------------------------------------------------------


=================Reducing node 20, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
                     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 20
------------------------------------------------------------


=================Reducing node 38, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=38}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf         ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
             "%d"    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
             "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
             "%d", a ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
             "%d", a ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 38
------------------------------------------------------------


=================Reducing node 236, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=236}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
               ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
               ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 236
------------------------------------------------------------


=================Reducing node 199, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (         ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (         ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 199
------------------------------------------------------------


=================Reducing node 92, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
                 ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
                 ;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 92
------------------------------------------------------------


=================Reducing node 95, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=95}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
            a    ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
            a    ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a        ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a        ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
                1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
                1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
            a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
            a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 95
------------------------------------------------------------


=================Reducing node 40, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf         ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 40
------------------------------------------------------------


=================Reducing node 42, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=42}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 42
------------------------------------------------------------


=================Reducing node 272, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main   {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main   {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 272
------------------------------------------------------------


=================Reducing node 238, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int      ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int      ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 238
------------------------------------------------------------


=================Reducing node 241, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=241}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a    ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a    ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 241
------------------------------------------------------------


=================Reducing node 201, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int      ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int      ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 201
------------------------------------------------------------


=================Reducing node 204, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=204}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i    ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i    ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 204
------------------------------------------------------------


=================Reducing node 141, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0;       ; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0;       ; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 141
------------------------------------------------------------


=================Reducing node 175, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=175}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i     ; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i     ; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0;     10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0;     10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 175
------------------------------------------------------------


=================Reducing node 106, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a    ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a    ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a =     1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a =     1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 106
------------------------------------------------------------


=================Reducing node 44, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf(       );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 44
------------------------------------------------------------


=================Reducing node 46, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=46}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf(      a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf(      a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 46
------------------------------------------------------------


=================Reducing node 274, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    int main   {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main   {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 274
------------------------------------------------------------


=================Reducing node 276, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=276}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 276
------------------------------------------------------------


=================Reducing node 243, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a    ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a    ;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 243
------------------------------------------------------------


=================Reducing node 244, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=244}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 244
------------------------------------------------------------


=================Reducing node 206, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i    ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i    ; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 206
------------------------------------------------------------


=================Reducing node 207, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=207}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 207
------------------------------------------------------------


=================Reducing node 177, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__relationalExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i     ; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i     ; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 177
------------------------------------------------------------


=================Reducing node 178, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=178}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 178
------------------------------------------------------------


=================Reducing node 143, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10;    )
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10;    )
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 143
------------------------------------------------------------


=================Reducing node 160, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=160}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i  )
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i  )
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 108, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a    ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a    ;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 108
------------------------------------------------------------


=================Reducing node 109, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=109}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 109
------------------------------------------------------------


=================Reducing node 96, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
            a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
            a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 96
------------------------------------------------------------


=================Reducing node 125, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=125}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 125
------------------------------------------------------------


=================Reducing node 48, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 49, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=49}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 286, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 286
------------------------------------------------------------


=================Reducing node 280, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 280
------------------------------------------------------------


=================Reducing node 279, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 279
------------------------------------------------------------


=================Reducing node 277, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 277
------------------------------------------------------------


=================Reducing node 267, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 267
------------------------------------------------------------


=================Reducing node 264, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 264
------------------------------------------------------------


=================Reducing node 245, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 245
------------------------------------------------------------


=================Reducing node 239, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 239
------------------------------------------------------------


=================Reducing node 237, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 237
------------------------------------------------------------


=================Reducing node 271, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 271
------------------------------------------------------------


=================Reducing node 230, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 230
------------------------------------------------------------


=================Reducing node 227, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 227
------------------------------------------------------------


=================Reducing node 208, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 208
------------------------------------------------------------


=================Reducing node 202, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 202
------------------------------------------------------------


=================Reducing node 200, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 200
------------------------------------------------------------


=================Reducing node 234, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 234
------------------------------------------------------------


=================Reducing node 197, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 197
------------------------------------------------------------


=================Reducing node 189, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 189
------------------------------------------------------------


=================Reducing node 188, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 188
------------------------------------------------------------


=================Reducing node 165, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 165
------------------------------------------------------------


=================Reducing node 162, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i  )
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i  )
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 162
------------------------------------------------------------


=================Reducing node 164, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 164
------------------------------------------------------------


=================Reducing node 142, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 142
------------------------------------------------------------


=================Reducing node 138, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 138
------------------------------------------------------------


=================Reducing node 137, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 137
------------------------------------------------------------


=================Reducing node 135, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 135
------------------------------------------------------------


=================Reducing node 132, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 132
------------------------------------------------------------


=================Reducing node 128, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 128
------------------------------------------------------------


=================Reducing node 124, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 124
------------------------------------------------------------


=================Reducing node 118, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 118
------------------------------------------------------------


=================Reducing node 117, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 117
------------------------------------------------------------


=================Reducing node 93, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 93
------------------------------------------------------------


=================Reducing node 87, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 87
------------------------------------------------------------


=================Reducing node 85, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 85
------------------------------------------------------------


=================Reducing node 86, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 86
------------------------------------------------------------


=================Reducing node 68, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 68
------------------------------------------------------------


=================Reducing node 50, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 45, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 43, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 43
------------------------------------------------------------


=================Reducing node 21, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21
------------------------------------------------------------


=================Reducing node 11, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


==================Reducing node 9, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


==================Reducing node 6, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
        main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


=================Reducing node 281, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=281}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 281
------------------------------------------------------------


=================Reducing node 285, size=39=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 285
------------------------------------------------------------


=Fixpoint iteration 2. Reducer: llm_based_function_inlining_reducer

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=286,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=281,slot_type=declarationSpecifiers}
        |       |___Token:int {id=285,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=272,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=280,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=274,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=276,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=277,slot_type=LeftParen}
        |           |___Token:) {id=279,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=236,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=237,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=271,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=238,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=241,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=267,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=243,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=244,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=245,slot_type=Assign}
            |       |   |               |___Token:1 {id=264,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=239,slot_type=Semi}
            |       |___statement {id=88,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=89,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=133,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=136,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=137,slot_type=For}
            |       |   |       |   |___Token:( {id=138,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=139,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=199,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=200,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=234,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=201,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=204,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=230,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=206,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=207,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=208,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=227,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=202,slot_type=Semi}
            |       |   |       |       |___(?) {id=141,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=175,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=197,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=177,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=178,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=189,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=188,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=142,slot_type=Semi}
            |       |   |       |       |___(?) {id=143,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=160,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=165,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=162,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=164,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=135,slot_type=RightParen}
            |       |   |___expressionStatement {id=91,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=92,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=95,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=96,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=125,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___Token:a {id=132,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |___Token:= {id=128,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=106,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=124,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=108,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=109,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:+ {id=118,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |       |                   |___Token:1 {id=117,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |       |___Token:; {id=93,slot_type=Semi}
            |       |___expressionStatement {id=19,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=20,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=38,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=87,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=40,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=42,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=43,slot_type=LeftParen}
            |           |               |___(?) {id=44,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=46,slot_type=expression}
            |           |               |       |___(+) {id=85,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=86,slot_type=StringLiteral}
            |           |               |       |___(*) {id=48,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=49,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=50,slot_type=Comma}
            |           |               |               |___Token:a {id=68,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=45,slot_type=RightParen}
            |           |___Token:; {id=21,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 1, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 3. Reducer: llm_based_loop_unrolling_reducer

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=286,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=5,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=6,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=281,slot_type=declarationSpecifiers}
        |       |___Token:int {id=285,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=272,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=280,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=274,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=276,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=277,slot_type=LeftParen}
        |           |___Token:) {id=279,slot_type=RightParen}
        |___compoundStatement {id=8,slot_type=compoundStatement}
            |___Token:{ {id=9,slot_type=LeftBrace}
            |___(?) {id=10,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=13,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=236,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=237,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=271,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=238,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=241,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=267,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=243,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=244,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=245,slot_type=Assign}
            |       |   |               |___Token:1 {id=264,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=239,slot_type=Semi}
            |       |___statement {id=88,slot_type=[aux_rule__blockItemList_2,statement]}
            |       |   |___(*) {id=89,slot_type=kleene_star__statement_1}
            |       |   |   |___aux_rule__statement_2 {id=133,slot_type=aux_rule__statement_2}
            |       |   |       |___aux_rule__statement_8 {id=136,slot_type=[altnt_block__statement_4,aux_rule__statement_8]}
            |       |   |       |   |___Token:for {id=137,slot_type=For}
            |       |   |       |   |___Token:( {id=138,slot_type=LeftParen}
            |       |   |       |   |___altnt_block__iterationStatement_7 {id=139,slot_type=altnt_block__iterationStatement_7}
            |       |   |       |       |___aux_rule__declaration_3 {id=199,slot_type=[altnt_block__iterationStatement_8,declaration,aux_rule__declaration_3]}
            |       |   |       |       |   |___(+) {id=200,slot_type=declarationSpecifiers}
            |       |   |       |       |   |   |___Token:int {id=234,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |       |       |   |___(?) {id=201,slot_type=optional__declaration_2}
            |       |   |       |       |   |   |___initDeclarator {id=204,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |       |   |       |___Token:i {id=230,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |       |   |       |___(?) {id=206,slot_type=optional__initDeclarator_2}
            |       |   |       |       |   |           |___aux_rule__initDeclarator_1 {id=207,slot_type=aux_rule__initDeclarator_1}
            |       |   |       |       |   |               |___Token:= {id=208,slot_type=Assign}
            |       |   |       |       |   |               |___Token:0 {id=227,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |   |___Token:; {id=202,slot_type=Semi}
            |       |   |       |       |___(?) {id=141,slot_type=optional__postfixExpression_1}
            |       |   |       |       |   |___relationalExpression {id=175,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression]}
            |       |   |       |       |       |___Token:i {id=197,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |       |___(*) {id=177,slot_type=kleene_star__relationalExpression_1}
            |       |   |       |       |           |___aux_rule__relationalExpression_2 {id=178,slot_type=aux_rule__relationalExpression_2}
            |       |   |       |       |               |___Token:< {id=189,slot_type=[altnt_block__relationalExpression_3,Less]}
            |       |   |       |       |               |___Token:10 {id=188,slot_type=[shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |       |       |___Token:; {id=142,slot_type=Semi}
            |       |   |       |       |___(?) {id=143,slot_type=optional__postfixExpression_1}
            |       |   |       |           |___postfixExpression {id=160,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |       |   |       |               |___Token:i {id=165,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |               |___(*) {id=162,slot_type=kleene_star__postfixExpression_2}
            |       |   |       |                   |___Token:++ {id=164,slot_type=[aux_rule__postfixExpression_3,PlusPlus]}
            |       |   |       |___Token:) {id=135,slot_type=RightParen}
            |       |   |___expressionStatement {id=91,slot_type=[aux_rule__statement_3,expressionStatement]}
            |       |       |___(?) {id=92,slot_type=optional__postfixExpression_1}
            |       |       |   |___assignmentExpression {id=95,slot_type=[expression,assignmentExpression]}
            |       |       |       |___(*) {id=96,slot_type=kleene_star__assignmentExpression_1}
            |       |       |       |   |___aux_rule__assignmentExpression_2 {id=125,slot_type=aux_rule__assignmentExpression_2}
            |       |       |       |       |___Token:a {id=132,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |       |       |___Token:= {id=128,slot_type=[assignmentOperator,Assign]}
            |       |       |       |___additiveExpression {id=106,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |       |           |___Token:a {id=124,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |       |           |___(*) {id=108,slot_type=kleene_star__additiveExpression_1}
            |       |       |               |___aux_rule__additiveExpression_2 {id=109,slot_type=aux_rule__additiveExpression_2}
            |       |       |                   |___Token:+ {id=118,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |       |                   |___Token:1 {id=117,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |       |___Token:; {id=93,slot_type=Semi}
            |       |___expressionStatement {id=19,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=20,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=38,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=87,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=40,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=42,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=43,slot_type=LeftParen}
            |           |               |___(?) {id=44,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=46,slot_type=expression}
            |           |               |       |___(+) {id=85,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=86,slot_type=StringLiteral}
            |           |               |       |___(*) {id=48,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=49,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=50,slot_type=Comma}
            |           |               |               |___Token:a {id=68,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=45,slot_type=RightParen}
            |           |___Token:; {id=21,slot_type=Semi}
            |___Token:} {id=11,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 1, size=39==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      for (int i = 0; i < 10; i++)
        a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: LPR transformation: class org.perses.reduction.reducer.lpr.LLMBasedLoopUnrollingReducer
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


================The best program is updated.================

token count change 39 -> 79
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 55
------------------------------------------------------------


================The best program is updated.================

token count change 39 -> 79
------------------------------------------------------------


Rebuilding spar-tree: The spartree is rebuilt.

=Fixpoint iteration 4. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 878, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=881}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 878
------------------------------------------------------------


=================Reducing node 881, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=881}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                     ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                     ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
      int a = 1;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
      int a = 1;
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 881
------------------------------------------------------------


=================Reducing node 884, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 884
------------------------------------------------------------


=================Reducing node 886, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 886
------------------------------------------------------------


=================Reducing node 889, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=889}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@6
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@6
    --file: t.c--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@3
    --file: t.c--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 889
------------------------------------------------------------


=================Reducing node 904, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=904}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
                     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 904
------------------------------------------------------------


================Reducing node 1371, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1371}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1371
------------------------------------------------------------


================Reducing node 1327, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1327}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1327
------------------------------------------------------------


================Reducing node 1283, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1283}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1283
------------------------------------------------------------


================Reducing node 1239, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1239}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1239
------------------------------------------------------------


================Reducing node 1195, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1195}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1195
------------------------------------------------------------


================Reducing node 1151, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1151}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1151
------------------------------------------------------------


================Reducing node 1107, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1107}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1107
------------------------------------------------------------


================Reducing node 1063, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1063}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1063
------------------------------------------------------------


================Reducing node 1019, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1019}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1019
------------------------------------------------------------


=================Reducing node 975, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=975}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 975
------------------------------------------------------------


=================Reducing node 905, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
                     ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
                     ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 905
------------------------------------------------------------


=================Reducing node 923, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=923}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf         ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf         ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
             "%d"    ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
             "%d"    ;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
             "%d", a ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
             "%d", a ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 923
------------------------------------------------------------


================Reducing node 1414, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1414}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1414
------------------------------------------------------------


================Reducing node 1372, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1372
------------------------------------------------------------


================Reducing node 1375, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1375}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1375
------------------------------------------------------------


================Reducing node 1328, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1328
------------------------------------------------------------


================Reducing node 1331, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1331}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1331
------------------------------------------------------------


================Reducing node 1284, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1284
------------------------------------------------------------


================Reducing node 1287, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1287}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1287
------------------------------------------------------------


================Reducing node 1240, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1240
------------------------------------------------------------


================Reducing node 1243, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1243}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1243
------------------------------------------------------------


================Reducing node 1196, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1196
------------------------------------------------------------


================Reducing node 1199, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1199}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1199
------------------------------------------------------------


================Reducing node 1152, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1152
------------------------------------------------------------


================Reducing node 1155, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1155}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1155
------------------------------------------------------------


================Reducing node 1108, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1108
------------------------------------------------------------


================Reducing node 1111, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1111}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1111
------------------------------------------------------------


================Reducing node 1064, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1064
------------------------------------------------------------


================Reducing node 1067, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1067}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1067
------------------------------------------------------------


================Reducing node 1020, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1020
------------------------------------------------------------


================Reducing node 1023, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1023}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1023
------------------------------------------------------------


=================Reducing node 976, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
               ;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 976
------------------------------------------------------------


=================Reducing node 979, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=979}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a    ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a        ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
              1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 979
------------------------------------------------------------


=================Reducing node 925, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf         ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf         ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 925
------------------------------------------------------------


=================Reducing node 927, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=927}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 927
------------------------------------------------------------


================Reducing node 1450, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main   {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main   {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1450
------------------------------------------------------------


================Reducing node 1416, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int      ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int      ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1416
------------------------------------------------------------


================Reducing node 1419, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1419}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1419
------------------------------------------------------------


================Reducing node 1386, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1386
------------------------------------------------------------


================Reducing node 1342, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1342
------------------------------------------------------------


================Reducing node 1298, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1298
------------------------------------------------------------


================Reducing node 1254, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1254
------------------------------------------------------------


================Reducing node 1210, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1210
------------------------------------------------------------


================Reducing node 1166, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1166
------------------------------------------------------------


================Reducing node 1122, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1122
------------------------------------------------------------


================Reducing node 1078, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1078
------------------------------------------------------------


================Reducing node 1034, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1034
------------------------------------------------------------


=================Reducing node 990, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a =     1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 990
------------------------------------------------------------


=================Reducing node 929, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf(       );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf(       );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 929
------------------------------------------------------------


=================Reducing node 931, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=931}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d"   );
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf(      a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf(      a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 931
------------------------------------------------------------


================Reducing node 1452, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    int main   {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main   {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1452
------------------------------------------------------------


================Reducing node 1454, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1454}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1454
------------------------------------------------------------


================Reducing node 1421, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1421
------------------------------------------------------------


================Reducing node 1422, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1422}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1422
------------------------------------------------------------


================Reducing node 1388, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1388
------------------------------------------------------------


================Reducing node 1389, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1389}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1389
------------------------------------------------------------


================Reducing node 1376, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1376
------------------------------------------------------------


================Reducing node 1405, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1405}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1405
------------------------------------------------------------


================Reducing node 1344, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1344
------------------------------------------------------------


================Reducing node 1345, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1345}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1345
------------------------------------------------------------


================Reducing node 1332, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1332
------------------------------------------------------------


================Reducing node 1361, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1361}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1361
------------------------------------------------------------


================Reducing node 1300, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1300
------------------------------------------------------------


================Reducing node 1301, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1301}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1301
------------------------------------------------------------


================Reducing node 1288, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1288
------------------------------------------------------------


================Reducing node 1317, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1317}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1317
------------------------------------------------------------


================Reducing node 1256, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1256
------------------------------------------------------------


================Reducing node 1257, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1257}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1257
------------------------------------------------------------


================Reducing node 1244, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1244
------------------------------------------------------------


================Reducing node 1273, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1273}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1273
------------------------------------------------------------


================Reducing node 1212, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1212
------------------------------------------------------------


================Reducing node 1213, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1213}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1213
------------------------------------------------------------


================Reducing node 1200, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1200
------------------------------------------------------------


================Reducing node 1229, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1229}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1229
------------------------------------------------------------


================Reducing node 1168, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1168
------------------------------------------------------------


================Reducing node 1169, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1169}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1169
------------------------------------------------------------


================Reducing node 1156, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1156
------------------------------------------------------------


================Reducing node 1185, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1185}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1185
------------------------------------------------------------


================Reducing node 1124, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1124
------------------------------------------------------------


================Reducing node 1125, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1125}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1125
------------------------------------------------------------


================Reducing node 1112, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1112
------------------------------------------------------------


================Reducing node 1141, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1141}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1141
------------------------------------------------------------


================Reducing node 1080, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1080
------------------------------------------------------------


================Reducing node 1081, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1081}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1081
------------------------------------------------------------


================Reducing node 1068, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1068
------------------------------------------------------------


================Reducing node 1097, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1097}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1097
------------------------------------------------------------


================Reducing node 1036, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1036
------------------------------------------------------------


================Reducing node 1037, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1037}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1037
------------------------------------------------------------


================Reducing node 1024, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1024
------------------------------------------------------------


================Reducing node 1053, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1053}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1053
------------------------------------------------------------


=================Reducing node 992, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__additiveExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a    ;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 992
------------------------------------------------------------


=================Reducing node 993, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=993}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 993
------------------------------------------------------------


=================Reducing node 980, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__assignmentExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
          a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 980
------------------------------------------------------------


================Reducing node 1009, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1009}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1009
------------------------------------------------------------


=================Reducing node 933, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d"   );
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d"   );
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 933
------------------------------------------------------------


=================Reducing node 934, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=934}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 934
------------------------------------------------------------


================Reducing node 1464, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1464
------------------------------------------------------------


================Reducing node 1458, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1458
------------------------------------------------------------


================Reducing node 1457, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1457
------------------------------------------------------------


================Reducing node 1455, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1455
------------------------------------------------------------


================Reducing node 1445, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1445
------------------------------------------------------------


================Reducing node 1442, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1442
------------------------------------------------------------


================Reducing node 1423, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1423
------------------------------------------------------------


================Reducing node 1417, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1417
------------------------------------------------------------


================Reducing node 1415, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1415
------------------------------------------------------------


================Reducing node 1449, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1449
------------------------------------------------------------


================Reducing node 1412, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1412
------------------------------------------------------------


================Reducing node 1408, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1408
------------------------------------------------------------


================Reducing node 1404, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1404
------------------------------------------------------------


================Reducing node 1398, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1398
------------------------------------------------------------


================Reducing node 1397, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1397
------------------------------------------------------------


================Reducing node 1373, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1373
------------------------------------------------------------


================Reducing node 1368, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1368
------------------------------------------------------------


================Reducing node 1364, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1364
------------------------------------------------------------


================Reducing node 1360, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1360
------------------------------------------------------------


================Reducing node 1354, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1354
------------------------------------------------------------


================Reducing node 1353, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1353
------------------------------------------------------------


================Reducing node 1329, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1329
------------------------------------------------------------


================Reducing node 1324, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1324
------------------------------------------------------------


================Reducing node 1320, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1320
------------------------------------------------------------


================Reducing node 1316, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1316
------------------------------------------------------------


================Reducing node 1310, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1310
------------------------------------------------------------


================Reducing node 1309, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1309
------------------------------------------------------------


================Reducing node 1285, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1285
------------------------------------------------------------


================Reducing node 1280, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1280
------------------------------------------------------------


================Reducing node 1276, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1276
------------------------------------------------------------


================Reducing node 1272, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1272
------------------------------------------------------------


================Reducing node 1266, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1266
------------------------------------------------------------


================Reducing node 1265, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1265
------------------------------------------------------------


================Reducing node 1241, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1241
------------------------------------------------------------


================Reducing node 1236, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1236
------------------------------------------------------------


================Reducing node 1232, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1232
------------------------------------------------------------


================Reducing node 1228, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1228
------------------------------------------------------------


================Reducing node 1222, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1222
------------------------------------------------------------


================Reducing node 1221, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1221
------------------------------------------------------------


================Reducing node 1197, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1197
------------------------------------------------------------


================Reducing node 1192, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1192
------------------------------------------------------------


================Reducing node 1188, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1188
------------------------------------------------------------


================Reducing node 1184, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1184
------------------------------------------------------------


================Reducing node 1178, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1178
------------------------------------------------------------


================Reducing node 1177, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1177
------------------------------------------------------------


================Reducing node 1153, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1153
------------------------------------------------------------


================Reducing node 1148, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1148
------------------------------------------------------------


================Reducing node 1144, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1144
------------------------------------------------------------


================Reducing node 1140, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1140
------------------------------------------------------------


================Reducing node 1134, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1134
------------------------------------------------------------


================Reducing node 1133, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1133
------------------------------------------------------------


================Reducing node 1109, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1109
------------------------------------------------------------


================Reducing node 1104, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1104
------------------------------------------------------------


================Reducing node 1100, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1100
------------------------------------------------------------


================Reducing node 1096, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1096
------------------------------------------------------------


================Reducing node 1090, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1090
------------------------------------------------------------


================Reducing node 1089, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1089
------------------------------------------------------------


================Reducing node 1065, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1065
------------------------------------------------------------


================Reducing node 1060, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1060
------------------------------------------------------------


================Reducing node 1056, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1056
------------------------------------------------------------


================Reducing node 1052, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1052
------------------------------------------------------------


================Reducing node 1046, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1046
------------------------------------------------------------


================Reducing node 1045, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1045
------------------------------------------------------------


================Reducing node 1021, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1021
------------------------------------------------------------


================Reducing node 1016, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1016
------------------------------------------------------------


================Reducing node 1012, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1012
------------------------------------------------------------


================Reducing node 1008, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1008
------------------------------------------------------------


================Reducing node 1002, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1002
------------------------------------------------------------


================Reducing node 1001, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1001
------------------------------------------------------------


=================Reducing node 977, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 977
------------------------------------------------------------


=================Reducing node 972, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 972
------------------------------------------------------------


=================Reducing node 970, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 970
------------------------------------------------------------


=================Reducing node 971, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 971
------------------------------------------------------------


=================Reducing node 953, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 953
------------------------------------------------------------


=================Reducing node 935, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 935
------------------------------------------------------------


=================Reducing node 930, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 930
------------------------------------------------------------


=================Reducing node 928, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 928
------------------------------------------------------------


=================Reducing node 906, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 906
------------------------------------------------------------


=================Reducing node 887, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 887
------------------------------------------------------------


=================Reducing node 885, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 885
------------------------------------------------------------


=================Reducing node 882, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
        main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
        main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 882
------------------------------------------------------------


================Reducing node 1459, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


==============Node edit action set cache hit.===============

    NodeDeletionAction{target_node=1459}
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1459
------------------------------------------------------------


================Reducing node 1463, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 1463
------------------------------------------------------------


=Fixpoint iteration 5. Reducer: llm_based_data_type_elimination_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 6. Reducer: llm_based_data_type_simplification_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 7. Reducer: llm_based_variable_elimination_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 8. Reducer: llm_based_function_inlining_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 9. Reducer: llm_based_loop_unrolling_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 10. Reducer: llm_based_data_type_elimination_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 11. Reducer: llm_based_data_type_simplification_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


=Fixpoint iteration 12. Reducer: llm_based_variable_elimination_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 877, size=79=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    int main() {
      int a = 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      a = a + 1;
      printf("%d", a);
    }
------------------------------------------------------------


The history of the reducer invocation.
[0]: StatsSnapshotEvent
---
stats:
  tokenCount: 39
  characterCount: 77
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[1]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[2]: StatsSnapshotEvent
---
stats:
  tokenCount: 39
  characterCount: 77
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[3]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_function_inlining_reducer"
  description: "Invoke LLMs for function inlining."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[4]: StatsSnapshotEvent
---
stats:
  tokenCount: 39
  characterCount: 77
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 0
fileContentChangedWrtPrevious: false

[5]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_loop_unrolling_reducer"
  description: "Invoke LLMs for loop unrolling."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[6]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: true

[7]: ReducerCallEvent
---
reducer:
  shortName: "perses_node_priority_with_dfs_delta"
  description: ""
  deterministic: true
  reductionResultSizeTrend: "BEST_RESULT_SIZE_DECREASE"

[8]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[9]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_elimination_reducer"
  description: "Invoke LLMs for data type elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[10]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[11]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_simplification_reducer"
  description: "Invoke LLMs for data type simplification."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[12]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[13]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_variable_elimination_reducer"
  description: "Invoke LLMs for variable elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[14]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[15]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_function_inlining_reducer"
  description: "Invoke LLMs for function inlining."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[16]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[17]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_loop_unrolling_reducer"
  description: "Invoke LLMs for loop unrolling."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[18]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[19]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_elimination_reducer"
  description: "Invoke LLMs for data type elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[20]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[21]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_data_type_simplification_reducer"
  description: "Invoke LLMs for data type simplification."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[22]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false

[23]: ReducerCallEvent
---
reducer:
  shortName: "llm_based_variable_elimination_reducer"
  description: "Invoke LLMs for variable elimination."
  deterministic: false
  reductionResultSizeTrend: "BEST_RESULT_SIZE_INCREASE"

[24]: StatsSnapshotEvent
---
stats:
  tokenCount: 79
  characterCount: 111
  fileContents:
  - fileName: "t.c"
    contentDigest:
      digest: {}
      numOfStrings: 1
numberOfNonDeletionIterations: 1
fileContentChangedWrtPrevious: false


=Fixpoint iteration 13. Reducer: spartree_root_replacement_reducer

The spar-tree is the following.
translationUnit {id=877,slot_type=translationUnit}
|___(+) {id=878,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=1464,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=881,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=882,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=1459,slot_type=declarationSpecifiers}
        |       |___Token:int {id=1463,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=1450,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=1458,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=1452,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=1454,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=1455,slot_type=LeftParen}
        |           |___Token:) {id=1457,slot_type=RightParen}
        |___compoundStatement {id=884,slot_type=compoundStatement}
            |___Token:{ {id=885,slot_type=LeftBrace}
            |___(?) {id=886,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=889,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=1414,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=1415,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=1449,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=1416,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=1419,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=1445,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=1421,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=1422,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=1423,slot_type=Assign}
            |       |   |               |___Token:1 {id=1442,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1417,slot_type=Semi}
            |       |___expressionStatement {id=1371,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1372,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1375,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1376,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1405,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1412,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1408,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1386,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1404,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1388,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1389,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1398,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1397,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1373,slot_type=Semi}
            |       |___expressionStatement {id=1327,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1328,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1331,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1332,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1361,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1368,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1364,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1342,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1360,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1344,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1345,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1354,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1353,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1329,slot_type=Semi}
            |       |___expressionStatement {id=1283,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1284,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1287,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1288,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1317,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1324,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1320,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1298,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1316,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1300,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1301,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1310,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1309,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1285,slot_type=Semi}
            |       |___expressionStatement {id=1239,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1240,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1243,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1244,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1273,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1280,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1276,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1254,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1272,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1256,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1257,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1266,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1265,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1241,slot_type=Semi}
            |       |___expressionStatement {id=1195,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1196,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1199,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1200,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1229,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1236,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1232,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1210,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1228,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1212,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1213,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1222,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1221,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1197,slot_type=Semi}
            |       |___expressionStatement {id=1151,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1152,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1155,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1156,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1185,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1192,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1188,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1166,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1184,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1168,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1169,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1178,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1177,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1153,slot_type=Semi}
            |       |___expressionStatement {id=1107,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1108,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1111,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1112,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1141,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1148,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1144,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1122,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1140,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1124,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1125,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1134,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1133,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1109,slot_type=Semi}
            |       |___expressionStatement {id=1063,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1064,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1067,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1068,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1097,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1104,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1100,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1078,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1096,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1080,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1081,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1090,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1089,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1065,slot_type=Semi}
            |       |___expressionStatement {id=1019,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=1020,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=1023,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=1024,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1053,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1060,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1056,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=1034,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1052,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=1036,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=1037,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1046,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1045,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=1021,slot_type=Semi}
            |       |___expressionStatement {id=975,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |       |   |___(?) {id=976,slot_type=optional__postfixExpression_1}
            |       |   |   |___assignmentExpression {id=979,slot_type=[expression,assignmentExpression]}
            |       |   |       |___(*) {id=980,slot_type=kleene_star__assignmentExpression_1}
            |       |   |       |   |___aux_rule__assignmentExpression_2 {id=1009,slot_type=aux_rule__assignmentExpression_2}
            |       |   |       |       |___Token:a {id=1016,slot_type=[unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |       |       |___Token:= {id=1012,slot_type=[assignmentOperator,Assign]}
            |       |   |       |___additiveExpression {id=990,slot_type=[conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression]}
            |       |   |           |___Token:a {id=1008,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |       |   |           |___(*) {id=992,slot_type=kleene_star__additiveExpression_1}
            |       |   |               |___aux_rule__additiveExpression_2 {id=993,slot_type=aux_rule__additiveExpression_2}
            |       |   |                   |___Token:+ {id=1002,slot_type=[altnt_block__additiveExpression_3,Plus]}
            |       |   |                   |___Token:1 {id=1001,slot_type=[multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=977,slot_type=Semi}
            |       |___expressionStatement {id=904,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
            |           |___(?) {id=905,slot_type=optional__postfixExpression_1}
            |           |   |___postfixExpression {id=923,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
            |           |       |___Token:printf {id=972,slot_type=[aux_rule__postfixExpression_4,Identifier]}
            |           |       |___(*) {id=925,slot_type=kleene_star__postfixExpression_2}
            |           |           |___aux_rule__postfixExpression_11 {id=927,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
            |           |               |___Token:( {id=928,slot_type=LeftParen}
            |           |               |___(?) {id=929,slot_type=optional__postfixExpression_1}
            |           |               |   |___expression {id=931,slot_type=expression}
            |           |               |       |___(+) {id=970,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
            |           |               |       |   |___Token:"%d" {id=971,slot_type=StringLiteral}
            |           |               |       |___(*) {id=933,slot_type=kleene_star__expression_1}
            |           |               |           |___aux_rule__expression_2 {id=934,slot_type=aux_rule__expression_2}
            |           |               |               |___Token:, {id=935,slot_type=Comma}
            |           |               |               |___Token:a {id=953,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |               |___Token:) {id=930,slot_type=RightParen}
            |           |___Token:; {id=906,slot_type=Semi}
            |___Token:} {id=887,slot_type=RightBrace}
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 157
------------------------------------------------------------


================The best program is updated.================

token count change 79 -> 39
------------------------------------------------------------


#test success = 1
#test failure = 212
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 76
#external test execution cache hits = 0
