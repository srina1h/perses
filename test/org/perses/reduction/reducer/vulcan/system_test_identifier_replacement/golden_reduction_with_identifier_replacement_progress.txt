=====================Reduction starts.======================

The initial program size is 40
The command line options are:
---
helpFlags:
  groupName: "Help"
  help: false
verbosityFlags:
  groupName: "Verbosity"
  verbosity: "INFO"
  listVerbosity: false
versionFlags:
  groupName: "Version"
  version: false
inputFlags:
  groupName: "Inputs"
  testScript: "r.sh"
  inputFile: "t.c"
  deps: []
  sourceFile: "t.c"
resultOutputFlags:
  groupName: "Outputs"
  outputDir: "result_reduce_c_program_with_identifier_replacement_perses_node_priority_with_dfs_delta_t.c"
reductionControlFlags:
  groupName: "General Reduction Control"
  fixpoint: true
  numOfThreads: 1
  codeFormat: "ORIG_FORMAT"
  testScriptExecutionTimeoutInSeconds: 600
  testScriptExecutionKeepWaitingAfterTimeout: true
outputRefiningFlags:
  groupName: "Output Refining Control"
  callFormatter: false
  formatCmd: ""
  callCReduce: false
  creduceCmd: "creduce"
algorithmControlFlags:
  groupName: "Reduction Algorithm Control"
  reductionAlgorithm: "perses_node_priority_with_dfs_delta"
  listAllReductionAlgorithms: false
  rebuildParseTreeEachIteration: true
  enableTokenSlicer: false
  enableTreeSlicer: false
  enableLineSlicer: false
  defaultDeltaDebuggerTypeForKleene: "DFS"
  maxEditCountForRegularRuleNode: 100
  maxBfsDepthForRegularRuleNode: 5
  stopAtFirstCompatibleChildForRegularRuleNode: false
languageControlFlags:
  groupName: "Language Control"
  languageName: ""
  listLangs: false
  designatedParserFacadeClassName: ""
  listParserFacades: false
  languageJarFiles: []
vulcanFlags:
  groupName: "Vulcan Reducer Control"
  enableVulcan: false
  nonDeletionIterationLimit: 10
  windowSize: 4
  vulcanFixpoint: false
trecFlags:
  groupName: "T-Rec Reducer Control"
  enableTrec: false
profilingFlags:
  groupName: "Profiling"
  progressDumpFile: "progress_dump_identifier_replacement.txt"
  appendToProgressDumpFile: true
  statDumpFile: null
  profileQueryCacheTime: null
  profileQueryCacheTimeCSV: null
  profileQueryCacheMemory: null
  actionSetProfiler: null
  profileDeltaDebugger: null
cacheControlFlags:
  groupName: "Cache Control"
  queryCaching: "FALSE"
  nodeActionSetCaching: false
  queryCacheRefreshThreshold: 0
  enableLightweightRefreshing: true
  enablePassCache: false
  globalCacheFile: null
  pathToSaveUpdatedGlobalCache: null
experimentFlags:
  groupName: "Experiment Control"
  cacheType: "COMPACT_QUERY_CACHE"
  onDemandReducerClasses:
  - "org.perses.reduction.reducer.vulcan.IdentifierReplacementReducer"

Parser Facade: class org.perses.grammar.c.PnfCParserFacade
------------------------------------------------------------


The sanity check has been performed. The result is PassingSanityCheckResult
=Fixpoint iteration 1. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=265,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=156,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=157,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=260,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=264,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=237,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=259,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=239,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=241,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=242,slot_type=LeftParen}
    |   |           |___(+) {id=248,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=258,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=255,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=244,slot_type=RightParen}
    |   |___compoundStatement {id=159,slot_type=compoundStatement}
    |       |___Token:{ {id=160,slot_type=LeftBrace}
    |       |___(?) {id=161,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=164,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=168,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
    |       |           |___(?) {id=169,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=187,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
    |       |           |       |___Token:printf {id=236,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=189,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=191,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=192,slot_type=LeftParen}
    |       |           |               |___(?) {id=193,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=195,slot_type=expression}
    |       |           |               |       |___(+) {id=234,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=235,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=197,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=198,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=199,slot_type=Comma}
    |       |           |               |               |___Token:i {id=217,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=194,slot_type=RightParen}
    |       |           |___Token:; {id=170,slot_type=Semi}
    |       |___Token:} {id=162,slot_type=RightBrace}
    |___functionDefinition {id=6,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=7,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=151,slot_type=declarationSpecifiers}
        |       |___Token:int {id=155,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=142,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=150,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=144,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=146,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=147,slot_type=LeftParen}
        |           |___Token:) {id=149,slot_type=RightParen}
        |___compoundStatement {id=9,slot_type=compoundStatement}
            |___Token:{ {id=10,slot_type=LeftBrace}
            |___(?) {id=11,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=14,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=106,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=107,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=141,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=108,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=111,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=137,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=113,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=114,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=115,slot_type=Assign}
            |       |   |               |___Token:123 {id=134,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=109,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=69,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=70,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=104,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=71,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=74,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=100,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=76,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=77,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=78,slot_type=Assign}
            |       |   |               |___Token:123 {id=97,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=72,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=47,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=48,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=67,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=49,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=56,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=57,slot_type=LeftParen}
            |       |   |       |___Token:b {id=62,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=59,slot_type=RightParen}
            |       |   |___Token:; {id=50,slot_type=Semi}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:a {id=45,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=12,slot_type=RightBrace}
------------------------------------------------------------


==================Reducing node 2, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 2
------------------------------------------------------------


==================Reducing node 6, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
           ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
           ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int a = 123;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int a = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int b = 123;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int b = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       f(b);
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       f(b);
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 6
------------------------------------------------------------


==================Reducing node 9, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 9
------------------------------------------------------------


=================Reducing node 11, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 11
------------------------------------------------------------


=================Reducing node 14, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 14
------------------------------------------------------------


=================Reducing node 156, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                        ;
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                        ;
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 156
------------------------------------------------------------


=================Reducing node 159, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 159
------------------------------------------------------------


=================Reducing node 161, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 161
------------------------------------------------------------


=================Reducing node 164, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 164
------------------------------------------------------------


=================Reducing node 168, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 168
------------------------------------------------------------


=================Reducing node 169, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 169
------------------------------------------------------------


=================Reducing node 187, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
              "%d\n"    ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
              "%d\n"    ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
              "%d\n", i ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
              "%d\n", i ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 187
------------------------------------------------------------


=================Reducing node 237, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void       i {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void       i {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 237
------------------------------------------------------------


=================Reducing node 189, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 189
------------------------------------------------------------


=================Reducing node 191, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 191
------------------------------------------------------------


=================Reducing node 106, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
                  ;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
                  ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 106
------------------------------------------------------------


=================Reducing node 69, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
                  ;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
                  ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 69
------------------------------------------------------------


=================Reducing node 47, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
           ;
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
           ;
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 47
------------------------------------------------------------


=================Reducing node 239, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 239
------------------------------------------------------------


=================Reducing node 241, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 241
------------------------------------------------------------


=================Reducing node 193, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 193
------------------------------------------------------------


=================Reducing node 195, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf(        i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf(        i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 195
------------------------------------------------------------


=================Reducing node 142, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 142
------------------------------------------------------------


=================Reducing node 108, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 108
------------------------------------------------------------


=================Reducing node 111, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 111
------------------------------------------------------------


=================Reducing node 71, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int        ;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int        ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 71
------------------------------------------------------------


=================Reducing node 74, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int        ;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int        ;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 74
------------------------------------------------------------


=================Reducing node 49, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f   ;
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f   ;
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 49
------------------------------------------------------------


=================Reducing node 56, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f   ;
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f   ;
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f b ;
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f b ;
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 56
------------------------------------------------------------


=================Reducing node 21, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
               ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 21
------------------------------------------------------------


=================Reducing node 248, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(     ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(     ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(    i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(    i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 248
------------------------------------------------------------


=================Reducing node 197, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 197
------------------------------------------------------------


=================Reducing node 198, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 198
------------------------------------------------------------


=================Reducing node 144, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 144
------------------------------------------------------------


=================Reducing node 146, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 146
------------------------------------------------------------


=================Reducing node 113, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 113
------------------------------------------------------------


=================Reducing node 114, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a      ;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 114
------------------------------------------------------------


=================Reducing node 76, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 76
------------------------------------------------------------


=================Reducing node 77, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b      ;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 77
------------------------------------------------------------


=================Reducing node 24, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return  ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 24
------------------------------------------------------------


=================Reducing node 265, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 265
------------------------------------------------------------


=================Reducing node 259, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 259
------------------------------------------------------------


=================Reducing node 258, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 258
------------------------------------------------------------


=================Reducing node 255, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 255
------------------------------------------------------------


=================Reducing node 244, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 244
------------------------------------------------------------


=================Reducing node 242, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 242
------------------------------------------------------------


=================Reducing node 236, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 236
------------------------------------------------------------


=================Reducing node 234, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 234
------------------------------------------------------------


=================Reducing node 235, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 235
------------------------------------------------------------


=================Reducing node 217, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 217
------------------------------------------------------------


=================Reducing node 199, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 199
------------------------------------------------------------


=================Reducing node 194, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 194
------------------------------------------------------------


=================Reducing node 192, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 192
------------------------------------------------------------


=================Reducing node 170, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 170
------------------------------------------------------------


=================Reducing node 162, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 162
------------------------------------------------------------


=================Reducing node 160, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 160
------------------------------------------------------------


=================Reducing node 157, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 157
------------------------------------------------------------


=================Reducing node 260, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: t.c--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 260
------------------------------------------------------------


=================Reducing node 264, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 264
------------------------------------------------------------


=================Reducing node 150, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 150
------------------------------------------------------------


=================Reducing node 149, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 149
------------------------------------------------------------


=================Reducing node 147, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 147
------------------------------------------------------------


=================Reducing node 137, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 137
------------------------------------------------------------


=================Reducing node 134, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 134
------------------------------------------------------------


=================Reducing node 115, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 115
------------------------------------------------------------


=================Reducing node 109, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 109
------------------------------------------------------------


=================Reducing node 107, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 107
------------------------------------------------------------


=================Reducing node 141, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 141
------------------------------------------------------------


=================Reducing node 100, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 100
------------------------------------------------------------


=================Reducing node 97, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 97
------------------------------------------------------------


=================Reducing node 78, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 78
------------------------------------------------------------


=================Reducing node 72, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 72
------------------------------------------------------------


=================Reducing node 70, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 70
------------------------------------------------------------


=================Reducing node 104, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 104
------------------------------------------------------------


=================Reducing node 62, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 62
------------------------------------------------------------


=================Reducing node 59, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 59
------------------------------------------------------------


=================Reducing node 57, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 57
------------------------------------------------------------


=================Reducing node 50, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 50
------------------------------------------------------------


=================Reducing node 48, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 48
------------------------------------------------------------


=================Reducing node 67, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 67
------------------------------------------------------------


=================Reducing node 26, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return  ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 26
------------------------------------------------------------


=================Reducing node 45, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 45
------------------------------------------------------------


=================Reducing node 25, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 25
------------------------------------------------------------


=================Reducing node 23, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 23
------------------------------------------------------------


=================Reducing node 12, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 12
------------------------------------------------------------


=================Reducing node 10, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 10
------------------------------------------------------------


==================Reducing node 7, size=40==================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 7
------------------------------------------------------------


=================Reducing node 151, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 151
------------------------------------------------------------


=================Reducing node 155, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return a;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 155
------------------------------------------------------------


=======Fixpoint iteration 2. Reducer: token_replacer========

The spar-tree is the following.
translationUnit {id=1,slot_type=translationUnit}
|___(+) {id=2,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=265,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=156,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=157,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=260,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=264,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=237,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=259,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=239,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=241,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=242,slot_type=LeftParen}
    |   |           |___(+) {id=248,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=258,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=255,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=244,slot_type=RightParen}
    |   |___compoundStatement {id=159,slot_type=compoundStatement}
    |       |___Token:{ {id=160,slot_type=LeftBrace}
    |       |___(?) {id=161,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=164,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=168,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
    |       |           |___(?) {id=169,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=187,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
    |       |           |       |___Token:printf {id=236,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=189,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=191,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=192,slot_type=LeftParen}
    |       |           |               |___(?) {id=193,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=195,slot_type=expression}
    |       |           |               |       |___(+) {id=234,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=235,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=197,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=198,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=199,slot_type=Comma}
    |       |           |               |               |___Token:i {id=217,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=194,slot_type=RightParen}
    |       |           |___Token:; {id=170,slot_type=Semi}
    |       |___Token:} {id=162,slot_type=RightBrace}
    |___functionDefinition {id=6,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=7,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=151,slot_type=declarationSpecifiers}
        |       |___Token:int {id=155,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=142,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=150,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=144,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=146,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=147,slot_type=LeftParen}
        |           |___Token:) {id=149,slot_type=RightParen}
        |___compoundStatement {id=9,slot_type=compoundStatement}
            |___Token:{ {id=10,slot_type=LeftBrace}
            |___(?) {id=11,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=14,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=106,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=107,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=141,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=108,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=111,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=137,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=113,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=114,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=115,slot_type=Assign}
            |       |   |               |___Token:123 {id=134,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=109,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=69,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=70,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=104,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=71,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=74,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=100,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=76,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=77,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=78,slot_type=Assign}
            |       |   |               |___Token:123 {id=97,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=72,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=47,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=48,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=67,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=49,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=56,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=57,slot_type=LeftParen}
            |       |   |       |___Token:b {id=62,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=59,slot_type=RightParen}
            |       |   |___Token:; {id=50,slot_type=Semi}
            |       |___jumpStatement {id=21,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=24,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=25,slot_type=Return}
            |           |   |___(?) {id=26,slot_type=optional__postfixExpression_1}
            |           |       |___Token:a {id=45,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=23,slot_type=Semi}
            |___Token:} {id=12,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return i;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return f;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return f;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


=Fixpoint iteration 3. Reducer: perses_node_priority_with_dfs_delta

The spar-tree is the following.
translationUnit {id=270,slot_type=translationUnit}
|___(+) {id=271,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=534,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=425,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=426,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=529,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=533,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=506,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=528,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=508,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=510,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=511,slot_type=LeftParen}
    |   |           |___(+) {id=517,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=527,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=524,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=513,slot_type=RightParen}
    |   |___compoundStatement {id=428,slot_type=compoundStatement}
    |       |___Token:{ {id=429,slot_type=LeftBrace}
    |       |___(?) {id=430,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=433,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=437,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
    |       |           |___(?) {id=438,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=456,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
    |       |           |       |___Token:printf {id=505,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=458,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=460,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=461,slot_type=LeftParen}
    |       |           |               |___(?) {id=462,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=464,slot_type=expression}
    |       |           |               |       |___(+) {id=503,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=504,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=466,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=467,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=468,slot_type=Comma}
    |       |           |               |               |___Token:i {id=486,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=463,slot_type=RightParen}
    |       |           |___Token:; {id=439,slot_type=Semi}
    |       |___Token:} {id=431,slot_type=RightBrace}
    |___functionDefinition {id=275,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=276,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=420,slot_type=declarationSpecifiers}
        |       |___Token:int {id=424,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=411,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=419,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=413,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=415,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=416,slot_type=LeftParen}
        |           |___Token:) {id=418,slot_type=RightParen}
        |___compoundStatement {id=278,slot_type=compoundStatement}
            |___Token:{ {id=279,slot_type=LeftBrace}
            |___(?) {id=280,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=283,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=375,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=376,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=410,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=377,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=380,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:a {id=406,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=382,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=383,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=384,slot_type=Assign}
            |       |   |               |___Token:123 {id=403,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=378,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=338,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=339,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=373,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=340,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=343,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=369,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=345,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=346,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=347,slot_type=Assign}
            |       |   |               |___Token:123 {id=366,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=341,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=316,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=317,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=336,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=318,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=325,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=326,slot_type=LeftParen}
            |       |   |       |___Token:b {id=331,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=328,slot_type=RightParen}
            |       |   |___Token:; {id=319,slot_type=Semi}
            |       |___jumpStatement {id=290,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=293,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=294,slot_type=Return}
            |           |   |___(?) {id=295,slot_type=optional__postfixExpression_1}
            |           |       |___Token:b {id=314,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=292,slot_type=Semi}
            |___Token:} {id=281,slot_type=RightBrace}
------------------------------------------------------------


=================Reducing node 271, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@2
    --file: t.c--
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__translationUnit_3]dd@1
    --file: t.c--
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 271
------------------------------------------------------------


=================Reducing node 275, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
                  ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
           ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
           ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
               ;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
               ;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int a = 123;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int a = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int b = 123;
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       int b = 123;
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       f(b);
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
       f(b);
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 275
------------------------------------------------------------


=================Reducing node 278, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 278
------------------------------------------------------------


=================Reducing node 280, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 280
------------------------------------------------------------


=================Reducing node 283, size=40=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]remove whole except first
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       int b = 123;
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@2
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int a = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: pass=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===========TestScriptExecutionCacheEntryEviction============

0 entries are removed: 0 --> 0.
------------------------------------------------------------


===========Node edit action set cache is cleared.===========

    size before clearance = 0
------------------------------------------------------------


===================Node reduction is done===================

Succeeded to reduce node 283 from 40 to 35
------------------------------------------------------------


=================Reducing node 425, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
                        ;
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
                        ;
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 425
------------------------------------------------------------


=================Reducing node 428, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 428
------------------------------------------------------------


=================Reducing node 430, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__compoundStatement_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 430
------------------------------------------------------------


=================Reducing node 433, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:kleene_plus__blockItemList_3]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 433
------------------------------------------------------------


=================Reducing node 437, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 437
------------------------------------------------------------


=================Reducing node 438, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 438
------------------------------------------------------------


=================Reducing node 456, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
                        ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
              "%d\n"    ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
              "%d\n"    ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
              "%d\n", i ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
              "%d\n", i ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 456
------------------------------------------------------------


=================Reducing node 506, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void       i {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void       i {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 506
------------------------------------------------------------


=================Reducing node 458, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__postfixExpression_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 458
------------------------------------------------------------


=================Reducing node 460, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf           ;
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 460
------------------------------------------------------------


=================Reducing node 338, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
                  ;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
                  ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 338
------------------------------------------------------------


=================Reducing node 316, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
           ;
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
           ;
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 316
------------------------------------------------------------


=================Reducing node 508, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 508
------------------------------------------------------------


=================Reducing node 510, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f       {
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 510
------------------------------------------------------------


=================Reducing node 462, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 462
------------------------------------------------------------


=================Reducing node 464, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf(         );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf(        i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf(        i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 464
------------------------------------------------------------


=================Reducing node 411, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 411
------------------------------------------------------------


=================Reducing node 340, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 340
------------------------------------------------------------


=================Reducing node 343, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int        ;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 343
------------------------------------------------------------


=================Reducing node 318, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__declaration_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f   ;
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f   ;
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 318
------------------------------------------------------------


=================Reducing node 325, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f   ;
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f   ;
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f b ;
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f b ;
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 325
------------------------------------------------------------


=================Reducing node 290, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
               ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
               ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 290
------------------------------------------------------------


=================Reducing node 517, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(     ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(     ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]remove whole except first
    --file: t.c--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int  ){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(    i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(    i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 517
------------------------------------------------------------


=================Reducing node 466, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__expression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 466
------------------------------------------------------------


=================Reducing node 467, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n"   );
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 467
------------------------------------------------------------


=================Reducing node 413, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:kleene_star__directDeclarator_7]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 413
------------------------------------------------------------


=================Reducing node 415, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main   {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 415
------------------------------------------------------------


=================Reducing node 345, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__initDeclarator_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 345
------------------------------------------------------------


=================Reducing node 346, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular_node]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b      ;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 346
------------------------------------------------------------


=================Reducing node 293, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [regular node]compatible replacement
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return  ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 293
------------------------------------------------------------


=================Reducing node 534, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 534
------------------------------------------------------------


=================Reducing node 528, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 528
------------------------------------------------------------


=================Reducing node 527, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 527
------------------------------------------------------------


=================Reducing node 524, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 524
------------------------------------------------------------


=================Reducing node 513, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 513
------------------------------------------------------------


=================Reducing node 511, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 511
------------------------------------------------------------


=================Reducing node 505, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 505
------------------------------------------------------------


=================Reducing node 503, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 503
------------------------------------------------------------


=================Reducing node 504, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 504
------------------------------------------------------------


=================Reducing node 486, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 486
------------------------------------------------------------


=================Reducing node 468, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 468
------------------------------------------------------------


=================Reducing node 463, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 463
------------------------------------------------------------


=================Reducing node 461, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 461
------------------------------------------------------------


=================Reducing node 439, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 439
------------------------------------------------------------


=================Reducing node 431, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 431
------------------------------------------------------------


=================Reducing node 429, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 429
------------------------------------------------------------


=================Reducing node 426, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 426
------------------------------------------------------------


=================Reducing node 529, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: t.c--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
         f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 529
------------------------------------------------------------


=================Reducing node 533, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 533
------------------------------------------------------------


=================Reducing node 419, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 419
------------------------------------------------------------


=================Reducing node 418, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 418
------------------------------------------------------------


=================Reducing node 416, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 416
------------------------------------------------------------


=================Reducing node 369, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 369
------------------------------------------------------------


=================Reducing node 366, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 366
------------------------------------------------------------


=================Reducing node 347, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 347
------------------------------------------------------------


=================Reducing node 341, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 341
------------------------------------------------------------


=================Reducing node 339, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 339
------------------------------------------------------------


=================Reducing node 373, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 373
------------------------------------------------------------


=================Reducing node 331, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 331
------------------------------------------------------------


=================Reducing node 328, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 328
------------------------------------------------------------


=================Reducing node 326, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 326
------------------------------------------------------------


=================Reducing node 319, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 319
------------------------------------------------------------


=================Reducing node 317, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 317
------------------------------------------------------------


=================Reducing node 336, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 336
------------------------------------------------------------


=================Reducing node 295, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__postfixExpression_1]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return  ;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return  ;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 295
------------------------------------------------------------


=================Reducing node 314, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 314
------------------------------------------------------------


=================Reducing node 294, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 294
------------------------------------------------------------


=================Reducing node 292, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 292
------------------------------------------------------------


=================Reducing node 281, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 281
------------------------------------------------------------


=================Reducing node 279, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 279
------------------------------------------------------------


=================Reducing node 276, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_star:optional__functionDefinition_2]dd@1
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 276
------------------------------------------------------------


=================Reducing node 420, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: [kleene_plus:declarationSpecifiers]can be epsilon
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
        main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 420
------------------------------------------------------------


=================Reducing node 424, size=35=================

The current best program is the following

    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


===================Node reduction is done===================

Failed to reduce node 424
------------------------------------------------------------


=======Fixpoint iteration 4. Reducer: token_replacer========

The spar-tree is the following.
translationUnit {id=270,slot_type=translationUnit}
|___(+) {id=271,slot_type=kleene_plus__translationUnit_3}
    |___Token:#include <stdio.h> {id=534,slot_type=[aux_rule__translationUnit_2,IncludeDirective]}
    |___functionDefinition {id=425,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
    |   |___(?) {id=426,slot_type=optional__functionDefinition_2}
    |   |   |___(+) {id=529,slot_type=declarationSpecifiers}
    |   |       |___Token:void {id=533,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Void]}
    |   |___directDeclarator {id=506,slot_type=[declarator,directDeclarator]}
    |   |   |___Token:f {id=528,slot_type=[aux_rule__directDeclarator_9,Identifier]}
    |   |   |___(*) {id=508,slot_type=kleene_star__directDeclarator_7}
    |   |       |___aux_rule__directDeclarator_15 {id=510,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
    |   |           |___Token:( {id=511,slot_type=LeftParen}
    |   |           |___(+) {id=517,slot_type=[altnt_block__directDeclarator_11,parameterTypeList,parameterList,parameterDeclaration,declarationSpecifiers]}
    |   |           |   |___Token:int {id=527,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
    |   |           |   |___Token:i {id=524,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
    |   |           |___Token:) {id=513,slot_type=RightParen}
    |   |___compoundStatement {id=428,slot_type=compoundStatement}
    |       |___Token:{ {id=429,slot_type=LeftBrace}
    |       |___(?) {id=430,slot_type=optional__compoundStatement_1}
    |       |   |___(+) {id=433,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
    |       |       |___expressionStatement {id=437,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,expressionStatement]}
    |       |           |___(?) {id=438,slot_type=optional__postfixExpression_1}
    |       |           |   |___postfixExpression {id=456,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression]}
    |       |           |       |___Token:printf {id=505,slot_type=[aux_rule__postfixExpression_4,Identifier]}
    |       |           |       |___(*) {id=458,slot_type=kleene_star__postfixExpression_2}
    |       |           |           |___aux_rule__postfixExpression_11 {id=460,slot_type=[aux_rule__postfixExpression_3,aux_rule__postfixExpression_11]}
    |       |           |               |___Token:( {id=461,slot_type=LeftParen}
    |       |           |               |___(?) {id=462,slot_type=optional__postfixExpression_1}
    |       |           |               |   |___expression {id=464,slot_type=expression}
    |       |           |               |       |___(+) {id=503,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,kleene_plus__primaryExpression_1]}
    |       |           |               |       |   |___Token:"%d\n" {id=504,slot_type=StringLiteral}
    |       |           |               |       |___(*) {id=466,slot_type=kleene_star__expression_1}
    |       |           |               |           |___aux_rule__expression_2 {id=467,slot_type=aux_rule__expression_2}
    |       |           |               |               |___Token:, {id=468,slot_type=Comma}
    |       |           |               |               |___Token:i {id=486,slot_type=[assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
    |       |           |               |___Token:) {id=463,slot_type=RightParen}
    |       |           |___Token:; {id=439,slot_type=Semi}
    |       |___Token:} {id=431,slot_type=RightBrace}
    |___functionDefinition {id=275,slot_type=[aux_rule__translationUnit_2,functionDefinition]}
        |___(?) {id=276,slot_type=optional__functionDefinition_2}
        |   |___(+) {id=420,slot_type=declarationSpecifiers}
        |       |___Token:int {id=424,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
        |___directDeclarator {id=411,slot_type=[declarator,directDeclarator]}
        |   |___Token:main {id=419,slot_type=[aux_rule__directDeclarator_9,Identifier]}
        |   |___(*) {id=413,slot_type=kleene_star__directDeclarator_7}
        |       |___aux_rule__directDeclarator_15 {id=415,slot_type=[aux_rule__directDeclarator_8,aux_rule__directDeclarator_15]}
        |           |___Token:( {id=416,slot_type=LeftParen}
        |           |___Token:) {id=418,slot_type=RightParen}
        |___compoundStatement {id=278,slot_type=compoundStatement}
            |___Token:{ {id=279,slot_type=LeftBrace}
            |___(?) {id=280,slot_type=optional__compoundStatement_1}
            |   |___(+) {id=283,slot_type=[blockItemList,kleene_plus__blockItemList_3]}
            |       |___aux_rule__declaration_3 {id=338,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=339,slot_type=declarationSpecifiers}
            |       |   |   |___Token:int {id=373,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,Int]}
            |       |   |___(?) {id=340,slot_type=optional__declaration_2}
            |       |   |   |___initDeclarator {id=343,slot_type=[initDeclaratorList,initDeclarator]}
            |       |   |       |___Token:b {id=369,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___(?) {id=345,slot_type=optional__initDeclarator_2}
            |       |   |           |___aux_rule__initDeclarator_1 {id=346,slot_type=aux_rule__initDeclarator_1}
            |       |   |               |___Token:= {id=347,slot_type=Assign}
            |       |   |               |___Token:123 {id=366,slot_type=[initializer,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Constant]}
            |       |   |___Token:; {id=341,slot_type=Semi}
            |       |___aux_rule__declaration_3 {id=316,slot_type=[aux_rule__blockItemList_2,declaration,aux_rule__declaration_3]}
            |       |   |___(+) {id=317,slot_type=declarationSpecifiers}
            |       |   |   |___Token:f {id=336,slot_type=[declarationSpecifier,typeSpecifierWithAttrList,typeSpecifier,typedefName,Identifier]}
            |       |   |___(?) {id=318,slot_type=optional__declaration_2}
            |       |   |   |___aux_rule__directDeclarator_16 {id=325,slot_type=[initDeclaratorList,initDeclarator,declarator,directDeclarator,aux_rule__directDeclarator_9,aux_rule__directDeclarator_16]}
            |       |   |       |___Token:( {id=326,slot_type=LeftParen}
            |       |   |       |___Token:b {id=331,slot_type=[declarator,directDeclarator,aux_rule__directDeclarator_9,Identifier]}
            |       |   |       |___Token:) {id=328,slot_type=RightParen}
            |       |   |___Token:; {id=319,slot_type=Semi}
            |       |___jumpStatement {id=290,slot_type=[aux_rule__blockItemList_2,statement,aux_rule__statement_3,jumpStatement]}
            |           |___aux_rule__jumpStatement_4 {id=293,slot_type=[altnt_block__jumpStatement_2,aux_rule__jumpStatement_4]}
            |           |   |___Token:return {id=294,slot_type=Return}
            |           |   |___(?) {id=295,slot_type=optional__postfixExpression_1}
            |           |       |___Token:b {id=314,slot_type=[expression,assignmentExpression,conditionalExpression,logicalOrExpression,logicalAndExpression,inclusiveOrExpression,exclusiveOrExpression,andExpression,equalityExpression,relationalExpression,shiftExpression,additiveExpression,multiplicativeExpression,castExpression,unaryExpression,aux_rule__unaryExpression_3,postfixExpression,aux_rule__postfixExpression_4,Identifier]}
            |           |___Token:; {id=292,slot_type=Semi}
            |___Token:} {id=281,slot_type=RightBrace}
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       b(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       b(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       i(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       i(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       printf(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       printf(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       main(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       main(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", b);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", b);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", f);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", f);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", printf);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", printf);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", main);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", main);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(i);
       return i;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(i);
       return i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(f);
       return f;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(f);
       return f;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(printf);
       return printf;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(printf);
       return printf;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 2 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(main);
       return main;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(main);
       return main;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int b   () {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int b   () {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int i   () {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int i   () {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int f   () {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int f   () {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int printf(){
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int printf(){
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       b     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       b     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       i     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       i     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       f     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       f     ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       main  ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       main  ("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void b(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void b(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void i(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void i(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void printf(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void printf(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void main(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void main(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'b'
    --file: t.c--
    #include <stdio.h>
    void f(int b){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int b){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int f){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int f){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int printf){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int printf){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int main){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int main){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int i = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int i = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int f = 123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int f = 123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int printf=123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int printf=123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int main=123;
       f(b);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int main=123;
       f(b);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(i);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(i);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(f);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(f);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(printf);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(printf);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(main);
       return b;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(main);
       return b;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'i'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return i;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return i;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'f'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return f;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return f;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'printf'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return printf;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return printf;
    }
------------------------------------------------------------


============Testing the following program: fail=============

// edit action set type: replace 1 lexer nodes with new lexeme 'main'
    --file: t.c--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return main;
    }
    --file: <formatted tokenized program in its original format>--
    #include <stdio.h>
    void f(int i){
       printf("%d\n", i);
    }
    int main() {
       int b = 123;
       f(b);
       return main;
    }
------------------------------------------------------------


#test success = 2
#test failure = 194
#test result cache hits = 0
#test execution cancelled = 0
#node edit action set cache hits = 0
#external test execution cache hits = 0
