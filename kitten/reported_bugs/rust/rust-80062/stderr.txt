warning: type parameter `usize` should have an upper camel case name

 --> mutant.rs:1:20

  |

1 | pub const fn sof < usize > ( ) -> usize {

  |                    ^^^^^ help: convert the identifier to upper camel case (notice the capitalization): `Usize`

  |

  = note: `#[warn(non_camel_case_types)]` on by default



error[E0308]: mismatched types

 --> mutant.rs:2:1

  |

1 | pub const fn sof < usize > ( ) -> usize {

  |                    -----          ----- expected `usize` because of return type

  |                    |

  |                    this type parameter

2 | 10

  | ^^ expected type parameter `usize`, found integer

  |

  = note: expected type parameter `usize`

                       found type `{integer}`



error[E0277]: the size for values of type `T` cannot be known at compilation time

 --> mutant.rs:5:25

  |

1 | pub const fn sof < usize > ( ) -> usize {

  |                    ----- required by this bound in `sof`

...

4 | fn test < T > ( ) {

  |           - this type parameter needs to be `Sized`

5 | let _ : [ u8 ; sof :: < T > ( ) ] ;

  |                         ^ doesn't have a size known at compile-time

  |

help: consider relaxing the implicit `Sized` restriction

  |

1 | pub const fn sof < usize: ?Sized > ( ) -> usize {

  |                         ^^^^^^^^



thread 'rustc' panicked at 'index out of bounds: the len is 0 but the index is 0', compiler/rustc_middle/src/ty/mod.rs:966:14

note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace



error: internal compiler error: unexpected panic



note: the compiler unexpectedly panicked. this is a bug.



note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md



note: rustc 1.50.0-nightly (3d6705aa5 2020-12-07) running on x86_64-unknown-linux-gnu



note: compiler flags: -Z mir-opt-level=1 -Z new-llvm-pass-manager=yes -Z unsound-mir-opts=yes -Z polonius=yes -Z polymorphize=yes -C debuginfo=2 -C opt-level=1 --crate-type staticlib



query stack during panic:

#0 [typeck] type-checking `test::{constant#0}`

#1 [eval_to_allocation_raw] const-evaluating + checking `test::{constant#0}`

end of query stack

error: aborting due to 2 previous errors; 1 warning emitted



Some errors have detailed explanations: E0277, E0308.

For more information about an error, try `rustc --explain E0277`.

