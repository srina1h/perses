error[E0071]: expected struct, variant or union type, found associated type

 --> mutant.rs:9:9

  |

9 | let s = T :: A { } ;

  |         ^^^^^^ not a struct



error[E0109]: type arguments are not allowed for this type

  --> mutant.rs:10:21

   |

10 | let z = T :: A :: < u8 > { } ;

   |                     ^^ type argument not allowed



error[E0071]: expected struct, variant or union type, found associated type

  --> mutant.rs:10:9

   |

10 | let z = T :: A :: < u8 > { } ;

   |         ^^^^^^^^^^^^^^^^ not a struct



error[E0071]: expected struct, variant or union type, found associated type

  --> mutant.rs:12:1

   |

12 | T :: A { } => { }

   | ^^^^^^ not a struct



error[E0109]: type arguments are not allowed for this type

  --> mutant.rs:17:21

   |

17 | let z = T :: A :: < u8 > { } ;

   |                     ^^ type argument not allowed



error[E0223]: ambiguous associated type

  --> mutant.rs:23:9

   |

23 | let s = S :: A { } ;

   |         ^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`



error[E0223]: ambiguous associated type

  --> mutant.rs:24:9

   |

24 | let z = S :: A :: < f > { } ;

   |         ^^^^^^^^^^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`



error[E0223]: ambiguous associated type

  --> mutant.rs:26:1

   |

26 | S :: A { } => { }

   | ^^^^^^ help: use fully-qualified syntax: `<S as Trait>::A`



error: internal compiler error: compiler/rustc_typeck/src/collect/type_of.rs:82:26: unexpected const parent path Expr(Expr { hir_id: HirId { owner: DefId(0:13 ~ mutant[8787]::main), local_id: 16 }, kind: Struct(TypeRelative(Ty { hir_id: HirId { owner: DefId(0:13 ~ mutant[8787]::main), local_id: 11 }, kind: Path(Resolved(None, Path { span: mutant.rs:24:9: 24:24 (#0), res: Def(Struct, DefId(0:3 ~ mutant[8787]::S)), segments: [PathSegment { ident: S#0, hir_id: Some(HirId { owner: DefId(0:13 ~ mutant[8787]::main), local_id: 10 }), res: Some(Err), args: None, infer_args: true }] })), span: mutant.rs:24:9: 24:24 (#0) }, PathSegment { ident: A#0, hir_id: Some(HirId { owner: DefId(0:13 ~ mutant[8787]::main), local_id: 15 }), res: Some(Err), args: Some(GenericArgs { args: [Const(ConstArg { value: AnonConst { hir_id: HirId { owner: DefId(0:13 ~ mutant[8787]::main), local_id: 12 }, body: BodyId { hir_id: HirId { owner: DefId(0:13 ~ mutant[8787]::main), local_id: 14 } } }, span: mutant.rs:24:21: 24:22 (#0) })], bindings: [], parenthesized: false }), infer_args: false }), [], None), attrs: ThinVec(None), span: mutant.rs:24:9: 24:28 (#0) })



thread 'rustc' panicked at 'Box<Any>', /rustc/ffa2e7ae8fbf9badc035740db949b9dae271c29f/compiler/rustc_errors/src/lib.rs:891:9

note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace



note: the compiler unexpectedly panicked. this is a bug.



note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md



note: rustc 1.49.0-nightly (ffa2e7ae8 2020-10-24) running on x86_64-unknown-linux-gnu



note: compiler flags: -C debuginfo=2 -C opt-level=z -C target-cpu=skylake --crate-type staticlib



query stack during panic:

#0 [opt_const_param_of] computing the optional const parameter of `main::{constant#0}`

#1 [typeck] type-checking `main::{constant#0}`

end of query stack

error: aborting due to 9 previous errors



Some errors have detailed explanations: E0071, E0109, E0223.

For more information about an error, try `rustc --explain E0071`.

