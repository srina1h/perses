warning: trait objects without an explicit `dyn` are deprecated

  --> mutant.rs:37:66

   |

37 | let mut res = < C :: Family as CollectionFamily > :: Member :: < CollectionFamily > :: empty ( ) ;

   |                                                                  ^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn CollectionFamily`

   |

   = note: `#[warn(bare_trait_objects)]` on by default



error[E0191]: the value of the associated type `Member` (from trait `CollectionFamily`) must be specified

  --> mutant.rs:37:66

   |

14 | type Member < T > : Collection < T , Family = Self > ;

   | ------------------------------------------------------ `Member` defined here

...

37 | let mut res = < C :: Family as CollectionFamily > :: Member :: < CollectionFamily > :: empty ( ) ;

   |                                                                  ^^^^^^^^^^^^^^^^ help: specify the associated type: `CollectionFamily<Member = Type>`



error[E0599]: no function or associated item named `empty` found for associated type `<<C as Collection<i32>>::Family as CollectionFamily>::Member<dyn CollectionFamily>` in the current scope

  --> mutant.rs:37:88

   |

13 | trait CollectionFamily {

   | ---------------------- doesn't satisfy `dyn CollectionFamily: Sized`

...

37 | let mut res = < C :: Family as CollectionFamily > :: Member :: < CollectionFamily > :: empty ( ) ;

   |                                                                                        ^^^^^ function or associated item not found in `<<C as Collection<i32>>::Family as CollectionFamily>::Member<dyn CollectionFamily>`

   |

   = note: the method `empty` exists but the following trait bounds were not satisfied:

           `dyn CollectionFamily: Sized`

           which is required by `<<C as Collection<i32>>::Family as CollectionFamily>::Member<dyn CollectionFamily>: Collection<dyn CollectionFamily>`



error: internal compiler error: compiler/rustc_middle/src/ty/subst.rs:528:17: type parameter `T/#1` (T/1) out of range when substituting, substs=[Self]



thread 'rustc' panicked at 'Box<Any>', /rustc/ffa2e7ae8fbf9badc035740db949b9dae271c29f/compiler/rustc_errors/src/lib.rs:891:9

note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace



note: the compiler unexpectedly panicked. this is a bug.



note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md



note: rustc 1.49.0-nightly (ffa2e7ae8 2020-10-24) running on x86_64-unknown-linux-gnu



note: compiler flags: -C debuginfo=2 -C opt-level=1 -C target-cpu=skylake --crate-type staticlib



query stack during panic:

#0 [object_safety_violations] determine object safety of trait `CollectionFamily`

#1 [typeck] type-checking `floatify`

end of query stack

error: aborting due to 3 previous errors; 1 warning emitted



Some errors have detailed explanations: E0191, E0599.

For more information about an error, try `rustc --explain E0191`.

