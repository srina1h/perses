warning: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present

 --> mutant.rs:9:15

  |

4 | fn func < 'a , U > ( & 'a self ) -> U {

  |           -- the late bound lifetime parameter is introduced here

...

9 | S . func :: < 'a , dont_crash > ( )

  |               ^^

  |

  = note: `#[warn(late_bound_lifetime_arguments)]` on by default

  = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!

  = note: for more information, see issue #42868 <https://github.com/rust-lang/rust/issues/42868>



warning: 1 warning emitted



error: internal compiler error: unexpected const parent in type_of_def_id(): Expr(Expr { hir_id: HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 8 }, kind: MethodCall(PathSegment { ident: func#0, hir_id: Some(HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 5 }), res: Some(Err), args: Some(GenericArgs { args: [Lifetime(lifetime(HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 1 }: 'a)), Const(ConstArg { value: AnonConst { hir_id: HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 2 }, body: BodyId { hir_id: HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 4 } } }, span: mutant.rs:9:20: 9:30 (#0) })], bindings: [], parenthesized: false }), infer_args: false }, mutant.rs:9:5: 9:9 (#0), [Expr { hir_id: HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 7 }, kind: Path(Resolved(None, Path { span: mutant.rs:9:1: 9:2 (#0), res: Def(Ctor(Struct, Const), DefId(0:4 ~ mutant[8787]::S::{constructor#0})), segments: [PathSegment { ident: S#0, hir_id: Some(HirId { owner: DefId(0:9 ~ mutant[8787]::dont_crash), local_id: 6 }), res: Some(Err), args: None, infer_args: true }] })), attrs: ThinVec(None), span: mutant.rs:9:1: 9:2 (#0) }], mutant.rs:9:5: 9:36 (#0)), attrs: ThinVec(None), span: mutant.rs:9:1: 9:36 (#0) })

  |

  = note: delayed at compiler/rustc_typeck/src/collect/type_of.rs:439:26



error: internal compiler error: TyKind::Error constructed but no error reported

  |

  = note: delayed at compiler/rustc_typeck/src/check/coercion.rs:154:49



error: internal compiler error: TyKind::Error constructed but no error reported

  |

  = note: delayed at compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs:633:60



error: internal compiler error: TyKind::Error constructed but no error reported

  |

  = note: delayed at /rustc/caca2121ffe4cb47d8ea2d9469c493995f57e0b5/compiler/rustc_middle/src/ty/relate.rs:347:59



error: internal compiler error: cat_expr Errd

 --> mutant.rs:9:20

  |

9 | S . func :: < 'a , dont_crash > ( )

  |                    ^^^^^^^^^^

  |

  = note: delayed at compiler/rustc_typeck/src/check/regionck.rs:402:31



error: internal compiler error: TyKind::Error constructed but no error reported

  |

  = note: delayed at compiler/rustc_mir_build/src/build/mod.rs:690:18



error: internal compiler error: mir_const_qualif: MIR had errors

 --> mutant.rs:9:20

  |

9 | S . func :: < 'a , dont_crash > ( )

  |                    ^^^^^^^^^^

  |

  = note: delayed at compiler/rustc_mir/src/transform/mod.rs:235:18



error: internal compiler error: PromoteTemps: MIR had errors

 --> mutant.rs:9:20

  |

9 | S . func :: < 'a , dont_crash > ( )

  |                    ^^^^^^^^^^

  |

  = note: delayed at compiler/rustc_mir/src/transform/promote_consts.rs:55:22



error: internal compiler error: broken MIR in DefId(0:13 ~ mutant[8787]::dont_crash::{constant#0}) ("return type"): bad type [type error]

 --> mutant.rs:9:20

  |

9 | S . func :: < 'a , dont_crash > ( )

  |                    ^^^^^^^^^^

  |

  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27



error: internal compiler error: TyKind::Error constructed but no error reported

  |

  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:714:20



error: internal compiler error: broken MIR in DefId(0:13 ~ mutant[8787]::dont_crash::{constant#0}) (LocalDecl { mutability: Mut, local_info: None, internal: false, is_block_tail: None, ty: [type error], user_ty: None, source_info: SourceInfo { span: mutant.rs:9:20: 9:30 (#0), scope: scope[0] } }): bad type [type error]

 --> mutant.rs:9:20

  |

9 | S . func :: < 'a , dont_crash > ( )

  |                    ^^^^^^^^^^

  |

  = note: delayed at compiler/rustc_mir/src/borrow_check/type_check/mod.rs:252:27



thread 'rustc' panicked at 'no errors encountered even though `delay_span_bug` issued', compiler/rustc_errors/src/lib.rs:1012:13

note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace



error: internal compiler error: unexpected panic



note: the compiler unexpectedly panicked. this is a bug.



note: we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new?labels=C-bug%2C+I-ICE%2C+T-compiler&template=ice.md



note: rustc 1.52.0-nightly (caca2121f 2021-03-05) running on x86_64-unknown-linux-gnu



note: compiler flags: -Z mir-opt-level=3 -Z new-llvm-pass-manager=yes -Z unsound-mir-opts=yes -Z polonius=yes -Z polymorphize=yes -C debuginfo=2 -C opt-level=3 --crate-type staticlib



query stack during panic:

end of query stack

