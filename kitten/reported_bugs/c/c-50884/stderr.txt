mutant.c:4:25: warning: no previous prototype for function 'foo' [-Wmissing-prototypes]

} do_plasma_rect ; void foo ( void ( * bar ) ( void ) )

                        ^

mutant.c:4:20: note: declare 'static' if the function is not intended to be used outside of this translation unit

} do_plasma_rect ; void foo ( void ( * bar ) ( void ) )

                   ^

                   static 

mutant.c:8:22: warning: this function declaration is not a prototype [-Wstrict-prototypes]

void gegl_buffer_set ( ) ;

                     ^

                       void

mutant.c:10:27: warning: use of GNU statement expression extension [-Wgnu-statement-expression]

if ( __builtin_expect ( ( {

                          ^

mutant.c:10:26: warning: '(' and '{' tokens introducing statement expression are separated by whitespace [-Wcompound-token-split-by-space]

if ( __builtin_expect ( ( {

                        ~^~

mutant.c:12:6: error: use of undeclared identifier 'do_plasma_context_0'; did you mean 'do_plasma_rect'?

if ( do_plasma_context_0 )

     ^~~~~~~~~~~~~~~~~~~

     do_plasma_rect

mutant.c:4:3: note: 'do_plasma_rect' declared here

} do_plasma_rect ; void foo ( void ( * bar ) ( void ) )

  ^

mutant.c:17:2: warning: '}' and ')' tokens terminating statement expression are separated by whitespace [-Wcompound-token-split-by-space]

} ) ,

~^~

clang-trunk: /tmp/tmp.xjN6dMkdrg-clang-builder/llvm-project/clang/lib/AST/ExprConstant.cpp:2508: bool EvaluateAsBooleanCondition(const clang::Expr*, bool&, {anonymous}::EvalInfo&): Assertion `E->isPRValue() && "missing lvalue-to-rvalue conv in bool condition"' failed.

PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.

Stack dump:

0.	Program arguments: clang-trunk -O3 -g3 -c -Wall -Wextra -Weverything mutant.c

1.	mutant.c:18:5: current parser token ')'

2.	mutant.c:9:36: parsing function body 'do_plasma'

3.	mutant.c:9:36: in compound statement ('{}')

Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):

clang-trunk(+0x395b184)[0x55fac6b28184]

clang-trunk(_ZN4llvm3sys15CleanupOnSignalEm+0xe4)[0x55fac6b25fa4]

clang-trunk(+0x389fdd8)[0x55fac6a6cdd8]

/lib/x86_64-linux-gnu/libpthread.so.0(+0x153c0)[0x7f07033153c0]

/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcb)[0x7f0702db418b]

/lib/x86_64-linux-gnu/libc.so.6(abort+0x12b)[0x7f0702d93859]

/lib/x86_64-linux-gnu/libc.so.6(+0x25729)[0x7f0702d93729]

/lib/x86_64-linux-gnu/libc.so.6(+0x36f36)[0x7f0702da4f36]

clang-trunk(+0x6a53e65)[0x55fac9c20e65]

clang-trunk(+0x6a6c72a)[0x55fac9c3972a]

clang-trunk(+0x6a69124)[0x55fac9c36124]

clang-trunk(+0x6a6450b)[0x55fac9c3150b]

clang-trunk(+0x6a535ae)[0x55fac9c205ae]

clang-trunk(+0x6a5d549)[0x55fac9c2a549]

clang-trunk(_ZNK5clang4Expr16EvaluateAsRValueERNS0_10EvalResultERKNS_10ASTContextEb+0x1ff)[0x55fac9c2c60f]

clang-trunk(+0x5d0336a)[0x55fac8ed036a]

clang-trunk(+0x5d30bb7)[0x55fac8efdbb7]

clang-trunk(+0x5d348bf)[0x55fac8f018bf]

clang-trunk(_ZN5clang4Sema18CheckCompletedExprEPNS_4ExprENS_14SourceLocationEb+0xdf)[0x55fac8f15bbf]

clang-trunk(_ZN5clang4Sema19ActOnFinishFullExprEPNS_4ExprENS_14SourceLocationEbb+0x122)[0x55fac92b8702]

clang-trunk(_ZN5clang4Sema14ActOnConditionEPNS_5ScopeENS_14SourceLocationEPNS_4ExprENS0_13ConditionKindE+0x6b)[0x55fac91d5afb]

clang-trunk(_ZN5clang6Parser25ParseParenExprOrConditionEPNS_12ActionResultIPNS_4StmtELb1EEERNS_4Sema15ConditionResultENS_14SourceLocationENS6_13ConditionKindEPS9_SB_+0x665)[0x55fac8dfb785]

clang-trunk(_ZN5clang6Parser16ParseIfStatementEPNS_14SourceLocationE+0x1a6)[0x55fac8e04196]

clang-trunk(_ZN5clang6Parser42ParseStatementOrDeclarationAfterAttributesERN4llvm11SmallVectorIPNS_4StmtELj32EEENS0_17ParsedStmtContextEPNS_14SourceLocationERNS_25ParsedAttributesWithRangeE+0x5bd)[0x55fac8dfd9ad]

clang-trunk(_ZN5clang6Parser27ParseStatementOrDeclarationERN4llvm11SmallVectorIPNS_4StmtELj32EEENS0_17ParsedStmtContextEPNS_14SourceLocationE+0x9a)[0x55fac8dfe6ca]

clang-trunk(_ZN5clang6Parser26ParseCompoundStatementBodyEb+0x5f9)[0x55fac8dff649]

clang-trunk(_ZN5clang6Parser26ParseFunctionStatementBodyEPNS_4DeclERNS0_10ParseScopeE+0xda)[0x55fac8e01c5a]

clang-trunk(_ZN5clang6Parser23ParseFunctionDefinitionERNS_17ParsingDeclaratorERKNS0_18ParsedTemplateInfoEPNS0_18LateParsedAttrListE+0x682)[0x55fac8d47ef2]

clang-trunk(_ZN5clang6Parser14ParseDeclGroupERNS_15ParsingDeclSpecENS_17DeclaratorContextEPNS_14SourceLocationEPNS0_12ForRangeInitE+0x740)[0x55fac8d74850]

clang-trunk(_ZN5clang6Parser30ParseDeclOrFunctionDefInternalERNS_25ParsedAttributesWithRangeERNS_15ParsingDeclSpecENS_15AccessSpecifierE+0x226)[0x55fac8d426f6]

clang-trunk(+0x5b75ce1)[0x55fac8d42ce1]

clang-trunk(_ZN5clang6Parser24ParseExternalDeclarationERNS_25ParsedAttributesWithRangeEPNS_15ParsingDeclSpecE+0x217)[0x55fac8d494e7]

clang-trunk(_ZN5clang6Parser17ParseTopLevelDeclERNS_9OpaquePtrINS_12DeclGroupRefEEEb+0x1ce)[0x55fac8d4aa7e]

clang-trunk(_ZN5clang8ParseASTERNS_4SemaEbb+0x219)[0x55fac8d3d2c9]

clang-trunk(_ZN5clang13CodeGenAction13ExecuteActionEv+0x178)[0x55fac7c84968]

clang-trunk(_ZN5clang14FrontendAction7ExecuteEv+0xd9)[0x55fac7534599]

clang-trunk(_ZN5clang16CompilerInstance13ExecuteActionERNS_14FrontendActionE+0x146)[0x55fac74c77e6]

clang-trunk(_ZN5clang25ExecuteCompilerInvocationEPNS_16CompilerInstanceE+0x930)[0x55fac7612480]

clang-trunk(_Z8cc1_mainN4llvm8ArrayRefIPKcEES2_Pv+0x7f6)[0x55fac4432696]

clang-trunk(+0x12619d8)[0x55fac442e9d8]

clang-trunk(+0x418b789)[0x55fac7358789]

clang-trunk(_ZN4llvm20CrashRecoveryContext9RunSafelyENS_12function_refIFvvEEE+0xbc)[0x55fac6a6cf5c]

clang-trunk(+0x418bf2d)[0x55fac7358f2d]

clang-trunk(_ZNK5clang6driver11Compilation14ExecuteCommandERKNS0_7CommandERPS3_+0x9b)[0x55fac732b6bb]

clang-trunk(_ZNK5clang6driver11Compilation11ExecuteJobsERKNS0_7JobListERN4llvm15SmallVectorImplISt4pairIiPKNS0_7CommandEEEE+0x119)[0x55fac732c1d9]

clang-trunk(_ZN5clang6driver6Driver18ExecuteCompilationERNS0_11CompilationERN4llvm15SmallVectorImplISt4pairIiPKNS0_7CommandEEEE+0x99)[0x55fac7336d89]

clang-trunk(main+0x18af)[0x55fac435d52f]

/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7f0702d950b3]

clang-trunk(_start+0x2e)[0x55fac442e54e]

clang-13: error: clang frontend command failed with exit code 134 (use -v to see invocation)

clang version 13.0.0 (https://github.com/llvm/llvm-project.git 2e9c75daffddd65e37c3236708b5b133e6f5f2f5)

Target: x86_64-unknown-linux-gnu

Thread model: posix

InstalledDir: /home/cnsun/usr/bin

clang-13: note: diagnostic msg: 

********************



PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:

Preprocessed source(s) and associated run script(s) are located at:

clang-13: note: diagnostic msg: /tmp/mutant-377548.c

clang-13: note: diagnostic msg: /tmp/mutant-377548.sh

clang-13: note: diagnostic msg: 



********************

