mutant.c:7:14: warning: implicit declaration of function '_mm512_cmplt_epu64_mask' is invalid in C99 [-Wimplicit-function-declaration]

char z [ m = _mm512_cmplt_epu64_mask ( x , x ) ] ;

             ^

mutant.c:7:14: warning: identifier '_mm512_cmplt_epu64_mask' is reserved because it starts with '_' at global scope [-Wreserved-identifier]

clang-trunk: /tmp/tmp.pJ81DaSyc6-clang-builder/llvm-project/llvm/include/llvm/Support/Casting.h:269: typename llvm::cast_retty<X, Y*>::ret_type llvm::cast(Y*) [with X = clang::CXXRecordDecl; Y = clang::DeclContext; typename llvm::cast_retty<X, Y*>::ret_type = clang::CXXRecordDecl*]: Assertion `isa<X>(Val) && "cast<Ty>() argument of incompatible type!"' failed.

PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.

Stack dump:

0.	Program arguments: clang-trunk -O3 -g3 -c -Wall -Wextra -Weverything mutant.c

1.	mutant.c:7:42: current parser token ','

2.	mutant.c:1:7: parsing struct/union body '(anonymous)'

3.	mutant.c:6:1: parsing struct/union body '(anonymous union)::(anonymous)'

Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):

clang-trunk(+0x39dfab4)[0x563a42212ab4]

clang-trunk(_ZN4llvm3sys15CleanupOnSignalEm+0xe4)[0x563a422108d4]

clang-trunk(+0x39246b8)[0x563a421576b8]

/lib/x86_64-linux-gnu/libpthread.so.0(+0x153c0)[0x7faf9f1df3c0]

/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcb)[0x7faf9ec7e18b]

/lib/x86_64-linux-gnu/libc.so.6(abort+0x12b)[0x7faf9ec5d859]

/lib/x86_64-linux-gnu/libc.so.6(+0x25729)[0x7faf9ec5d729]

/lib/x86_64-linux-gnu/libc.so.6(+0x36f36)[0x7faf9ec6ef36]

clang-trunk(_ZN5clang4Sema31BuildPossibleImplicitMemberExprERKNS_12CXXScopeSpecENS_14SourceLocationERNS_12LookupResultEPKNS_24TemplateArgumentListInfoEPKNS_5ScopeEPNS_20UnresolvedLookupExprE+0xd4b)[0x563a44a364bb]

clang-trunk(_ZN5clang4Sema17ActOnIdExpressionEPNS_5ScopeERNS_12CXXScopeSpecENS_14SourceLocationERNS_13UnqualifiedIdEbbPNS_27CorrectionCandidateCallbackEbPNS_5TokenE+0xfb7)[0x563a448dfaf7]

clang-trunk(_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbRbNS0_13TypeCastStateEbPb+0xb87)[0x563a444a77b7]

clang-trunk(_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbNS0_13TypeCastStateEbPb+0x3b)[0x563a444a985b]

clang-trunk(_ZN5clang6Parser25ParseAssignmentExpressionENS0_13TypeCastStateE+0x3d)[0x563a444a98fd]

clang-trunk(_ZN5clang6Parser19ParseExpressionListERN4llvm15SmallVectorImplIPNS_4ExprEEERNS2_INS_14SourceLocationEEENS1_12function_refIFvvEEE+0x6f)[0x563a444a9c3f]

clang-trunk(_ZN5clang6Parser28ParsePostfixExpressionSuffixENS_12ActionResultIPNS_4ExprELb1EEE+0x5b8)[0x563a444ad6d8]

clang-trunk(_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbRbNS0_13TypeCastStateEbPb+0x132)[0x563a444a6d62]

clang-trunk(_ZN5clang6Parser19ParseCastExpressionENS0_13CastParseKindEbNS0_13TypeCastStateEbPb+0x3b)[0x563a444a985b]

clang-trunk(_ZN5clang6Parser26ParseRHSOfBinaryExpressionENS_12ActionResultIPNS_4ExprELb1EEENS_4prec5LevelE+0x5ef)[0x563a444aac6f]

clang-trunk(_ZN5clang6Parser22ParseBracketDeclaratorERNS_10DeclaratorE+0x359)[0x563a444848d9]

clang-trunk(_ZN5clang6Parser21ParseDirectDeclaratorERNS_10DeclaratorE+0x653)[0x563a44489423]

clang-trunk(_ZN5clang6Parser23ParseDeclaratorInternalERNS_10DeclaratorEMS0_FvS2_E+0xf8)[0x563a44472098]

clang-trunk(_ZN5clang6Parser22ParseStructDeclarationERNS_15ParsingDeclSpecEN4llvm12function_refIFvRNS_22ParsingFieldDeclaratorEEEE+0x324)[0x563a44483734]

clang-trunk(_ZN5clang6Parser20ParseStructUnionBodyENS_14SourceLocationENS_17TypeSpecifierTypeEPNS_10RecordDeclE+0x45f)[0x563a44483edf]

clang-trunk(_ZN5clang6Parser19ParseClassSpecifierENS_3tok9TokenKindENS_14SourceLocationERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierEbNS0_15DeclSpecContextERNS_25ParsedAttributesWithRangeE+0x946)[0x563a4449fa96]

clang-trunk(_ZN5clang6Parser26ParseDeclarationSpecifiersERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextEPNS0_18LateParsedAttrListE+0x731)[0x563a4447e821]

clang-trunk(_ZN5clang6Parser27ParseSpecifierQualifierListERNS_8DeclSpecENS_15AccessSpecifierENS0_15DeclSpecContextE+0x54)[0x563a44481a74]

clang-trunk(_ZN5clang6Parser22ParseStructDeclarationERNS_15ParsingDeclSpecEN4llvm12function_refIFvRNS_22ParsingFieldDeclaratorEEEE+0x9e)[0x563a444834ae]

clang-trunk(_ZN5clang6Parser20ParseStructUnionBodyENS_14SourceLocationENS_17TypeSpecifierTypeEPNS_10RecordDeclE+0x45f)[0x563a44483edf]

clang-trunk(_ZN5clang6Parser19ParseClassSpecifierENS_3tok9TokenKindENS_14SourceLocationERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierEbNS0_15DeclSpecContextERNS_25ParsedAttributesWithRangeE+0x946)[0x563a4449fa96]

clang-trunk(_ZN5clang6Parser26ParseDeclarationSpecifiersERNS_8DeclSpecERKNS0_18ParsedTemplateInfoENS_15AccessSpecifierENS0_15DeclSpecContextEPNS0_18LateParsedAttrListE+0x731)[0x563a4447e821]

clang-trunk(_ZN5clang6Parser30ParseDeclOrFunctionDefInternalERNS_25ParsedAttributesWithRangeERNS_15ParsingDeclSpecENS_15AccessSpecifierE+0x83)[0x563a44450163]

clang-trunk(+0x5c1d8f1)[0x563a444508f1]

clang-trunk(_ZN5clang6Parser24ParseExternalDeclarationERNS_25ParsedAttributesWithRangeEPNS_15ParsingDeclSpecE+0x217)[0x563a44457117]

clang-trunk(_ZN5clang6Parser17ParseTopLevelDeclERNS_9OpaquePtrINS_12DeclGroupRefEEEb+0x1ce)[0x563a444586ae]

clang-trunk(_ZN5clang6Parser22ParseFirstTopLevelDeclERNS_9OpaquePtrINS_12DeclGroupRefEEE+0x39)[0x563a44458a59]

clang-trunk(_ZN5clang8ParseASTERNS_4SemaEbb+0x1ea)[0x563a4444aeaa]

clang-trunk(_ZN5clang13CodeGenAction13ExecuteActionEv+0x178)[0x563a4338e118]

clang-trunk(_ZN5clang14FrontendAction7ExecuteEv+0xd9)[0x563a42c2ed09]

clang-trunk(_ZN5clang16CompilerInstance13ExecuteActionERNS_14FrontendActionE+0x146)[0x563a42bc1d16]

clang-trunk(_ZN5clang25ExecuteCompilerInvocationEPNS_16CompilerInstanceE+0x930)[0x563a42d0cb90]

clang-trunk(_Z8cc1_mainN4llvm8ArrayRefIPKcEES2_Pv+0x7f6)[0x563a3fac2ad6]

clang-trunk(+0x128be18)[0x563a3fabee18]

clang-trunk(+0x421f5f9)[0x563a42a525f9]

clang-trunk(_ZN4llvm20CrashRecoveryContext9RunSafelyENS_12function_refIFvvEEE+0xbc)[0x563a4215783c]

clang-trunk(+0x421fd9d)[0x563a42a52d9d]

clang-trunk(_ZNK5clang6driver11Compilation14ExecuteCommandERKNS0_7CommandERPS3_+0x9b)[0x563a42a253bb]

clang-trunk(_ZNK5clang6driver11Compilation11ExecuteJobsERKNS0_7JobListERN4llvm15SmallVectorImplISt4pairIiPKNS0_7CommandEEEE+0x119)[0x563a42a25ed9]

clang-trunk(_ZN5clang6driver6Driver18ExecuteCompilationERNS0_11CompilationERN4llvm15SmallVectorImplISt4pairIiPKNS0_7CommandEEEE+0x99)[0x563a42a30e39]

clang-trunk(main+0x18af)[0x563a3f9ed60f]

/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7faf9ec5f0b3]

clang-trunk(_start+0x2e)[0x563a3fabe98e]

clang-13: error: clang frontend command failed with exit code 134 (use -v to see invocation)

clang version 13.0.0 (https://github.com/llvm/llvm-project.git 7140382b17df7c33145cc6e9a2df7e84a2259444)

Target: x86_64-unknown-linux-gnu

Thread model: posix

InstalledDir: /home/cnsun/usr/bin

clang-13: note: diagnostic msg: 

********************



PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:

Preprocessed source(s) and associated run script(s) are located at:

clang-13: note: diagnostic msg: /tmp/mutant-d6fb64.c

clang-13: note: diagnostic msg: /tmp/mutant-d6fb64.sh

clang-13: note: diagnostic msg: 



********************

