mutant.c:2:239: warning: interrupt service routine should only call a function with attribute 'no_caller_saved_registers' [-Winterrupt-service-routine]

frame ) ; typedef int aligned __attribute__ ( ( aligned ( 64 ) ) ) ; typedef unsigned int uword_t __attribute__ ( ( mode ( __word__ ) ) ) ; __attribute__ ( ( interrupt ) ) void foo ( void * frame , uword_t error_code ) { aligned j ; if ( check_int ( frame , & j , __alignof__ ( j ) ) )

                                                                                                                                                                                                                                              ^

mutant.c:1:12: note: 'check_int' declared here

extern int check_int ( int * i , void * , int

           ^

mutant.c:3:1: warning: interrupt service routine should only call a function with attribute 'no_caller_saved_registers' [-Winterrupt-service-routine]

__builtin_abort ( ) ;

^

mutant.c:3:1: note: '__builtin_abort' declared here

mutant.c:2:207: warning: unused parameter 'error_code' [-Wunused-parameter]

frame ) ; typedef int aligned __attribute__ ( ( aligned ( 64 ) ) ) ; typedef unsigned int uword_t __attribute__ ( ( mode ( __word__ ) ) ) ; __attribute__ ( ( interrupt ) ) void foo ( void * frame , uword_t error_code ) { aligned j ; if ( check_int ( frame , & j , __alignof__ ( j ) ) )

                                                                                                                                                                                                              ^

mutant.c:2:178: warning: no previous prototype for function 'foo' [-Wmissing-prototypes]

frame ) ; typedef int aligned __attribute__ ( ( aligned ( 64 ) ) ) ; typedef unsigned int uword_t __attribute__ ( ( mode ( __word__ ) ) ) ; __attribute__ ( ( interrupt ) ) void foo ( void * frame , uword_t error_code ) { aligned j ; if ( check_int ( frame , & j , __alignof__ ( j ) ) )

                                                                                                                                                                                 ^

mutant.c:2:173: note: declare 'static' if the function is not intended to be used outside of this translation unit

frame ) ; typedef int aligned __attribute__ ( ( aligned ( 64 ) ) ) ; typedef unsigned int uword_t __attribute__ ( ( mode ( __word__ ) ) ) ; __attribute__ ( ( interrupt ) ) void foo ( void * frame , uword_t error_code ) { aligned j ; if ( check_int ( frame , & j , __alignof__ ( j ) ) )

                                                                                                                                                                            ^

                                                                                                                                                                            static 

clang-trunk: /tmp/tmp.I8YlLX7NCh-clang-builder/llvm-project/llvm/lib/Target/X86/X86FrameLowering.cpp:2280: virtual llvm::StackOffset llvm::X86FrameLowering::getFrameIndexReference(const llvm::MachineFunction&, int, llvm::Register&) const: Assertion `isAligned(MFI.getObjectAlign(FI), -(Offset + StackSize))' failed.

PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace, preprocessed source, and associated run script.

Stack dump:

0.	Program arguments: clang-trunk -O3 -g3 -c -Wall -Wextra -Weverything mutant.c

1.	<eof> parser at end of file

2.	Code generation

3.	Running pass 'Function Pass Manager' on module 'mutant.c'.

4.	Running pass 'Prologue/Epilogue Insertion & Frame Finalization' on function '@foo'

Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):

clang-trunk(+0x394c8d4)[0x55fcb6de48d4]

clang-trunk(_ZN4llvm3sys15CleanupOnSignalEm+0xe4)[0x55fcb6de26f4]

clang-trunk(+0x38927d8)[0x55fcb6d2a7d8]

/lib/x86_64-linux-gnu/libpthread.so.0(+0x153c0)[0x7fa9070b53c0]

/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcb)[0x7fa906b5518b]

/lib/x86_64-linux-gnu/libc.so.6(abort+0x12b)[0x7fa906b34859]

/lib/x86_64-linux-gnu/libc.so.6(+0x25729)[0x7fa906b34729]

/lib/x86_64-linux-gnu/libc.so.6(+0x36f36)[0x7fa906b45f36]

clang-trunk(+0x242633e)[0x55fcb58be33e]

clang-trunk(+0x2c8dea4)[0x55fcb6125ea4]

clang-trunk(+0x2c9632c)[0x55fcb612e32c]

clang-trunk(_ZN4llvm19MachineFunctionPass13runOnFunctionERNS_8FunctionE+0x258)[0x55fcb6009858]

clang-trunk(_ZN4llvm13FPPassManager13runOnFunctionERNS_8FunctionE+0x365)[0x55fcb64e0635]

clang-trunk(_ZN4llvm13FPPassManager11runOnModuleERNS_6ModuleE+0x39)[0x55fcb64e0879]

clang-trunk(_ZN4llvm6legacy15PassManagerImpl3runERNS_6ModuleE+0x382)[0x55fcb64e1972]

clang-trunk(+0x3c7ea72)[0x55fcb7116a72]

clang-trunk(_ZN5clang17EmitBackendOutputERNS_17DiagnosticsEngineERKNS_19HeaderSearchOptionsERKNS_14CodeGenOptionsERKNS_13TargetOptionsERKNS_11LangOptionsEN4llvm9StringRefEPNSE_6ModuleENS_13BackendActionESt10unique_ptrINSE_17raw_pwrite_streamESt14default_deleteISK_EE+0x47d)[0x55fcb711852d]

clang-trunk(+0x4aaa19f)[0x55fcb7f4219f]

clang-trunk(_ZN5clang8ParseASTERNS_4SemaEbb+0x429)[0x55fcb8ffa359]

clang-trunk(_ZN5clang13CodeGenAction13ExecuteActionEv+0x178)[0x55fcb7f40ce8]

clang-trunk(_ZN5clang14FrontendAction7ExecuteEv+0xd9)[0x55fcb77f2e79]

clang-trunk(_ZN5clang16CompilerInstance13ExecuteActionERNS_14FrontendActionE+0x146)[0x55fcb7785fd6]

clang-trunk(_ZN5clang25ExecuteCompilerInvocationEPNS_16CompilerInstanceE+0x930)[0x55fcb78d08f0]

clang-trunk(_Z8cc1_mainN4llvm8ArrayRefIPKcEES2_Pv+0x7f6)[0x55fcb46f71f6]

clang-trunk(+0x125b538)[0x55fcb46f3538]

clang-trunk(+0x417eca9)[0x55fcb7616ca9]

clang-trunk(_ZN4llvm20CrashRecoveryContext9RunSafelyENS_12function_refIFvvEEE+0xbc)[0x55fcb6d2a95c]

clang-trunk(+0x417f44d)[0x55fcb761744d]

clang-trunk(_ZNK5clang6driver11Compilation14ExecuteCommandERKNS0_7CommandERPS3_+0x9b)[0x55fcb75e9bdb]

clang-trunk(_ZNK5clang6driver11Compilation11ExecuteJobsERKNS0_7JobListERN4llvm15SmallVectorImplISt4pairIiPKNS0_7CommandEEEE+0x119)[0x55fcb75ea6f9]

clang-trunk(_ZN5clang6driver6Driver18ExecuteCompilationERNS0_11CompilationERN4llvm15SmallVectorImplISt4pairIiPKNS0_7CommandEEEE+0x99)[0x55fcb75f52a9]

clang-trunk(main+0x18af)[0x55fcb46224ff]

/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf3)[0x7fa906b360b3]

clang-trunk(_start+0x2e)[0x55fcb46f30ae]

clang-13: error: clang frontend command failed with exit code 134 (use -v to see invocation)

clang version 13.0.0 (https://github.com/llvm/llvm-project.git 74909e4b6e9bc0da6c197cf6c4419991a8dc335f)

Target: x86_64-unknown-linux-gnu

Thread model: posix

InstalledDir: /home/cnsun/usr/bin

clang-13: note: diagnostic msg: 

********************



PLEASE ATTACH THE FOLLOWING FILES TO THE BUG REPORT:

Preprocessed source(s) and associated run script(s) are located at:

clang-13: note: diagnostic msg: /tmp/mutant-0a8abc.c

clang-13: note: diagnostic msg: /tmp/mutant-0a8abc.sh

clang-13: note: diagnostic msg: 



********************

